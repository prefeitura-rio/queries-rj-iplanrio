{"child_map":{},"disabled":{},"docs":{},"exposures":{},"group_map":{},"groups":{},"macros":{"macro.dbt._bigquery__get_matching_schemata":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","meta":{},"name":"_bigquery__get_matching_schemata","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt._bigquery__get_matching_schemata"},"macro.dbt._split_part_negative":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}","meta":{},"name":"_split_part_negative","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/split_part.sql","package_name":"dbt","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt._split_part_negative"},"macro.dbt.after_commit":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","meta":{},"name":"after_commit","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.after_commit"},"macro.dbt.alter_column_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}","meta":{},"name":"alter_column_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.alter_column_comment"},"macro.dbt.alter_column_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}","meta":{},"name":"alter_column_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.alter_column_type"},"macro.dbt.alter_relation_add_remove_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}","meta":{},"name":"alter_relation_add_remove_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.alter_relation_add_remove_columns"},"macro.dbt.alter_relation_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}","meta":{},"name":"alter_relation_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.alter_relation_comment"},"macro.dbt.any_value":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"any_value","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/any_value.sql","package_name":"dbt","path":"macros/utils/any_value.sql","resource_type":"macro","unique_id":"macro.dbt.any_value"},"macro.dbt.apply_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}","meta":{},"name":"apply_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.apply_grants"},"macro.dbt.array_append":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}","meta":{},"name":"array_append","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_append.sql","package_name":"dbt","path":"macros/utils/array_append.sql","resource_type":"macro","unique_id":"macro.dbt.array_append"},"macro.dbt.array_concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}","meta":{},"name":"array_concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_concat.sql","package_name":"dbt","path":"macros/utils/array_concat.sql","resource_type":"macro","unique_id":"macro.dbt.array_concat"},"macro.dbt.array_construct":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}","meta":{},"name":"array_construct","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_construct.sql","package_name":"dbt","path":"macros/utils/array_construct.sql","resource_type":"macro","unique_id":"macro.dbt.array_construct"},"macro.dbt.assert_columns_equivalent":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}","meta":{},"name":"assert_columns_equivalent","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.assert_columns_equivalent"},"macro.dbt.before_begin":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","meta":{},"name":"before_begin","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.before_begin"},"macro.dbt.bigquery__get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=_bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ adapter.dispatch('get_table_types_sql')() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","meta":{},"name":"bigquery__get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.bigquery__get_tables_by_pattern_sql"},"macro.dbt.bigquery__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__t_database_name() %}\n  {{ return(env_var('GOOGLE_CLOUD_PROJECT')) }}\n{% endmacro %}","meta":{},"name":"bigquery__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.bigquery__t_database_name"},"macro.dbt.bool_or":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"bool_or","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/bool_or.sql","package_name":"dbt","path":"macros/utils/bool_or.sql","resource_type":"macro","unique_id":"macro.dbt.bool_or"},"macro.dbt.build_config_dict":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}","meta":{},"name":"build_config_dict","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.build_config_dict"},"macro.dbt.build_ref_function":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}","meta":{},"name":"build_ref_function","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.build_ref_function"},"macro.dbt.build_snapshot_staging_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","meta":{},"name":"build_snapshot_staging_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.build_snapshot_staging_table"},"macro.dbt.build_snapshot_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}","meta":{},"name":"build_snapshot_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.build_snapshot_table"},"macro.dbt.build_source_function":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}","meta":{},"name":"build_source_function","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.build_source_function"},"macro.dbt.call_dcl_statements":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}","meta":{},"name":"call_dcl_statements","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.call_dcl_statements"},"macro.dbt.can_clone_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"can_clone_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/can_clone_table.sql","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","resource_type":"macro","unique_id":"macro.dbt.can_clone_table"},"macro.dbt.cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}","meta":{},"name":"cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast.sql","package_name":"dbt","path":"macros/utils/cast.sql","resource_type":"macro","unique_id":"macro.dbt.cast"},"macro.dbt.cast_bool_to_text":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}","meta":{},"name":"cast_bool_to_text","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast_bool_to_text.sql","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","resource_type":"macro","unique_id":"macro.dbt.cast_bool_to_text"},"macro.dbt.check_for_schema_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}","meta":{},"name":"check_for_schema_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.check_for_schema_changes"},"macro.dbt.check_schema_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}","meta":{},"name":"check_schema_exists","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.check_schema_exists"},"macro.dbt.check_time_data_types":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"check_time_data_types","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.check_time_data_types"},"macro.dbt.collect_freshness":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}","meta":{},"name":"collect_freshness","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.collect_freshness"},"macro.dbt.collect_freshness_custom_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}","meta":{},"name":"collect_freshness_custom_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.collect_freshness_custom_sql"},"macro.dbt.concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}","meta":{},"name":"concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/concat.sql","package_name":"dbt","path":"macros/utils/concat.sql","resource_type":"macro","unique_id":"macro.dbt.concat"},"macro.dbt.convert_datetime":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}","meta":{},"name":"convert_datetime","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.convert_datetime"},"macro.dbt.copy_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"copy_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.copy_grants"},"macro.dbt.create_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}","meta":{},"name":"create_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.create_columns"},"macro.dbt.create_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}","meta":{},"name":"create_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.create_csv_table"},"macro.dbt.create_indexes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}","meta":{},"name":"create_indexes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.create_indexes"},"macro.dbt.create_or_replace_clone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}","meta":{},"name":"create_or_replace_clone","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/create_or_replace_clone.sql","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","resource_type":"macro","unique_id":"macro.dbt.create_or_replace_clone"},"macro.dbt.create_or_replace_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","meta":{},"name":"create_or_replace_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.create_or_replace_view"},"macro.dbt.create_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}","meta":{},"name":"create_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.create_schema"},"macro.dbt.create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}","meta":{},"name":"create_table_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.create_table_as"},"macro.dbt.create_view_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}","meta":{},"name":"create_view_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.create_view_as"},"macro.dbt.current_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n","meta":{},"name":"current_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.current_timestamp"},"macro.dbt.current_timestamp_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"current_timestamp_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.current_timestamp_backcompat"},"macro.dbt.current_timestamp_in_utc_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"current_timestamp_in_utc_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.current_timestamp_in_utc_backcompat"},"macro.dbt.databricks__get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","meta":{},"name":"databricks__get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.databricks__get_table_types_sql"},"macro.dbt.databricks__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro databricks__t_database_name() %}\n  {{ return(env_var('DATABRICKS_CATALOG')) }}\n{% endmacro %}","meta":{},"name":"databricks__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.databricks__t_database_name"},"macro.dbt.date":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}","meta":{},"name":"date","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date.sql","package_name":"dbt","path":"macros/utils/date.sql","resource_type":"macro","unique_id":"macro.dbt.date"},"macro.dbt.date_spine":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}","meta":{},"name":"date_spine","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.date_spine"},"macro.dbt.date_trunc":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}","meta":{},"name":"date_trunc","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_trunc.sql","package_name":"dbt","path":"macros/utils/date_trunc.sql","resource_type":"macro","unique_id":"macro.dbt.date_trunc"},"macro.dbt.dateadd":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}","meta":{},"name":"dateadd","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/dateadd.sql","package_name":"dbt","path":"macros/utils/dateadd.sql","resource_type":"macro","unique_id":"macro.dbt.dateadd"},"macro.dbt.datediff":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}","meta":{},"name":"datediff","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/datediff.sql","package_name":"dbt","path":"macros/utils/datediff.sql","resource_type":"macro","unique_id":"macro.dbt.datediff"},"macro.dbt.dates_in_range":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}","meta":{},"name":"dates_in_range","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.dates_in_range"},"macro.dbt.default__alter_column_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__alter_column_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_column_comment"},"macro.dbt.default__alter_column_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}","meta":{},"name":"default__alter_column_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_column_type"},"macro.dbt.default__alter_relation_add_remove_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}","meta":{},"name":"default__alter_relation_add_remove_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_relation_add_remove_columns"},"macro.dbt.default__alter_relation_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__alter_relation_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_relation_comment"},"macro.dbt.default__any_value":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}","meta":{},"name":"default__any_value","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/any_value.sql","package_name":"dbt","path":"macros/utils/any_value.sql","resource_type":"macro","unique_id":"macro.dbt.default__any_value"},"macro.dbt.default__apply_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}","meta":{},"name":"default__apply_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__apply_grants"},"macro.dbt.default__array_append":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}","meta":{},"name":"default__array_append","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_append.sql","package_name":"dbt","path":"macros/utils/array_append.sql","resource_type":"macro","unique_id":"macro.dbt.default__array_append"},"macro.dbt.default__array_concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","meta":{},"name":"default__array_concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_concat.sql","package_name":"dbt","path":"macros/utils/array_concat.sql","resource_type":"macro","unique_id":"macro.dbt.default__array_concat"},"macro.dbt.default__array_construct":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}","meta":{},"name":"default__array_construct","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_construct.sql","package_name":"dbt","path":"macros/utils/array_construct.sql","resource_type":"macro","unique_id":"macro.dbt.default__array_construct"},"macro.dbt.default__bool_or":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}","meta":{},"name":"default__bool_or","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/bool_or.sql","package_name":"dbt","path":"macros/utils/bool_or.sql","resource_type":"macro","unique_id":"macro.dbt.default__bool_or"},"macro.dbt.default__build_snapshot_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}","meta":{},"name":"default__build_snapshot_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__build_snapshot_table"},"macro.dbt.default__call_dcl_statements":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}","meta":{},"name":"default__call_dcl_statements","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__call_dcl_statements"},"macro.dbt.default__can_clone_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}","meta":{},"name":"default__can_clone_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/can_clone_table.sql","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","resource_type":"macro","unique_id":"macro.dbt.default__can_clone_table"},"macro.dbt.default__cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}","meta":{},"name":"default__cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast.sql","package_name":"dbt","path":"macros/utils/cast.sql","resource_type":"macro","unique_id":"macro.dbt.default__cast"},"macro.dbt.default__cast_bool_to_text":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}","meta":{},"name":"default__cast_bool_to_text","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast_bool_to_text.sql","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","resource_type":"macro","unique_id":"macro.dbt.default__cast_bool_to_text"},"macro.dbt.default__check_schema_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","meta":{},"name":"default__check_schema_exists","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__check_schema_exists"},"macro.dbt.default__collect_freshness":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}","meta":{},"name":"default__collect_freshness","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.default__collect_freshness"},"macro.dbt.default__collect_freshness_custom_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}","meta":{},"name":"default__collect_freshness_custom_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.default__collect_freshness_custom_sql"},"macro.dbt.default__concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}","meta":{},"name":"default__concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/concat.sql","package_name":"dbt","path":"macros/utils/concat.sql","resource_type":"macro","unique_id":"macro.dbt.default__concat"},"macro.dbt.default__copy_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}","meta":{},"name":"default__copy_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__copy_grants"},"macro.dbt.default__create_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}","meta":{},"name":"default__create_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_columns"},"macro.dbt.default__create_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}","meta":{},"name":"default__create_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_csv_table"},"macro.dbt.default__create_indexes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","meta":{},"name":"default__create_indexes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_indexes"},"macro.dbt.default__create_or_replace_clone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}","meta":{},"name":"default__create_or_replace_clone","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/create_or_replace_clone.sql","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_or_replace_clone"},"macro.dbt.default__create_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}","meta":{},"name":"default__create_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_schema"},"macro.dbt.default__create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","meta":{},"name":"default__create_table_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_table_as"},"macro.dbt.default__create_view_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","meta":{},"name":"default__create_view_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_view_as"},"macro.dbt.default__current_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}","meta":{},"name":"default__current_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__current_timestamp"},"macro.dbt.default__current_timestamp_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}","meta":{},"name":"default__current_timestamp_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__current_timestamp_backcompat"},"macro.dbt.default__current_timestamp_in_utc_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"default__current_timestamp_in_utc_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__current_timestamp_in_utc_backcompat"},"macro.dbt.default__date":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}","meta":{},"name":"default__date","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date.sql","package_name":"dbt","path":"macros/utils/date.sql","resource_type":"macro","unique_id":"macro.dbt.default__date"},"macro.dbt.default__date_spine":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}","meta":{},"name":"default__date_spine","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.default__date_spine"},"macro.dbt.default__date_trunc":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}","meta":{},"name":"default__date_trunc","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_trunc.sql","package_name":"dbt","path":"macros/utils/date_trunc.sql","resource_type":"macro","unique_id":"macro.dbt.default__date_trunc"},"macro.dbt.default__dateadd":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}","meta":{},"name":"default__dateadd","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/dateadd.sql","package_name":"dbt","path":"macros/utils/dateadd.sql","resource_type":"macro","unique_id":"macro.dbt.default__dateadd"},"macro.dbt.default__datediff":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}","meta":{},"name":"default__datediff","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/datediff.sql","package_name":"dbt","path":"macros/utils/datediff.sql","resource_type":"macro","unique_id":"macro.dbt.default__datediff"},"macro.dbt.default__drop_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}","meta":{},"name":"default__drop_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/drop.sql","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_materialized_view"},"macro.dbt.default__drop_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}","meta":{},"name":"default__drop_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_relation"},"macro.dbt.default__drop_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}","meta":{},"name":"default__drop_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_schema"},"macro.dbt.default__drop_schema_named":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}","meta":{},"name":"default__drop_schema_named","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/schema.sql","package_name":"dbt","path":"macros/relations/schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_schema_named"},"macro.dbt.default__drop_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}","meta":{},"name":"default__drop_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/drop.sql","package_name":"dbt","path":"macros/relations/table/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_table"},"macro.dbt.default__drop_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}","meta":{},"name":"default__drop_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/drop.sql","package_name":"dbt","path":"macros/relations/view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_view"},"macro.dbt.default__equals":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}","meta":{},"name":"default__equals","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/equals.sql","package_name":"dbt","path":"macros/utils/equals.sql","resource_type":"macro","unique_id":"macro.dbt.default__equals"},"macro.dbt.default__escape_single_quotes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}","meta":{},"name":"default__escape_single_quotes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/escape_single_quotes.sql","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","resource_type":"macro","unique_id":"macro.dbt.default__escape_single_quotes"},"macro.dbt.default__except":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__except() %}\n\n    except\n\n{% endmacro %}","meta":{},"name":"default__except","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/except.sql","package_name":"dbt","path":"macros/utils/except.sql","resource_type":"macro","unique_id":"macro.dbt.default__except"},"macro.dbt.default__format_column":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}","meta":{},"name":"default__format_column","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.default__format_column"},"macro.dbt.default__generate_alias_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__generate_alias_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_alias.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_alias_name"},"macro.dbt.default__generate_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__generate_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_database.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_database_name"},"macro.dbt.default__generate_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__generate_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_schema.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_schema_name"},"macro.dbt.default__generate_series":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","meta":{},"name":"default__generate_series","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_series"},"macro.dbt.default__get_alter_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","meta":{},"name":"default__get_alter_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_alter_materialized_view_as_sql"},"macro.dbt.default__get_assert_columns_equivalent":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}","meta":{},"name":"default__get_assert_columns_equivalent","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_assert_columns_equivalent"},"macro.dbt.default__get_batch_size":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","meta":{},"name":"default__get_batch_size","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_batch_size"},"macro.dbt.default__get_binding_char":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}","meta":{},"name":"default__get_binding_char","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_binding_char"},"macro.dbt.default__get_catalog":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}","meta":{},"name":"default__get_catalog","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_catalog"},"macro.dbt.default__get_catalog_for_single_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_catalog_for_single_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_catalog_for_single_relation"},"macro.dbt.default__get_catalog_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}","meta":{},"name":"default__get_catalog_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_catalog_relations"},"macro.dbt.default__get_column_names":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","meta":{},"name":"default__get_column_names","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_column_names"},"macro.dbt.default__get_columns_in_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}","meta":{},"name":"default__get_columns_in_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_columns_in_query"},"macro.dbt.default__get_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_columns_in_relation"},"macro.dbt.default__get_create_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_create_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_backup.sql","package_name":"dbt","path":"macros/relations/create_backup.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_backup_sql"},"macro.dbt.default__get_create_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}","meta":{},"name":"default__get_create_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_index_sql"},"macro.dbt.default__get_create_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_create_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_intermediate.sql","package_name":"dbt","path":"macros/relations/create_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_intermediate_sql"},"macro.dbt.default__get_create_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_create_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/create.sql","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_materialized_view_as_sql"},"macro.dbt.default__get_create_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}","meta":{},"name":"default__get_create_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create.sql","package_name":"dbt","path":"macros/relations/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_sql"},"macro.dbt.default__get_create_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}","meta":{},"name":"default__get_create_table_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_table_as_sql"},"macro.dbt.default__get_create_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}","meta":{},"name":"default__get_create_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_view_as_sql"},"macro.dbt.default__get_csv_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}","meta":{},"name":"default__get_csv_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_csv_sql"},"macro.dbt.default__get_dcl_statement_list":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}","meta":{},"name":"default__get_dcl_statement_list","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_dcl_statement_list"},"macro.dbt.default__get_delete_insert_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","meta":{},"name":"default__get_delete_insert_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_delete_insert_merge_sql"},"macro.dbt.default__get_drop_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_drop_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop_backup.sql","package_name":"dbt","path":"macros/relations/drop_backup.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_drop_backup_sql"},"macro.dbt.default__get_drop_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","meta":{},"name":"default__get_drop_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_drop_index_sql"},"macro.dbt.default__get_drop_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__get_drop_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_drop_sql"},"macro.dbt.default__get_empty_schema_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}","meta":{},"name":"default__get_empty_schema_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_empty_schema_sql"},"macro.dbt.default__get_empty_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}","meta":{},"name":"default__get_empty_subquery_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_empty_subquery_sql"},"macro.dbt.default__get_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__get_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_grant_sql"},"macro.dbt.default__get_incremental_append_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_append_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_append_sql"},"macro.dbt.default__get_incremental_default_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_default_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_default_sql"},"macro.dbt.default__get_incremental_delete_insert_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_delete_insert_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_delete_insert_sql"},"macro.dbt.default__get_incremental_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_insert_overwrite_sql"},"macro.dbt.default__get_incremental_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_merge_sql"},"macro.dbt.default__get_incremental_microbatch_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_microbatch_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_microbatch_sql"},"macro.dbt.default__get_insert_overwrite_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","meta":{},"name":"default__get_insert_overwrite_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_insert_overwrite_merge_sql"},"macro.dbt.default__get_intervals_between":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__get_intervals_between","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_intervals_between"},"macro.dbt.default__get_limit_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}","meta":{},"name":"default__get_limit_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/show.sql","package_name":"dbt","path":"macros/adapters/show.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_limit_sql"},"macro.dbt.default__get_materialized_view_configuration_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","meta":{},"name":"default__get_materialized_view_configuration_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_materialized_view_configuration_changes"},"macro.dbt.default__get_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","meta":{},"name":"default__get_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_merge_sql"},"macro.dbt.default__get_merge_update_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}","meta":{},"name":"default__get_merge_update_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_merge_update_columns"},"macro.dbt.default__get_or_create_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}","meta":{},"name":"default__get_or_create_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_or_create_relation"},"macro.dbt.default__get_powers_of_two":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","meta":{},"name":"default__get_powers_of_two","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_powers_of_two"},"macro.dbt.default__get_relation_last_modified":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_relation_last_modified","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_relation_last_modified"},"macro.dbt.default__get_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_relations"},"macro.dbt.default__get_relations_by_pattern_internal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_relations_by_pattern_internal(schema_pattern, table_pattern, exclude='', database=target.database, quote_table=False, excluded_schemas=[]) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        {{ adapter.dispatch('get_tables_by_pattern_sql')(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {% if row.table_schema not in excluded_schemas %}\n                {% if quote_table %}\n                {% set table_name = '\"' ~ row.table_name ~ '\"' %}\n                {% else %}\n                {% set table_name = row.table_name %}\n                {% endif %}\n                {%- set tbl_relation = api.Relation.create(\n                    database=database,\n                    schema=row.table_schema,\n                    identifier=table_name,\n                    type=row.table_type\n                ) -%}\n                {%- do tbl_relations.append(tbl_relation) -%}\n            {% endif %}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"default__get_relations_by_pattern_internal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_relations_by_pattern_internal"},"macro.dbt.default__get_rename_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_rename_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename_intermediate.sql","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_intermediate_sql"},"macro.dbt.default__get_rename_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_rename_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/rename.sql","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_materialized_view_sql"},"macro.dbt.default__get_rename_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__get_rename_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_sql"},"macro.dbt.default__get_rename_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_rename_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/rename.sql","package_name":"dbt","path":"macros/relations/table/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_table_sql"},"macro.dbt.default__get_rename_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_rename_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/rename.sql","package_name":"dbt","path":"macros/relations/view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_view_sql"},"macro.dbt.default__get_replace_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_replace_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/replace.sql","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_materialized_view_sql"},"macro.dbt.default__get_replace_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"default__get_replace_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/replace.sql","package_name":"dbt","path":"macros/relations/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_sql"},"macro.dbt.default__get_replace_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_replace_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/replace.sql","package_name":"dbt","path":"macros/relations/table/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_table_sql"},"macro.dbt.default__get_replace_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_replace_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_view_sql"},"macro.dbt.default__get_revoke_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__get_revoke_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_revoke_sql"},"macro.dbt.default__get_select_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","meta":{},"name":"default__get_select_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_select_subquery"},"macro.dbt.default__get_show_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}","meta":{},"name":"default__get_show_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_show_grant_sql"},"macro.dbt.default__get_show_indexes_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","meta":{},"name":"default__get_show_indexes_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_show_indexes_sql"},"macro.dbt.default__get_table_columns_and_constraints":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}","meta":{},"name":"default__get_table_columns_and_constraints","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_table_columns_and_constraints"},"macro.dbt.default__get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","meta":{},"name":"default__get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_table_types_sql"},"macro.dbt.default__get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ adapter.dispatch('get_table_types_sql')() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","meta":{},"name":"default__get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_tables_by_pattern_sql"},"macro.dbt.default__get_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}","meta":{},"name":"default__get_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_test_sql"},"macro.dbt.default__get_true_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}","meta":{},"name":"default__get_true_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_true_sql"},"macro.dbt.default__get_unit_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}","meta":{},"name":"default__get_unit_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_unit_test_sql"},"macro.dbt.default__get_where_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}","meta":{},"name":"default__get_where_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/where_subquery.sql","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_where_subquery"},"macro.dbt.default__handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","meta":{},"name":"default__handle_existing_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__handle_existing_table"},"macro.dbt.default__hash":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}","meta":{},"name":"default__hash","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/hash.sql","package_name":"dbt","path":"macros/utils/hash.sql","resource_type":"macro","unique_id":"macro.dbt.default__hash"},"macro.dbt.default__information_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}","meta":{},"name":"default__information_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__information_schema_name"},"macro.dbt.default__intersect":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}","meta":{},"name":"default__intersect","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/intersect.sql","package_name":"dbt","path":"macros/utils/intersect.sql","resource_type":"macro","unique_id":"macro.dbt.default__intersect"},"macro.dbt.default__last_day":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}","meta":{},"name":"default__last_day","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/last_day.sql","package_name":"dbt","path":"macros/utils/last_day.sql","resource_type":"macro","unique_id":"macro.dbt.default__last_day"},"macro.dbt.default__length":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}","meta":{},"name":"default__length","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/length.sql","package_name":"dbt","path":"macros/utils/length.sql","resource_type":"macro","unique_id":"macro.dbt.default__length"},"macro.dbt.default__list_relations_without_caching":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__list_relations_without_caching","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__list_relations_without_caching"},"macro.dbt.default__list_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","meta":{},"name":"default__list_schemas","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__list_schemas"},"macro.dbt.default__listagg":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}","meta":{},"name":"default__listagg","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/listagg.sql","package_name":"dbt","path":"macros/utils/listagg.sql","resource_type":"macro","unique_id":"macro.dbt.default__listagg"},"macro.dbt.default__load_csv_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}","meta":{},"name":"default__load_csv_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__load_csv_rows"},"macro.dbt.default__make_backup_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}","meta":{},"name":"default__make_backup_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__make_backup_relation"},"macro.dbt.default__make_intermediate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}","meta":{},"name":"default__make_intermediate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__make_intermediate_relation"},"macro.dbt.default__make_temp_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}","meta":{},"name":"default__make_temp_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__make_temp_relation"},"macro.dbt.default__persist_docs":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"default__persist_docs","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.default__persist_docs"},"macro.dbt.default__position":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}","meta":{},"name":"default__position","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/position.sql","package_name":"dbt","path":"macros/utils/position.sql","resource_type":"macro","unique_id":"macro.dbt.default__position"},"macro.dbt.default__post_snapshot":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}","meta":{},"name":"default__post_snapshot","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__post_snapshot"},"macro.dbt.default__refresh_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}","meta":{},"name":"default__refresh_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/refresh.sql","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","resource_type":"macro","unique_id":"macro.dbt.default__refresh_materialized_view"},"macro.dbt.default__rename_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","meta":{},"name":"default__rename_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__rename_relation"},"macro.dbt.default__replace":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}","meta":{},"name":"default__replace","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/replace.sql","package_name":"dbt","path":"macros/utils/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__replace"},"macro.dbt.default__reset_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}","meta":{},"name":"default__reset_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__reset_csv_table"},"macro.dbt.default__resolve_model_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__resolve_model_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.default__resolve_model_name"},"macro.dbt.default__right":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}","meta":{},"name":"default__right","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/right.sql","package_name":"dbt","path":"macros/utils/right.sql","resource_type":"macro","unique_id":"macro.dbt.default__right"},"macro.dbt.default__safe_cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}","meta":{},"name":"default__safe_cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/safe_cast.sql","package_name":"dbt","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt.default__safe_cast"},"macro.dbt.default__snapshot_get_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}","meta":{},"name":"default__snapshot_get_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_get_time"},"macro.dbt.default__snapshot_hash_arguments":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}","meta":{},"name":"default__snapshot_hash_arguments","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_hash_arguments"},"macro.dbt.default__snapshot_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}","meta":{},"name":"default__snapshot_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/snapshot_merge.sql","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_merge_sql"},"macro.dbt.default__snapshot_staging_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}","meta":{},"name":"default__snapshot_staging_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_staging_table"},"macro.dbt.default__snapshot_string_as_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}","meta":{},"name":"default__snapshot_string_as_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_string_as_time"},"macro.dbt.default__split_part":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}","meta":{},"name":"default__split_part","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/split_part.sql","package_name":"dbt","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt.default__split_part"},"macro.dbt.default__string_literal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}","meta":{},"name":"default__string_literal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/literal.sql","package_name":"dbt","path":"macros/utils/literal.sql","resource_type":"macro","unique_id":"macro.dbt.default__string_literal"},"macro.dbt.default__support_multiple_grantees_per_dcl_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__support_multiple_grantees_per_dcl_statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__support_multiple_grantees_per_dcl_statement"},"macro.dbt.default__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__t_database_name() %}\n  {{ return(env_var('DBT_DB_NAME')) }}\n{% endmacro %}","meta":{},"name":"default__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.default__t_database_name"},"macro.dbt.default__test_accepted_values":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}","meta":{},"name":"default__test_accepted_values","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/accepted_values.sql","package_name":"dbt","path":"macros/generic_test_sql/accepted_values.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_accepted_values"},"macro.dbt.default__test_not_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}","meta":{},"name":"default__test_not_null","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/not_null.sql","package_name":"dbt","path":"macros/generic_test_sql/not_null.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_not_null"},"macro.dbt.default__test_relationships":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}","meta":{},"name":"default__test_relationships","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/relationships.sql","package_name":"dbt","path":"macros/generic_test_sql/relationships.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_relationships"},"macro.dbt.default__test_unique":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}","meta":{},"name":"default__test_unique","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/unique.sql","package_name":"dbt","path":"macros/generic_test_sql/unique.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_unique"},"macro.dbt.default__truncate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}","meta":{},"name":"default__truncate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__truncate_relation"},"macro.dbt.default__type_bigint":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}","meta":{},"name":"default__type_bigint","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_bigint"},"macro.dbt.default__type_boolean":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__type_boolean","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_boolean"},"macro.dbt.default__type_float":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}","meta":{},"name":"default__type_float","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_float"},"macro.dbt.default__type_int":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__type_int","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_int"},"macro.dbt.default__type_numeric":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}","meta":{},"name":"default__type_numeric","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_numeric"},"macro.dbt.default__type_string":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}","meta":{},"name":"default__type_string","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_string"},"macro.dbt.default__type_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}","meta":{},"name":"default__type_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_timestamp"},"macro.dbt.default__validate_fixture_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}","meta":{},"name":"default__validate_fixture_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__validate_fixture_rows"},"macro.dbt.default__validate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}","meta":{},"name":"default__validate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/validate_sql.sql","package_name":"dbt","path":"macros/adapters/validate_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__validate_sql"},"macro.dbt.default_last_day":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n","meta":{},"name":"default_last_day","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/last_day.sql","package_name":"dbt","path":"macros/utils/last_day.sql","resource_type":"macro","unique_id":"macro.dbt.default_last_day"},"macro.dbt.diff_column_data_types":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","meta":{},"name":"diff_column_data_types","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.diff_column_data_types"},"macro.dbt.diff_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","meta":{},"name":"diff_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.diff_columns"},"macro.dbt.drop_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}","meta":{},"name":"drop_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/drop.sql","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_materialized_view"},"macro.dbt.drop_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"drop_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_relation"},"macro.dbt.drop_relation_if_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"drop_relation_if_exists","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_relation_if_exists"},"macro.dbt.drop_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}","meta":{},"name":"drop_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.drop_schema"},"macro.dbt.drop_schema_named":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}","meta":{},"name":"drop_schema_named","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/schema.sql","package_name":"dbt","path":"macros/relations/schema.sql","resource_type":"macro","unique_id":"macro.dbt.drop_schema_named"},"macro.dbt.drop_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}","meta":{},"name":"drop_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/drop.sql","package_name":"dbt","path":"macros/relations/table/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_table"},"macro.dbt.drop_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}","meta":{},"name":"drop_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/drop.sql","package_name":"dbt","path":"macros/relations/view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_view"},"macro.dbt.equals":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}","meta":{},"name":"equals","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/equals.sql","package_name":"dbt","path":"macros/utils/equals.sql","resource_type":"macro","unique_id":"macro.dbt.equals"},"macro.dbt.escape_single_quotes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"escape_single_quotes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/escape_single_quotes.sql","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","resource_type":"macro","unique_id":"macro.dbt.escape_single_quotes"},"macro.dbt.except":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"except","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/except.sql","package_name":"dbt","path":"macros/utils/except.sql","resource_type":"macro","unique_id":"macro.dbt.except"},"macro.dbt.format_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}","meta":{},"name":"format_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.format_columns"},"macro.dbt.format_row":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n","meta":{},"name":"format_row","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.format_row"},"macro.dbt.generate_alias_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}","meta":{},"name":"generate_alias_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_alias.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","resource_type":"macro","unique_id":"macro.dbt.generate_alias_name"},"macro.dbt.generate_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}","meta":{},"name":"generate_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_database.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","resource_type":"macro","unique_id":"macro.dbt.generate_database_name"},"macro.dbt.generate_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}","meta":{},"name":"generate_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_schema.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","resource_type":"macro","unique_id":"macro.dbt.generate_schema_name"},"macro.dbt.generate_schema_name_for_env":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"generate_schema_name_for_env","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_schema.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","resource_type":"macro","unique_id":"macro.dbt.generate_schema_name_for_env"},"macro.dbt.generate_series":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}","meta":{},"name":"generate_series","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.generate_series"},"macro.dbt.get_alter_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}","meta":{},"name":"get_alter_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.get_alter_materialized_view_as_sql"},"macro.dbt.get_assert_columns_equivalent":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_assert_columns_equivalent","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.get_assert_columns_equivalent"},"macro.dbt.get_batch_size":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}","meta":{},"name":"get_batch_size","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_batch_size"},"macro.dbt.get_binding_char":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}","meta":{},"name":"get_binding_char","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_binding_char"},"macro.dbt.get_catalog":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}","meta":{},"name":"get_catalog","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_catalog"},"macro.dbt.get_catalog_for_single_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"get_catalog_for_single_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_catalog_for_single_relation"},"macro.dbt.get_catalog_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}","meta":{},"name":"get_catalog_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_catalog_relations"},"macro.dbt.get_column_schema_from_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}","meta":{},"name":"get_column_schema_from_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_column_schema_from_query"},"macro.dbt.get_columns_in_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}","meta":{},"name":"get_columns_in_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_columns_in_query"},"macro.dbt.get_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"get_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_columns_in_relation"},"macro.dbt.get_create_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_create_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_backup.sql","package_name":"dbt","path":"macros/relations/create_backup.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_backup_sql"},"macro.dbt.get_create_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}","meta":{},"name":"get_create_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_index_sql"},"macro.dbt.get_create_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_create_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_intermediate.sql","package_name":"dbt","path":"macros/relations/create_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_intermediate_sql"},"macro.dbt.get_create_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}","meta":{},"name":"get_create_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/create.sql","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_materialized_view_as_sql"},"macro.dbt.get_create_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_create_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create.sql","package_name":"dbt","path":"macros/relations/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_sql"},"macro.dbt.get_create_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}","meta":{},"name":"get_create_table_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_table_as_sql"},"macro.dbt.get_create_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}","meta":{},"name":"get_create_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_view_as_sql"},"macro.dbt.get_csv_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}","meta":{},"name":"get_csv_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_csv_sql"},"macro.dbt.get_dbt_valid_to_current":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}","meta":{},"name":"get_dbt_valid_to_current","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_dbt_valid_to_current"},"macro.dbt.get_dcl_statement_list":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}","meta":{},"name":"get_dcl_statement_list","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_dcl_statement_list"},"macro.dbt.get_delete_insert_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","meta":{},"name":"get_delete_insert_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.get_delete_insert_merge_sql"},"macro.dbt.get_drop_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_drop_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop_backup.sql","package_name":"dbt","path":"macros/relations/drop_backup.sql","resource_type":"macro","unique_id":"macro.dbt.get_drop_backup_sql"},"macro.dbt.get_drop_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}","meta":{},"name":"get_drop_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.get_drop_index_sql"},"macro.dbt.get_drop_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_drop_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.get_drop_sql"},"macro.dbt.get_empty_schema_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}","meta":{},"name":"get_empty_schema_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_empty_schema_sql"},"macro.dbt.get_empty_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}","meta":{},"name":"get_empty_subquery_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_empty_subquery_sql"},"macro.dbt.get_expected_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}","meta":{},"name":"get_expected_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_expected_sql"},"macro.dbt.get_fixture_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}","meta":{},"name":"get_fixture_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_fixture_sql"},"macro.dbt.get_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","meta":{},"name":"get_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_grant_sql"},"macro.dbt.get_incremental_append_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_append_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_append_sql"},"macro.dbt.get_incremental_default_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_default_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_default_sql"},"macro.dbt.get_incremental_delete_insert_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_delete_insert_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_delete_insert_sql"},"macro.dbt.get_incremental_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_insert_overwrite_sql"},"macro.dbt.get_incremental_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_merge_sql"},"macro.dbt.get_incremental_microbatch_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_microbatch_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_microbatch_sql"},"macro.dbt.get_insert_into_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}","meta":{},"name":"get_insert_into_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_insert_into_sql"},"macro.dbt.get_insert_overwrite_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}","meta":{},"name":"get_insert_overwrite_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.get_insert_overwrite_merge_sql"},"macro.dbt.get_intervals_between":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}","meta":{},"name":"get_intervals_between","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.get_intervals_between"},"macro.dbt.get_limit_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_limit_subquery_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/show.sql","package_name":"dbt","path":"macros/adapters/show.sql","resource_type":"macro","unique_id":"macro.dbt.get_limit_subquery_sql"},"macro.dbt.get_materialized_view_configuration_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}","meta":{},"name":"get_materialized_view_configuration_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.get_materialized_view_configuration_changes"},"macro.dbt.get_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","meta":{},"name":"get_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.get_merge_sql"},"macro.dbt.get_merge_update_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}","meta":{},"name":"get_merge_update_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_merge_update_columns"},"macro.dbt.get_or_create_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}","meta":{},"name":"get_or_create_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.get_or_create_relation"},"macro.dbt.get_powers_of_two":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}","meta":{},"name":"get_powers_of_two","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.get_powers_of_two"},"macro.dbt.get_quoted_csv":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","meta":{},"name":"get_quoted_csv","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_quoted_csv"},"macro.dbt.get_relation_last_modified":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}","meta":{},"name":"get_relation_last_modified","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_relation_last_modified"},"macro.dbt.get_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"get_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_relations"},"macro.dbt.get_relations_by_pattern_internal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_relations_by_pattern_internal(schema_pattern, table_pattern, exclude='', database=target.database, quote_table=False, excluded_schemas=[]) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern_internal')(schema_pattern, table_pattern, exclude, database, quote_table, excluded_schemas)) }}\n{% endmacro %}","meta":{},"name":"get_relations_by_pattern_internal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern.sql","resource_type":"macro","unique_id":"macro.dbt.get_relations_by_pattern_internal"},"macro.dbt.get_rename_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_rename_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename_intermediate.sql","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_intermediate_sql"},"macro.dbt.get_rename_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","meta":{},"name":"get_rename_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/rename.sql","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_materialized_view_sql"},"macro.dbt.get_rename_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n","meta":{},"name":"get_rename_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_sql"},"macro.dbt.get_rename_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","meta":{},"name":"get_rename_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/rename.sql","package_name":"dbt","path":"macros/relations/table/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_table_sql"},"macro.dbt.get_rename_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","meta":{},"name":"get_rename_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/rename.sql","package_name":"dbt","path":"macros/relations/view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_view_sql"},"macro.dbt.get_replace_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/replace.sql","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_materialized_view_sql"},"macro.dbt.get_replace_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/replace.sql","package_name":"dbt","path":"macros/relations/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_sql"},"macro.dbt.get_replace_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/replace.sql","package_name":"dbt","path":"macros/relations/table/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_table_sql"},"macro.dbt.get_replace_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_view_sql"},"macro.dbt.get_revoke_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","meta":{},"name":"get_revoke_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_revoke_sql"},"macro.dbt.get_seed_column_quoted_csv":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}","meta":{},"name":"get_seed_column_quoted_csv","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_seed_column_quoted_csv"},"macro.dbt.get_select_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}","meta":{},"name":"get_select_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_select_subquery"},"macro.dbt.get_show_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}","meta":{},"name":"get_show_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_show_grant_sql"},"macro.dbt.get_show_indexes_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}","meta":{},"name":"get_show_indexes_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.get_show_indexes_sql"},"macro.dbt.get_show_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}","meta":{},"name":"get_show_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/show.sql","package_name":"dbt","path":"macros/adapters/show.sql","resource_type":"macro","unique_id":"macro.dbt.get_show_sql"},"macro.dbt.get_snapshot_get_time_data_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}","meta":{},"name":"get_snapshot_get_time_data_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.get_snapshot_get_time_data_type"},"macro.dbt.get_snapshot_table_column_names":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}","meta":{},"name":"get_snapshot_table_column_names","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_snapshot_table_column_names"},"macro.dbt.get_table_columns_and_constraints":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_table_columns_and_constraints","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.get_table_columns_and_constraints"},"macro.dbt.get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_table_types_sql"},"macro.dbt.get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","meta":{},"name":"get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_tables_by_pattern_sql"},"macro.dbt.get_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}","meta":{},"name":"get_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_test_sql"},"macro.dbt.get_true_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}","meta":{},"name":"get_true_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_true_sql"},"macro.dbt.get_unit_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}","meta":{},"name":"get_unit_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_unit_test_sql"},"macro.dbt.get_updated_at_column_data_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}","meta":{},"name":"get_updated_at_column_data_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_updated_at_column_data_type"},"macro.dbt.get_where_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}","meta":{},"name":"get_where_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/where_subquery.sql","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","resource_type":"macro","unique_id":"macro.dbt.get_where_subquery"},"macro.dbt.handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","meta":{},"name":"handle_existing_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.handle_existing_table"},"macro.dbt.hash":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}","meta":{},"name":"hash","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/hash.sql","package_name":"dbt","path":"macros/utils/hash.sql","resource_type":"macro","unique_id":"macro.dbt.hash"},"macro.dbt.in_transaction":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}","meta":{},"name":"in_transaction","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.in_transaction"},"macro.dbt.incremental_validate_on_schema_change":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}","meta":{},"name":"incremental_validate_on_schema_change","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.incremental_validate_on_schema_change"},"macro.dbt.information_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}","meta":{},"name":"information_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.information_schema_name"},"macro.dbt.intersect":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"intersect","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/intersect.sql","package_name":"dbt","path":"macros/utils/intersect.sql","resource_type":"macro","unique_id":"macro.dbt.intersect"},"macro.dbt.is_incremental":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}","meta":{},"name":"is_incremental","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/is_incremental.sql","package_name":"dbt","path":"macros/materializations/models/incremental/is_incremental.sql","resource_type":"macro","unique_id":"macro.dbt.is_incremental"},"macro.dbt.last_day":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}","meta":{},"name":"last_day","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/last_day.sql","package_name":"dbt","path":"macros/utils/last_day.sql","resource_type":"macro","unique_id":"macro.dbt.last_day"},"macro.dbt.length":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"length","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/length.sql","package_name":"dbt","path":"macros/utils/length.sql","resource_type":"macro","unique_id":"macro.dbt.length"},"macro.dbt.list_relations_without_caching":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}","meta":{},"name":"list_relations_without_caching","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.list_relations_without_caching"},"macro.dbt.list_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}","meta":{},"name":"list_schemas","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.list_schemas"},"macro.dbt.listagg":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}","meta":{},"name":"listagg","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/listagg.sql","package_name":"dbt","path":"macros/utils/listagg.sql","resource_type":"macro","unique_id":"macro.dbt.listagg"},"macro.dbt.load_cached_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}","meta":{},"name":"load_cached_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.load_cached_relation"},"macro.dbt.load_csv_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}","meta":{},"name":"load_csv_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.load_csv_rows"},"macro.dbt.load_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}","meta":{},"name":"load_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.load_relation"},"macro.dbt.make_backup_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}","meta":{},"name":"make_backup_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.make_backup_relation"},"macro.dbt.make_hook_config":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}","meta":{},"name":"make_hook_config","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.make_hook_config"},"macro.dbt.make_intermediate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","meta":{},"name":"make_intermediate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.make_intermediate_relation"},"macro.dbt.make_temp_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","meta":{},"name":"make_temp_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.make_temp_relation"},"macro.dbt.materialization_clone_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_clone_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/clone.sql","package_name":"dbt","path":"macros/materializations/models/clone/clone.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_clone_default"},"macro.dbt.materialization_incremental_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","meta":{},"name":"materialization_incremental_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/incremental.sql","package_name":"dbt","path":"macros/materializations/models/incremental/incremental.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_incremental_default"},"macro.dbt.materialization_materialized_view_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_materialized_view_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_materialized_view_default"},"macro.dbt.materialization_seed_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_seed_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/seed.sql","package_name":"dbt","path":"macros/materializations/seeds/seed.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_seed_default"},"macro.dbt.materialization_snapshot_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {# original code was set strategy_macro = strategy_dispatch(strategy_name) #}\n  {# there is a context in strategy and context is not going to be implemented #}\n  {# so we simplify the algorithm and use a if..else.. #}\n  {% if strategy_name == 'check' %}\n      {% set strategy_macro = dbt.snapshot_check_strategy %}\n  {% elif strategy_name == 'timestamp' %}\n      {% set strategy_macro = dbt.snapshot_timestamp_strategy %}\n  {% endif %}\n  \n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_snapshot_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/snapshot.sql","package_name":"dbt","path":"macros/materializations/snapshots/snapshot.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_snapshot_default"},"macro.dbt.materialization_table_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","meta":{},"name":"materialization_table_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/table.sql","package_name":"dbt","path":"macros/materializations/models/table.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_table_default"},"macro.dbt.materialization_test_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_test_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/test.sql","package_name":"dbt","path":"macros/materializations/tests/test.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_test_default"},"macro.dbt.materialization_unit_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_unit_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/unit.sql","package_name":"dbt","path":"macros/materializations/tests/unit.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_unit_default"},"macro.dbt.materialization_view_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_view_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/view.sql","package_name":"dbt","path":"macros/materializations/models/view.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_view_default"},"macro.dbt.materialized_view_execute_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}","meta":{},"name":"materialized_view_execute_build_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_execute_build_sql"},"macro.dbt.materialized_view_execute_no_op":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","meta":{},"name":"materialized_view_execute_no_op","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_execute_no_op"},"macro.dbt.materialized_view_get_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","meta":{},"name":"materialized_view_get_build_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_get_build_sql"},"macro.dbt.materialized_view_setup":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}","meta":{},"name":"materialized_view_setup","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_setup"},"macro.dbt.materialized_view_teardown":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}","meta":{},"name":"materialized_view_teardown","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_teardown"},"macro.dbt.noop_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"noop_statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/statement.sql","package_name":"dbt","path":"macros/etc/statement.sql","resource_type":"macro","unique_id":"macro.dbt.noop_statement"},"macro.dbt.partition_range":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}","meta":{},"name":"partition_range","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.partition_range"},"macro.dbt.persist_docs":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}","meta":{},"name":"persist_docs","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.persist_docs"},"macro.dbt.position":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}","meta":{},"name":"position","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/position.sql","package_name":"dbt","path":"macros/utils/position.sql","resource_type":"macro","unique_id":"macro.dbt.position"},"macro.dbt.post_snapshot":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}","meta":{},"name":"post_snapshot","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.post_snapshot"},"macro.dbt.postgres__get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","meta":{},"name":"postgres__get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.postgres__get_table_types_sql"},"macro.dbt.process_schema_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"process_schema_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.process_schema_changes"},"macro.dbt.py_current_timestring":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}","meta":{},"name":"py_current_timestring","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.py_current_timestring"},"macro.dbt.py_script_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%macro py_script_comment()%}\n{%endmacro%}","meta":{},"name":"py_script_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.py_script_comment"},"macro.dbt.py_script_postfix":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}","meta":{},"name":"py_script_postfix","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.py_script_postfix"},"macro.dbt.redshift__get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ adapter.dispatch('get_table_types_sql')() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}","meta":{},"name":"redshift__get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.redshift__get_tables_by_pattern_sql"},"macro.dbt.redshift__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro redshift__t_database_name() %}\n  {{ return(env_var('REDSHIFT_DATABASE')) }}\n{% endmacro %}","meta":{},"name":"redshift__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.redshift__t_database_name"},"macro.dbt.refresh_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}","meta":{},"name":"refresh_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/refresh.sql","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","resource_type":"macro","unique_id":"macro.dbt.refresh_materialized_view"},"macro.dbt.rename_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}","meta":{},"name":"rename_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.rename_relation"},"macro.dbt.replace":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}","meta":{},"name":"replace","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/replace.sql","package_name":"dbt","path":"macros/utils/replace.sql","resource_type":"macro","unique_id":"macro.dbt.replace"},"macro.dbt.reset_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}","meta":{},"name":"reset_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.reset_csv_table"},"macro.dbt.resolve_model_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}","meta":{},"name":"resolve_model_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.resolve_model_name"},"macro.dbt.right":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}","meta":{},"name":"right","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/right.sql","package_name":"dbt","path":"macros/utils/right.sql","resource_type":"macro","unique_id":"macro.dbt.right"},"macro.dbt.run_hooks":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","meta":{},"name":"run_hooks","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.run_hooks"},"macro.dbt.run_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}","meta":{},"name":"run_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/statement.sql","package_name":"dbt","path":"macros/etc/statement.sql","resource_type":"macro","unique_id":"macro.dbt.run_query"},"macro.dbt.safe_cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}","meta":{},"name":"safe_cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/safe_cast.sql","package_name":"dbt","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt.safe_cast"},"macro.dbt.set_sql_header":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}","meta":{},"name":"set_sql_header","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/configs.sql","package_name":"dbt","path":"macros/materializations/configs.sql","resource_type":"macro","unique_id":"macro.dbt.set_sql_header"},"macro.dbt.should_full_refresh":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}","meta":{},"name":"should_full_refresh","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/configs.sql","package_name":"dbt","path":"macros/materializations/configs.sql","resource_type":"macro","unique_id":"macro.dbt.should_full_refresh"},"macro.dbt.should_revoke":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"should_revoke","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.should_revoke"},"macro.dbt.should_store_failures":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}","meta":{},"name":"should_store_failures","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/configs.sql","package_name":"dbt","path":"macros/materializations/configs.sql","resource_type":"macro","unique_id":"macro.dbt.should_store_failures"},"macro.dbt.snapshot_check_all_get_existing_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}","meta":{},"name":"snapshot_check_all_get_existing_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_check_all_get_existing_columns"},"macro.dbt.snapshot_check_strategy":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}","meta":{},"name":"snapshot_check_strategy","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_check_strategy"},"macro.dbt.snapshot_get_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n","meta":{},"name":"snapshot_get_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_get_time"},"macro.dbt.snapshot_hash_arguments":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}","meta":{},"name":"snapshot_hash_arguments","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_hash_arguments"},"macro.dbt.snapshot_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}","meta":{},"name":"snapshot_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/snapshot_merge.sql","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_merge_sql"},"macro.dbt.snapshot_staging_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}","meta":{},"name":"snapshot_staging_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_staging_table"},"macro.dbt.snapshot_string_as_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}","meta":{},"name":"snapshot_string_as_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_string_as_time"},"macro.dbt.snapshot_timestamp_strategy":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}","meta":{},"name":"snapshot_timestamp_strategy","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_timestamp_strategy"},"macro.dbt.split_part":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}","meta":{},"name":"split_part","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/split_part.sql","package_name":"dbt","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt.split_part"},"macro.dbt.sql_convert_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}","meta":{},"name":"sql_convert_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.sql_convert_columns_in_relation"},"macro.dbt.statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}","meta":{},"name":"statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/statement.sql","package_name":"dbt","path":"macros/etc/statement.sql","resource_type":"macro","unique_id":"macro.dbt.statement"},"macro.dbt.strategy_dispatch":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}","meta":{},"name":"strategy_dispatch","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.strategy_dispatch"},"macro.dbt.string_literal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n","meta":{},"name":"string_literal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/literal.sql","package_name":"dbt","path":"macros/utils/literal.sql","resource_type":"macro","unique_id":"macro.dbt.string_literal"},"macro.dbt.support_multiple_grantees_per_dcl_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"support_multiple_grantees_per_dcl_statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.support_multiple_grantees_per_dcl_statement"},"macro.dbt.sync_column_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}","meta":{},"name":"sync_column_schemas","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.sync_column_schemas"},"macro.dbt.t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro t_database_name() %}\n  {{ return (adapter.dispatch(\"t_database_name\")()) }}\n{% endmacro %}","meta":{},"name":"t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.t_database_name"},"macro.dbt.t_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro t_schema_name() %}\n  {{ return(target.schema) }}\n{% endmacro %}","meta":{},"name":"t_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.t_schema_name"},"macro.dbt.table_columns_and_constraints":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}","meta":{},"name":"table_columns_and_constraints","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.table_columns_and_constraints"},"macro.dbt.test_accepted_values":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}","meta":{},"name":"test_accepted_values","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_accepted_values"},"macro.dbt.test_not_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","meta":{},"name":"test_not_null","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_not_null"},"macro.dbt.test_relationships":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}","meta":{},"name":"test_relationships","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_relationships"},"macro.dbt.test_unique":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","meta":{},"name":"test_unique","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_unique"},"macro.dbt.truncate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"truncate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.truncate_relation"},"macro.dbt.type_bigint":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_bigint","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_bigint"},"macro.dbt.type_boolean":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_boolean","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_boolean"},"macro.dbt.type_float":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_float","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_float"},"macro.dbt.type_int":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_int","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_int"},"macro.dbt.type_numeric":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_numeric","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_numeric"},"macro.dbt.type_string":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_string","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_string"},"macro.dbt.type_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_timestamp"},"macro.dbt.unique_key_fields":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_fields","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_fields"},"macro.dbt.unique_key_is_not_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_is_not_null","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_is_not_null"},"macro.dbt.unique_key_is_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_is_null","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_is_null"},"macro.dbt.unique_key_join_on":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_join_on","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_join_on"},"macro.dbt.validate_fixture_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n","meta":{},"name":"validate_fixture_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.validate_fixture_rows"},"macro.dbt.validate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}","meta":{},"name":"validate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/validate_sql.sql","package_name":"dbt","path":"macros/adapters/validate_sql.sql","resource_type":"macro","unique_id":"macro.dbt.validate_sql"},"macro.dbt_bigquery._bigquery__get_column_stats_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}","meta":{},"name":"_bigquery__get_column_stats_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/catalog.sql","package_name":"dbt_bigquery","path":"macros/catalog/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery._bigquery__get_column_stats_sql"},"macro.dbt_bigquery._bigquery__get_columns_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}","meta":{},"name":"_bigquery__get_columns_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/catalog.sql","package_name":"dbt_bigquery","path":"macros/catalog/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery._bigquery__get_columns_sql"},"macro.dbt_bigquery._bigquery__get_extended_catalog_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}","meta":{},"name":"_bigquery__get_extended_catalog_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/catalog.sql","package_name":"dbt_bigquery","path":"macros/catalog/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery._bigquery__get_extended_catalog_sql"},"macro.dbt_bigquery._bigquery__get_table_shards_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}","meta":{},"name":"_bigquery__get_table_shards_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/catalog.sql","package_name":"dbt_bigquery","path":"macros/catalog/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery._bigquery__get_table_shards_sql"},"macro.dbt_bigquery._bigquery__get_table_stats_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}","meta":{},"name":"_bigquery__get_table_stats_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/catalog.sql","package_name":"dbt_bigquery","path":"macros/catalog/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery._bigquery__get_table_stats_sql"},"macro.dbt_bigquery._bigquery__get_tables_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}","meta":{},"name":"_bigquery__get_tables_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/catalog.sql","package_name":"dbt_bigquery","path":"macros/catalog/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery._bigquery__get_tables_sql"},"macro.dbt_bigquery.bigquery__alter_column_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}","meta":{},"name":"bigquery__alter_column_comment","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__alter_column_comment"},"macro.dbt_bigquery.bigquery__alter_column_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}","meta":{},"name":"bigquery__alter_column_type","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__alter_column_type"},"macro.dbt_bigquery.bigquery__alter_relation_add_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}","meta":{},"name":"bigquery__alter_relation_add_columns","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__alter_relation_add_columns"},"macro.dbt_bigquery.bigquery__alter_relation_drop_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}","meta":{},"name":"bigquery__alter_relation_drop_columns","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__alter_relation_drop_columns"},"macro.dbt_bigquery.bigquery__array_append":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}","meta":{},"name":"bigquery__array_append","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/array_append.sql","package_name":"dbt_bigquery","path":"macros/utils/array_append.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__array_append"},"macro.dbt_bigquery.bigquery__array_concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","meta":{},"name":"bigquery__array_concat","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/array_concat.sql","package_name":"dbt_bigquery","path":"macros/utils/array_concat.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__array_concat"},"macro.dbt_bigquery.bigquery__array_construct":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}","meta":{},"name":"bigquery__array_construct","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/array_construct.sql","package_name":"dbt_bigquery","path":"macros/utils/array_construct.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__array_construct"},"macro.dbt_bigquery.bigquery__bool_or":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}","meta":{},"name":"bigquery__bool_or","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/bool_or.sql","package_name":"dbt_bigquery","path":"macros/utils/bool_or.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__bool_or"},"macro.dbt_bigquery.bigquery__can_clone_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}","meta":{},"name":"bigquery__can_clone_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/clone.sql","package_name":"dbt_bigquery","path":"macros/materializations/clone.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__can_clone_table"},"macro.dbt_bigquery.bigquery__check_schema_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n\tfrom {{ information_schema }}.SCHEMATA\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}","meta":{},"name":"bigquery__check_schema_exists","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__check_schema_exists"},"macro.dbt_bigquery.bigquery__create_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}","meta":{},"name":"bigquery__create_columns","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/snapshot.sql","package_name":"dbt_bigquery","path":"macros/materializations/snapshot.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_columns"},"macro.dbt_bigquery.bigquery__create_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}","meta":{},"name":"bigquery__create_csv_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/seed.sql","package_name":"dbt_bigquery","path":"macros/materializations/seed.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_csv_table"},"macro.dbt_bigquery.bigquery__create_or_replace_clone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}","meta":{},"name":"bigquery__create_or_replace_clone","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/clone.sql","package_name":"dbt_bigquery","path":"macros/materializations/clone.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_or_replace_clone"},"macro.dbt_bigquery.bigquery__create_or_replace_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","meta":{},"name":"bigquery__create_or_replace_view","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/view/replace.sql","package_name":"dbt_bigquery","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_or_replace_view"},"macro.dbt_bigquery.bigquery__create_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}","meta":{},"name":"bigquery__create_schema","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_schema"},"macro.dbt_bigquery.bigquery__create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n","meta":{},"name":"bigquery__create_table_as","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_table_as"},"macro.dbt_bigquery.bigquery__create_view_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}","meta":{},"name":"bigquery__create_view_as","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__create_view_as"},"macro.dbt_bigquery.bigquery__current_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}","meta":{},"name":"bigquery__current_timestamp","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/timestamps.sql","package_name":"dbt_bigquery","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__current_timestamp"},"macro.dbt_bigquery.bigquery__current_timestamp_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}","meta":{},"name":"bigquery__current_timestamp_backcompat","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/timestamps.sql","package_name":"dbt_bigquery","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__current_timestamp_backcompat"},"macro.dbt_bigquery.bigquery__date":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}","meta":{},"name":"bigquery__date","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/date.sql","package_name":"dbt_bigquery","path":"macros/utils/date.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__date"},"macro.dbt_bigquery.bigquery__date_trunc":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}","meta":{},"name":"bigquery__date_trunc","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/date_trunc.sql","package_name":"dbt_bigquery","path":"macros/utils/date_trunc.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__date_trunc"},"macro.dbt_bigquery.bigquery__dateadd":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}","meta":{},"name":"bigquery__dateadd","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/dateadd.sql","package_name":"dbt_bigquery","path":"macros/utils/dateadd.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__dateadd"},"macro.dbt_bigquery.bigquery__datediff":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}","meta":{},"name":"bigquery__datediff","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/datediff.sql","package_name":"dbt_bigquery","path":"macros/utils/datediff.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__datediff"},"macro.dbt_bigquery.bigquery__drop_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}","meta":{},"name":"bigquery__drop_materialized_view","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/materialized_view/drop.sql","package_name":"dbt_bigquery","path":"macros/relations/materialized_view/drop.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__drop_materialized_view"},"macro.dbt_bigquery.bigquery__drop_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}","meta":{},"name":"bigquery__drop_schema","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__drop_schema"},"macro.dbt_bigquery.bigquery__drop_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}","meta":{},"name":"bigquery__drop_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/table/drop.sql","package_name":"dbt_bigquery","path":"macros/relations/table/drop.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__drop_table"},"macro.dbt_bigquery.bigquery__drop_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}","meta":{},"name":"bigquery__drop_view","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/view/drop.sql","package_name":"dbt_bigquery","path":"macros/relations/view/drop.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__drop_view"},"macro.dbt_bigquery.bigquery__escape_single_quotes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}","meta":{},"name":"bigquery__escape_single_quotes","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/escape_single_quotes.sql","package_name":"dbt_bigquery","path":"macros/utils/escape_single_quotes.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__escape_single_quotes"},"macro.dbt_bigquery.bigquery__except":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}","meta":{},"name":"bigquery__except","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/except.sql","package_name":"dbt_bigquery","path":"macros/utils/except.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__except"},"macro.dbt_bigquery.bigquery__format_column":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n","meta":{},"name":"bigquery__format_column","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/get_columns_spec_ddl.sql","package_name":"dbt_bigquery","path":"macros/utils/get_columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__format_column"},"macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}","meta":{},"name":"bigquery__get_alter_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/materialized_view/alter.sql","package_name":"dbt_bigquery","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"},"macro.dbt_bigquery.bigquery__get_catalog":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}","meta":{},"name":"bigquery__get_catalog","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/by_schema.sql","package_name":"dbt_bigquery","path":"macros/catalog/by_schema.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_catalog"},"macro.dbt_bigquery.bigquery__get_catalog_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}","meta":{},"name":"bigquery__get_catalog_relations","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/catalog/by_relation.sql","package_name":"dbt_bigquery","path":"macros/catalog/by_relation.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_catalog_relations"},"macro.dbt_bigquery.bigquery__get_column_names":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","meta":{},"name":"bigquery__get_column_names","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/get_columns_spec_ddl.sql","package_name":"dbt_bigquery","path":"macros/utils/get_columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_column_names"},"macro.dbt_bigquery.bigquery__get_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_columns_in_relation(relation) -%}\n  -- TODO: in this sql, look into if we get/derive \"mode\" field for BigqueryColumn\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n    SELECT\n                column_name,\n                data_type\n             FROM `{{ relation.database }}.{{ relation.schema }}.INFORMATION_SCHEMA.COLUMNS`\n             WHERE table_schema = '{{ relation.schema }}' and table_name = '{{ relation.identifier }}'\n             ORDER BY ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}","meta":{},"name":"bigquery__get_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters/columns.sql","package_name":"dbt_bigquery","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_columns_in_relation"},"macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}","meta":{},"name":"bigquery__get_create_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/materialized_view/create.sql","package_name":"dbt_bigquery","path":"macros/relations/materialized_view/create.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"},"macro.dbt_bigquery.bigquery__get_empty_schema_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}","meta":{},"name":"bigquery__get_empty_schema_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/get_columns_spec_ddl.sql","package_name":"dbt_bigquery","path":"macros/utils/get_columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_empty_schema_sql"},"macro.dbt_bigquery.bigquery__get_empty_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}","meta":{},"name":"bigquery__get_empty_subquery_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters/columns.sql","package_name":"dbt_bigquery","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_empty_subquery_sql"},"macro.dbt_bigquery.bigquery__get_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n","meta":{},"name":"bigquery__get_grant_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters/apply_grants.sql","package_name":"dbt_bigquery","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_grant_sql"},"macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}","meta":{},"name":"bigquery__get_materialized_view_configuration_changes","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/materialized_view/alter.sql","package_name":"dbt_bigquery","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"},"macro.dbt_bigquery.bigquery__get_rename_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}","meta":{},"name":"bigquery__get_rename_table_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/table/rename.sql","package_name":"dbt_bigquery","path":"macros/relations/table/rename.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_rename_table_sql"},"macro.dbt_bigquery.bigquery__get_rename_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}","meta":{},"name":"bigquery__get_rename_view_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/view/rename.sql","package_name":"dbt_bigquery","path":"macros/relations/view/rename.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_rename_view_sql"},"macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}","meta":{},"name":"bigquery__get_replace_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/materialized_view/replace.sql","package_name":"dbt_bigquery","path":"macros/relations/materialized_view/replace.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql"},"macro.dbt_bigquery.bigquery__get_revoke_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}","meta":{},"name":"bigquery__get_revoke_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters/apply_grants.sql","package_name":"dbt_bigquery","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_revoke_sql"},"macro.dbt_bigquery.bigquery__get_select_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","meta":{},"name":"bigquery__get_select_subquery","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/get_columns_spec_ddl.sql","package_name":"dbt_bigquery","path":"macros/utils/get_columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_select_subquery"},"macro.dbt_bigquery.bigquery__get_show_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}","meta":{},"name":"bigquery__get_show_grant_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters/apply_grants.sql","package_name":"dbt_bigquery","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__get_show_grant_sql"},"macro.dbt_bigquery.bigquery__handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}","meta":{},"name":"bigquery__handle_existing_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/view.sql","package_name":"dbt_bigquery","path":"macros/materializations/view.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__handle_existing_table"},"macro.dbt_bigquery.bigquery__hash":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}","meta":{},"name":"bigquery__hash","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/hash.sql","package_name":"dbt_bigquery","path":"macros/utils/hash.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__hash"},"macro.dbt_bigquery.bigquery__intersect":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}","meta":{},"name":"bigquery__intersect","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/intersect.sql","package_name":"dbt_bigquery","path":"macros/utils/intersect.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__intersect"},"macro.dbt_bigquery.bigquery__list_relations_without_caching":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}","meta":{},"name":"bigquery__list_relations_without_caching","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__list_relations_without_caching"},"macro.dbt_bigquery.bigquery__list_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name from {{ database }}.INFORMATION_SCHEMA.SCHEMATA;\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}","meta":{},"name":"bigquery__list_schemas","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__list_schemas"},"macro.dbt_bigquery.bigquery__listagg":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}","meta":{},"name":"bigquery__listagg","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/listagg.sql","package_name":"dbt_bigquery","path":"macros/utils/listagg.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__listagg"},"macro.dbt_bigquery.bigquery__load_csv_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {# -- already layered into the schema of the agate table upstream #}\n  {%- set table_after_schema_override = agate_table -%}\n\n  {%- set delimiter = model['config'].get('delimiter', ',') -%}\n  {{ adapter.load_dataframe(\n      model['database'],\n      model['schema'],\n      model['alias'],\n      model['project_root'] | string ~ model['original_file_path'] | string,\n      agate_table,\n      delimiter,\n  ) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"bigquery__load_csv_rows","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/seed.sql","package_name":"dbt_bigquery","path":"macros/materializations/seed.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__load_csv_rows"},"macro.dbt_bigquery.bigquery__persist_docs":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"bigquery__persist_docs","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__persist_docs"},"macro.dbt_bigquery.bigquery__position":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}","meta":{},"name":"bigquery__position","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/position.sql","package_name":"dbt_bigquery","path":"macros/utils/position.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__position"},"macro.dbt_bigquery.bigquery__post_snapshot":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}","meta":{},"name":"bigquery__post_snapshot","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/snapshot.sql","package_name":"dbt_bigquery","path":"macros/materializations/snapshot.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__post_snapshot"},"macro.dbt_bigquery.bigquery__refresh_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}","meta":{},"name":"bigquery__refresh_materialized_view","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/materialized_view/refresh.sql","package_name":"dbt_bigquery","path":"macros/relations/materialized_view/refresh.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__refresh_materialized_view"},"macro.dbt_bigquery.bigquery__reset_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","meta":{},"name":"bigquery__reset_csv_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/seed.sql","package_name":"dbt_bigquery","path":"macros/materializations/seed.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__reset_csv_table"},"macro.dbt_bigquery.bigquery__resolve_model_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}","meta":{},"name":"bigquery__resolve_model_name","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/python_model/python.sql","package_name":"dbt_bigquery","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__resolve_model_name"},"macro.dbt_bigquery.bigquery__right":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}","meta":{},"name":"bigquery__right","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/right.sql","package_name":"dbt_bigquery","path":"macros/utils/right.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__right"},"macro.dbt_bigquery.bigquery__safe_cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}","meta":{},"name":"bigquery__safe_cast","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/safe_cast.sql","package_name":"dbt_bigquery","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__safe_cast"},"macro.dbt_bigquery.bigquery__snapshot_hash_arguments":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}","meta":{},"name":"bigquery__snapshot_hash_arguments","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/snapshot.sql","package_name":"dbt_bigquery","path":"macros/materializations/snapshot.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__snapshot_hash_arguments"},"macro.dbt_bigquery.bigquery__snapshot_string_as_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}","meta":{},"name":"bigquery__snapshot_string_as_time","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/timestamps.sql","package_name":"dbt_bigquery","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__snapshot_string_as_time"},"macro.dbt_bigquery.bigquery__split_part":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}","meta":{},"name":"bigquery__split_part","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/split_part.sql","package_name":"dbt_bigquery","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__split_part"},"macro.dbt_bigquery.bigquery__string_literal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}","meta":{},"name":"bigquery__string_literal","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/string_literal.sql","package_name":"dbt_bigquery","path":"macros/utils/string_literal.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__string_literal"},"macro.dbt_bigquery.bigquery__test_unique":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}","meta":{},"name":"bigquery__test_unique","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__test_unique"},"macro.dbt_bigquery.bigquery__upload_file":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}","meta":{},"name":"bigquery__upload_file","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/adapters.sql","package_name":"dbt_bigquery","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery__upload_file"},"macro.dbt_bigquery.bigquery_options":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}","meta":{},"name":"bigquery_options","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/options.sql","package_name":"dbt_bigquery","path":"macros/relations/options.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery_options"},"macro.dbt_bigquery.bigquery_table_options":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}","meta":{},"name":"bigquery_table_options","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/table/options.sql","package_name":"dbt_bigquery","path":"macros/relations/table/options.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery_table_options"},"macro.dbt_bigquery.bigquery_view_options":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}","meta":{},"name":"bigquery_view_options","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/view/options.sql","package_name":"dbt_bigquery","path":"macros/relations/view/options.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bigquery_view_options"},"macro.dbt_bigquery.bq_copy_partitions":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}","meta":{},"name":"bq_copy_partitions","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/insert_overwrite.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_copy_partitions"},"macro.dbt_bigquery.bq_create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"bq_create_table_as","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_create_table_as"},"macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}","meta":{},"name":"bq_dynamic_copy_partitions_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/insert_overwrite.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql"},"macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}","meta":{},"name":"bq_dynamic_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/insert_overwrite.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"},"macro.dbt_bigquery.bq_generate_incremental_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}","meta":{},"name":"bq_generate_incremental_build_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_generate_incremental_build_sql"},"macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}","meta":{},"name":"bq_generate_incremental_insert_overwrite_build_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/insert_overwrite.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql"},"macro.dbt_bigquery.bq_generate_incremental_merge_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}","meta":{},"name":"bq_generate_incremental_merge_build_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/merge.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/merge.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"},"macro.dbt_bigquery.bq_generate_microbatch_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}","meta":{},"name":"bq_generate_microbatch_build_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/microbatch.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/microbatch.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_generate_microbatch_build_sql"},"macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n","meta":{},"name":"bq_insert_into_ingestion_time_partitioned_table_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/time_ingestion_tables.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/time_ingestion_tables.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"},"macro.dbt_bigquery.bq_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"bq_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/insert_overwrite.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_insert_overwrite_sql"},"macro.dbt_bigquery.bq_static_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}","meta":{},"name":"bq_static_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/insert_overwrite.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_static_insert_overwrite_sql"},"macro.dbt_bigquery.bq_validate_microbatch_config":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"bq_validate_microbatch_config","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/microbatch.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/microbatch.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.bq_validate_microbatch_config"},"macro.dbt_bigquery.cast_from_string_unsupported_for":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}","meta":{},"name":"cast_from_string_unsupported_for","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/utils/safe_cast.sql","package_name":"dbt_bigquery","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.cast_from_string_unsupported_for"},"macro.dbt_bigquery.cluster_by":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}","meta":{},"name":"cluster_by","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/cluster.sql","package_name":"dbt_bigquery","path":"macros/relations/cluster.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.cluster_by"},"macro.dbt_bigquery.columns_without_partition_fields_csv":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n","meta":{},"name":"columns_without_partition_fields_csv","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/time_ingestion_tables.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/time_ingestion_tables.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.columns_without_partition_fields_csv"},"macro.dbt_bigquery.date_sharded_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}","meta":{},"name":"date_sharded_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/etc.sql","package_name":"dbt_bigquery","path":"macros/etc.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.date_sharded_table"},"macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}","meta":{},"name":"dbt_bigquery_validate_get_incremental_strategy","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy"},"macro.dbt_bigquery.declare_dbt_max_partition":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"declare_dbt_max_partition","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/common.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/common.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.declare_dbt_max_partition"},"macro.dbt_bigquery.default__handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","meta":{},"name":"default__handle_existing_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/view/replace.sql","package_name":"dbt_bigquery","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.default__handle_existing_table"},"macro.dbt_bigquery.get_columns_with_types_in_query_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}","meta":{},"name":"get_columns_with_types_in_query_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/time_ingestion_tables.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/time_ingestion_tables.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.get_columns_with_types_in_query_sql"},"macro.dbt_bigquery.get_partitions_metadata":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}","meta":{},"name":"get_partitions_metadata","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/etc.sql","package_name":"dbt_bigquery","path":"macros/etc.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.get_partitions_metadata"},"macro.dbt_bigquery.get_quoted_with_types_csv":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","meta":{},"name":"get_quoted_with_types_csv","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/time_ingestion_tables.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/time_ingestion_tables.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.get_quoted_with_types_csv"},"macro.dbt_bigquery.grant_access_to":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}","meta":{},"name":"grant_access_to","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/etc.sql","package_name":"dbt_bigquery","path":"macros/etc.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.grant_access_to"},"macro.dbt_bigquery.handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","meta":{},"name":"handle_existing_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/view/replace.sql","package_name":"dbt_bigquery","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.handle_existing_table"},"macro.dbt_bigquery.materialization_copy_bigquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}","meta":{},"name":"materialization_copy_bigquery","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/copy.sql","package_name":"dbt_bigquery","path":"macros/materializations/copy.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.materialization_copy_bigquery"},"macro.dbt_bigquery.materialization_incremental_bigquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","meta":{},"name":"materialization_incremental_bigquery","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.materialization_incremental_bigquery"},"macro.dbt_bigquery.materialization_table_bigquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_table_bigquery","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/table.sql","package_name":"dbt_bigquery","path":"macros/materializations/table.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.materialization_table_bigquery"},"macro.dbt_bigquery.materialization_view_bigquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}","meta":{},"name":"materialization_view_bigquery","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/view.sql","package_name":"dbt_bigquery","path":"macros/materializations/view.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.materialization_view_bigquery"},"macro.dbt_bigquery.partition_by":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}","meta":{},"name":"partition_by","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/relations/partition.sql","package_name":"dbt_bigquery","path":"macros/relations/partition.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.partition_by"},"macro.dbt_bigquery.predicate_for_avoid_require_partition_filter":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}","meta":{},"name":"predicate_for_avoid_require_partition_filter","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/common.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/common.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.predicate_for_avoid_require_partition_filter"},"macro.dbt_bigquery.py_write_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}","meta":{},"name":"py_write_table","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/table.sql","package_name":"dbt_bigquery","path":"macros/materializations/table.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.py_write_table"},"macro.dbt_bigquery.source_sql_with_partition":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"source_sql_with_partition","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.source_sql_with_partition"},"macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}","meta":{},"name":"wrap_with_time_ingestion_partitioning_sql","original_file_path":"dbt_internal_packages/dbt-bigquery/macros/materializations/incremental_strategy/time_ingestion_tables.sql","package_name":"dbt_bigquery","path":"macros/materializations/incremental_strategy/time_ingestion_tables.sql","resource_type":"macro","unique_id":"macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"},"macro.queries.generate_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {% if target.name == \"dev\" -%}\n\n        {%- set default_schema = target.schema -%}\n        {%- if custom_schema_name is none -%}\n\n            {{ var(\"DBT_USER\") }}__{{ default_schema }}\n\n        {%- else -%} {{ var(\"DBT_USER\") }}__{{ custom_schema_name | trim }}\n\n        {%- endif -%}\n\n    {%- else %}\n\n        {%- set default_schema = target.schema -%}\n        {%- if custom_schema_name is none -%} {{ default_schema }}\n\n        {%- else -%} {{ custom_schema_name | trim }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n{%- endmacro %}","meta":{},"name":"generate_schema_name","original_file_path":"macros/dbt_internal/generate_schema_name.sql","package_name":"queries","path":"macros/dbt_internal/generate_schema_name.sql","resource_type":"macro","unique_id":"macro.queries.generate_schema_name"},"macro.queries.padronize_telefone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro padronize_telefone(telefone_column) %}\n    case\n        when\n            length(trim({{ telefone_column }})) = 0\n            or trim({{ telefone_column }}) in ('NONE', 'NULL', '0', \"()\", \"\")\n            or trim({{ telefone_column }}) like '00%'\n            or trim({{ telefone_column }}) like '000%'\n            or trim({{ telefone_column }}) like '0000%'\n            or regexp_contains(trim({{ telefone_column }}), r'^([0-9])\\\\1*$')  -- Remove repeated digits\n            or regexp_contains(trim({{ telefone_column }}), r'E\\+\\d+')  -- Remove scientific notation\n            or regexp_contains(trim({{ telefone_column }}), r'[a-zA-Z]')  -- Remove numbers that contain letters\n        then null\n        else\n            regexp_replace(\n                regexp_replace(\n                    regexp_replace(\n                        regexp_replace(\n                            trim({{ telefone_column }}), '^0', ''  -- Remove leading 0\n                        ),\n                        '[()]',\n                        ''  -- Remove parentheses\n                    ),\n                    '-',\n                    ''  -- Remove hyphens\n                ),\n                ' ',  -- Remove blank spaces\n                ''\n            )\n    end\n{% endmacro %}","meta":{},"name":"padronize_telefone","original_file_path":"macros/string/padronize_telefone.sql","package_name":"queries","path":"macros/string/padronize_telefone.sql","resource_type":"macro","unique_id":"macro.queries.padronize_telefone"},"macro.queries.proper_br":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro proper_br(text) %}\n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split({{ text }}, ' ')) as word\n    )\n{% endmacro %}","meta":{},"name":"proper_br","original_file_path":"macros/string/proper_br.sql","package_name":"queries","path":"macros/string/proper_br.sql","resource_type":"macro","unique_id":"macro.queries.proper_br"},"macro.queries.validate_cpf":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro validate_cpf(cpf_column) %}\n        -- cpf validation based on https://homepages.dcc.ufmg.br/~rodolfo/aedsi-2-10/regrasDigitosVerificadoresCPF.html\n        CASE \n            WHEN LENGTH({{ cpf_column }}) != 11 THEN FALSE\n            WHEN {{ cpf_column }} IN ('00000000000', '11111111111', '22222222222', '33333333333', \n                                    '44444444444', '55555555555', '66666666666', '77777777777', \n                                    '88888888888', '99999999999') THEN FALSE\n            ELSE (\n                SELECT \n                    CASE \n                        WHEN calculated_first_digit = d0 AND calculated_second_digit = d_unit THEN TRUE\n                        ELSE FALSE\n                    END\n                FROM (\n                    SELECT \n                        *,\n                        CASE \n                            WHEN second_sum_mod < 2 THEN 0\n                            ELSE 11 - second_sum_mod\n                        END AS calculated_second_digit\n                    FROM (\n                        SELECT \n                            *,\n                            MOD(d9*11 + d8*10 + d7*9 + d6*8 + d5*7 + d4*6 + d3*5 + d2*4 + d1*3 + calculated_first_digit*2, 11) AS second_sum_mod\n                        FROM (\n                            SELECT \n                                *,\n                                CASE \n                                    WHEN first_sum_mod < 2 THEN 0\n                                    ELSE 11 - first_sum_mod\n                                END AS calculated_first_digit\n                            FROM (\n                                SELECT \n                                    *,\n                                    MOD(d9*10 + d8*9 + d7*8 + d6*7 + d5*6 + d4*5 + d3*4 + d2*3 + d1*2, 11) AS first_sum_mod\n                                FROM (\n                                    SELECT \n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 1, 1) AS INT64) AS d9,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 2, 1) AS INT64) AS d8,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 3, 1) AS INT64) AS d7,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 4, 1) AS INT64) AS d6,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 5, 1) AS INT64) AS d5,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 6, 1) AS INT64) AS d4,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 7, 1) AS INT64) AS d3,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 8, 1) AS INT64) AS d2,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 9, 1) AS INT64) AS d1,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 10, 1) AS INT64) AS d0,\n                                        SAFE_CAST(SUBSTR({{ cpf_column }}, 11, 1) AS INT64) AS d_unit\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        END{% endmacro %}","meta":{},"name":"validate_cpf","original_file_path":"macros/string/validate_cpf.sql","package_name":"queries","path":"macros/string/validate_cpf.sql","resource_type":"macro","unique_id":"macro.queries.validate_cpf"}},"metadata":{"adapter_type":"bigquery","dbt_schema_version":"https://schemas.getdbt.com/dbt/manifest/v20.json","dbt_version":"2.0.0-beta.33","env":{},"generated_at":"2025-07-11T13:42:45.930880330Z","invocation_id":"b5ecf94b-8fc4-4574-8f1e-427332e1432c","invocation_started_at":null,"project_id":null,"project_name":"queries","quoting":null,"send_anonymous_usage_stats":null,"user_id":null},"metrics":{},"nodes":{"model.queries.codes":{"alias":"codes","checksum":{"checksum":"90f703f37f6f2df01de89e2ca24e39d6be87ecaed82fc9788ffbdde101ba5b5b","name":"SHA256"},"columns":{},"compiled":true,"compiled_code":"DECLARE raio_padrao INT64 DEFAULT 100000;  -- metros; ajuste se precisar\n\nCREATE OR REPLACE TABLE `rj-iplanrio.plus_codes.codes` AS (\n\nWITH\ngrid AS (\n  SELECT\n    plus8,\n    geometry AS centro_geometry\n  FROM `rj-iplanrio.plus_codes.grid`\n),\n\n-- 2) Pares grid × equipamento dentro do raio\npairs AS (\n  SELECT\n    g.plus8,\n    g.centro_geometry,\n    e.tipo_equipamento AS categoria,\n\n    -- Struct contendo TODA a linha do equipamento + distância\n    (SELECT AS STRUCT\n        e.*,                                           -- todos os campos de equipamentos_geo\n        ST_DISTANCE(e.geometry, g.centro_geometry) AS distancia_metros\n    ) AS equip_full\n  FROM grid AS g\n  JOIN `rj-iplanrio.plus_codes.equipamentos` AS e\n    ON ST_DWITHIN(e.geometry, g.centro_geometry, raio_padrao)\n),\n\n-- 3) Rankeia por distância\nranqueado AS (\n  SELECT\n    plus8,\n    categoria,\n    equip_full.distancia_metros AS distancia_metros,\n    centro_geometry,\n    equip_full,\n    ROW_NUMBER() OVER (\n      PARTITION BY plus8, categoria\n      ORDER BY equip_full.distancia_metros\n    ) AS rn\n  FROM pairs\n)\n\n-- 4) Agrega os 3 mais próximos\nSELECT\n  plus8,\n  categoria,\n  ANY_VALUE(centro_geometry) AS geometry,\n  ARRAY_AGG(equip_full ORDER BY distancia_metros LIMIT 3) AS equipamentos,\n  CURRENT_TIMESTAMP()    AS ingestion_timestamp\nFROM ranqueado\nWHERE rn <= 3\nGROUP BY plus8, categoria\n)","compiled_path":"target/compiled/models/raw/plus_codes/codes.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"schema":null,"sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","raw","plus_codes","codes"],"language":"sql","metrics":[],"name":"codes","original_file_path":"models/raw/plus_codes/codes.sql","package_name":"queries","path":"models/raw/plus_codes/codes.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__gerenciamento__dbt`.`codes`","resource_type":"model","schema":"pedrosiqueira__gerenciamento__dbt","sources":[],"unique_id":"model.queries.codes","unrendered_config":{}},"model.queries.equipamentos":{"alias":"equipamentos","checksum":{"checksum":"1e351c222f935735fbe8de9ff4665d35bd08a9cc30f586da46dbbeb375cac626","name":"SHA256"},"columns":{},"compiled":true,"compiled_code":"\n/*\nplus11\n\nid_equipamento STRING\nsecretaria_responsavel STRING\ntipo_equipamento STRING\nnome_oficial STRING\nnome_popular STRING\n\nplus10 STRING\nplus11 STRING\nplus6 STRING\nlatitude FLOAT64\nlongitude FLOAT64\ngeometry GEOGRAPHY\n\nendereco STRUCT<\n    logradouro  STRING,\n    numero      STRING,\n    complemento STRING,\n    bairro      STRING,\n    cep         STRING\n>\n\n\n\n\nbairro STRUCT<\n    id_bairro STRING,\n    bairro STRING,\n    nome_regiao_planejamento STRING,\n    nome_regiao_administrativa STRING,\n    subprefeitura STRING,\n\n\n>\ncontato STRUCT<\n    telefones   ARRAY<STRING>,\n    email       STRING,\n    site        STRING,\n    redes_social STRUCT<\n    facebook  STRING,\n    instagram STRING,\n    twitter   STRING\n    >\n>\n\nativo                    BOOL,\naberto_ao_publico        BOOL,\nhorario_funcionamento        ARRAY<STRUCT<dia STRING, abre TIME, fecha TIME>>\n\n\nfonte                    STRING,\nvigencia_inicio          DATE,\nvigencia_fim             DATE\n\nmetadata                 JSON,\n\nupdate_at      TIMESTAMP,\n*/\n\n-- do union all with equipaments from other sources\n\nCREATE OR REPLACE TABLE `rj-iplanrio.plus_codes.equipamentos` AS (\n\nwith saude AS (\n    select\n        plus8,\n        geometry,\n        plus11,\n        id_equipamento,\n        secretaria_responsavel,\n        tipo_equipamento,\n        nome_oficial,\n        nome_popular,\n        plus10,\n        plus6,\n        latitude,\n        longitude,\n        endereco,\n        bairro,\n        contato,\n        ativo,\n        aberto_ao_publico,\n        horario_funcionamento,\n        fonte,\n        vigencia_inicio,\n        vigencia_fim,\n        metadata,\n        update_at\n    from `rj-iplanrio.plus_codes.equipamentos_saude`\n)\n\nselect * from saude\n\n)","compiled_path":"target/compiled/models/raw/plus_codes/equipamentos.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"schema":null,"sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","raw","plus_codes","equipamentos"],"language":"sql","metrics":[],"name":"equipamentos","original_file_path":"models/raw/plus_codes/equipamentos.sql","package_name":"queries","path":"models/raw/plus_codes/equipamentos.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__gerenciamento__dbt`.`equipamentos`","resource_type":"model","schema":"pedrosiqueira__gerenciamento__dbt","sources":[],"unique_id":"model.queries.equipamentos","unrendered_config":{}},"model.queries.equipamentos_saude":{"alias":"equipamentos_saude","checksum":{"checksum":"6487a366e543d80e4e58296efd826ded0868a1e13cd626abc89830cc436db53b","name":"SHA256"},"columns":{},"compiled":true,"compiled_code":"\n\n\nCREATE OR REPLACE TABLE `rj-iplanrio.plus_codes.equipamentos_saude` AS (\n\nwith tb as (\nselect\n    -- Pluscodes (computed and ordered as specified)\n    coalesce(\n        tools.encode_pluscode(t.endereco_latitude, t.endereco_longitude, 11), ''\n    ) as plus11,\n\n    -- Core identification\n    t.id_cnes as id_equipamento,\n    'SMS' as secretaria_responsavel,\n    t.tipo_sms as tipo_equipamento,\n    t.nome_fantasia as nome_oficial,\n    t.nome_limpo as nome_popular,\n\n    -- More Pluscodes\n    coalesce(\n        tools.encode_pluscode(t.endereco_latitude, t.endereco_longitude, 10), ''\n    ) as plus10,\n    coalesce(\n        tools.encode_pluscode(t.endereco_latitude, t.endereco_longitude, 8), ''\n    ) as plus8,\n    coalesce(\n        tools.encode_pluscode(t.endereco_latitude, t.endereco_longitude, 6), ''\n    ) as plus6,\n\n    -- Location details\n    t.endereco_latitude as latitude,\n    t.endereco_longitude as longitude,\n    st_geogpoint(t.endereco_longitude, t.endereco_latitude) as geometry,\n\n    -- Structured address\n    struct(\n        t.endereco_logradouro as logradouro,\n        t.endereco_numero as numero,\n        t.endereco_complemento as complemento,\n        t.endereco_bairro as bairro_raw,  -- Renamed to avoid conflict with the new 'bairro' struct\n        t.endereco_cep as cep\n    ) as endereco,\n\n    -- Structured bairro information from join\n    struct(\n        b.id_bairro as id_bairro,\n        b.nome as bairro,\n        b.nome_regiao_planejamento as regiao_planejamento,\n        b.nome_regiao_administrativa as regiao_administrativa,\n        b.subprefeitura as subprefeitura\n    ) as bairro,\n\n    -- Structured contact information\n    struct(\n        array(\n            select phone\n            from unnest(t.telefone) as phone\n            where phone is not null and trim(phone) != ''\n        ) as telefones,\n        t.email as email,\n        cast(null as string) as site,  -- No direct mapping in source schema\n        struct(\n            t.facebook as facebook, t.instagram as instagram, t.twitter as twitter\n        ) as redes_social\n    ) as contato,\n\n    -- Status flags\n    (lower(t.ativa) = 'sim') as ativo, \n    (lower(t.ativa) = 'sim') as aberto_ao_publico, \n\n    case\n        when\n            t.turno_atendimento\n            = 'ATENDIMENTO CONTINUO DE 24 HORAS/DIA (PLANTAO:INCLUI SABADOS, DOMINGOS E FERIADOS)'\n        then  -- 24 hours / continuous\n            [\n                struct(\n                    'Todos os dias' as dia,\n                    time '00:00:00' as abre,\n                    time '23:59:59' as fecha\n                )\n            ]\n        when t.turno_atendimento = 'ATENDIMENTOS NOS TURNOS DA MANHA E A TARDE'\n        then  -- Manhã e Tarde (assumed 8h-17h, Mon-Fri)\n            [\n                struct(\n                    'Segunda a Sexta' as dia,\n                    time '08:00:00' as abre,\n                    time '17:00:00' as fecha\n                )\n            ]\n        when t.turno_atendimento = 'ATENDIMENTO NOS TURNOS DA MANHA, TARDE E NOITE'\n        then  -- Manhã, Tarde e Noite (assumed 8h-22h, Mon-Fri)\n            [\n                struct(\n                    'Segunda a Sexta' as dia,\n                    time '08:00:00' as abre,\n                    time '22:00:00' as fecha\n                )\n            ]\n        else  -- ATENDIMENTO COM TURNOS INTERMITENTES, return empty array\n            cast([] as array<struct<dia string, abre time, fecha time>>)\n    end as horario_funcionamento,\n\n    'rj-sms.saude_dados_mestres.estabelecimento' as fonte,\n    cast(null as date) as vigencia_inicio,\n    cast(null as date) as vigencia_fim,\n\n    -- Metadata as JSON (including all unused columns)\n    to_json_string(\n        struct(\n            t.id_unidade,\n            t.id_tipo_unidade,\n            t.area_programatica,\n            t.cnpj_mantenedora,\n            t.ativa as original_ativa,  \n            t.tipo_sms_agrupado,\n            t.tipo,\n            t.tipo_sms_simplificado,\n            t.nome_acentuado,\n            t.nome_sigla,\n            t.nome_complemento,\n            t.responsavel_sms,  \n            t.administracao,\n            t.prontuario_tem,\n            t.prontuario_versao,\n            t.prontuario_estoque_tem_dado,\n            t.prontuario_estoque_motivo_sem_dado,\n            t.prontuario_episodio_tem_dado,\n            t.aberto_sempre as original_aberto_sempre,  \n            t.turno_atendimento as original_turno_atendimento,  \n            t.diretor_clinico_cpf,\n            t.diretor_clinico_conselho,\n            t.data_atualizao_registro,\n            t.usuario_atualizador_registro,\n            t.data_particao,\n            t.data_carga,\n            t.data_snapshot\n        )\n    ) as metadata,\n\n    -- Last update timestamp\n    current_timestamp() as update_at\nfrom `rj-sms.saude_dados_mestres.estabelecimento` as t\nleft join\n    `datario.dados_mestres.bairro` as b\n    on st_contains(b.geometry, st_geogpoint(t.endereco_longitude, t.endereco_latitude))\n)\n\nselect\n    plus11,\n    id_equipamento,\n    secretaria_responsavel,\n    tipo_equipamento,\n    nome_oficial,\n    nome_popular,\n    plus10,\n    plus8,\n    plus6,\n    latitude,\n    longitude,\n    geometry,\n    endereco,\n    bairro,\n    contato,\n    ativo,\n    aberto_ao_publico,\n    horario_funcionamento,\n    fonte,\n    vigencia_inicio,\n    vigencia_fim,\n    metadata,\n    update_at\nfrom tb\n)","compiled_path":"target/compiled/models/raw/plus_codes/equipamentos_saude.sql","config":{"access":null,"alias":"equipamentos_saude","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"plus_codes","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","raw","plus_codes","equipamentos_saude"],"language":"sql","metrics":[],"name":"equipamentos_saude","original_file_path":"models/raw/plus_codes/equipamentos_saude.sql","package_name":"queries","path":"models/raw/plus_codes/equipamentos_saude.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__plus_codes`.`equipamentos_saude`","resource_type":"model","schema":"pedrosiqueira__plus_codes","sources":[],"unique_id":"model.queries.equipamentos_saude","unrendered_config":{}},"model.queries.grid":{"alias":"codes","checksum":{"checksum":"0a2039c9ee18c4bd58952496212217a164298af99b3fa8e6ed0ed79a3289d90d","name":"SHA256"},"columns":{},"compiled":true,"compiled_code":"\n\nDECLARE step FLOAT64 DEFAULT 0.0001;  -- latitude step\nDECLARE bbox ARRAY<FLOAT64> DEFAULT [-43.8, -23.1, -43.0, -22.7];  -- [W,S,E,N]\n\n\nCREATE OR REPLACE TABLE `rj-iplanrio.plus_codes.grid` AS (\n\n\n\nwith\n    lats as (\n        select latitude\n        from unnest(generate_array(bbox[offset(1)], bbox[offset(3)], step)) as latitude\n    ),\n    lons as (\n        select longitude\n        from unnest(generate_array(bbox[offset(0)], bbox[offset(2)], step)) as longitude\n    ),\n    grid as (select latitude, longitude from lats cross join lons),\n    rio_boundary as (\n        select geometria\n        from `basedosdados.br_geobr_mapas.municipio`\n        where id_municipio = '3304557'\n    ),\n    inside as (\n        select latitude, longitude\n        from grid, rio_boundary\n        where st_contains(geometria, st_geogpoint(longitude, latitude))\n    ),\n    final_tb as (\n        select\n            tools.encode_pluscode(latitude, longitude, 8) as plus8,\n            tools.encode_pluscode(latitude, longitude, 6) as plus6,\n            any_value(st_geogpoint(longitude, latitude)) geometry,\n        from inside\n        group by 1, 2\n    )\n\nselect \n    plus8,\n    plus6,\n    geometry\nfrom final_tb\n)\n","compiled_path":"target/compiled/models/raw/plus_codes/grid.sql","config":{"access":null,"alias":"codes","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"plus_codes","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","raw","plus_codes","grid"],"language":"sql","metrics":[],"name":"grid","original_file_path":"models/raw/plus_codes/grid.sql","package_name":"queries","path":"models/raw/plus_codes/grid.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__plus_codes`.`codes`","resource_type":"model","schema":"pedrosiqueira__plus_codes","sources":[],"unique_id":"model.queries.grid","unrendered_config":{}},"model.queries.int_bcadastro_nulls_caepf":{"alias":"nulls_caepf","checksum":{"checksum":"26d8e7af33c70c0b5589632324d6a805b3382957f174fc2436b71e62773c2731","name":"SHA256"},"columns":{"empty_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"empty_percent","tags":[]},"key":{"config":{},"constraints":[],"data_type":"STRING not null","meta":{},"name":"key","tags":[]},"null_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"null_percent","tags":[]},"others_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"others_percent","tags":[]}},"compiled":true,"compiled_code":"\n\n\nwith\n    -- Step 1: Get the total number of rows efficiently\n    total_row_count as (\n        select count(*) as total_rows\n        from `rj-iplanrio.brutos_bcadastro_staging.chcaepf_bcadastros`  -- Target table for CAEPF\n    ),\n    -- Step 2: Parse the JSON and extract fields without window functions or\n    -- aggressive casting/nullif\n    -- Extract all listed keys using JSON_VALUE or appropriate functions (PARSE_DATE,\n    -- EXTRACT_ARRAY)\n    fonte_extracted as (\n        select\n\n            -- Extract keys from the provided list using JSON_VALUE for scalar values\n            -- Raw aliases added where conversion to DATE/other types might be\n            -- intended later\n            json_value(doc, '$.dataInicioAtividade') as datainicioatividade,  -- Likely date string\n            json_value(doc, '$.nroCpf') as nrocpf,  -- String\n            json_value(doc, '$.numeroLogradouro') as numerologradouro,  -- String\n            json_value(doc, '$.dataSituacao') as datasituacao,  -- Likely date string\n            json_value(doc, '$.nomeAtividade') as nomeatividade,  -- String\n            json_value(doc, '$.nomeMotivoSituacao') as nomemotivosituacao,  -- String\n            json_value(doc, '$.nomeMunicipio') as nomemunicipio,  -- String\n            json_value(doc, '$.nomeSituacaoCpf') as nomesituacaocpf,  -- String\n            json_value(doc, '$.telefoneContato') as telefonecontato,  -- String\n            json_value(doc, '$.tipo') as tipo,  -- String\n            json_value(doc, '$.cep') as cep,  -- String\n            json_value(doc, '$.codSituacao') as codsituacao,  -- String\n            json_value(doc, '$.nroAepfCompleto') as nroaepfcompleto,  -- String\n            json_value(doc, '$.codMotivoSituacao') as codmotivosituacao,  -- String\n            json_value(doc, '$.nomeTipoContribuinte') as nometipocontribuinte,  -- String\n            json_value(doc, '$.bairro') as bairro,  -- String\n\n            -- Special key '~version' requires REPLACE\n            json_value(replace(to_json_string(doc), '~', ''), '$.version') as version,  -- String\n\n            json_value(doc, '$.codOrgaoCpf') as codorgaocpf,  -- String\n            json_value(doc, '$.complemento') as complemento,  -- String\n            -- 'id' from source table is selected above\n            json_value(doc, '$.codTipoContribuinte') as codtipocontribuinte,  -- String\n            json_value(doc, '$.codAtividade') as codatividade,  -- String\n            json_value(doc, '$.dataUltimaAtualizacao') as dataultimaatualizacao,  -- Likely date string\n            json_value(doc, '$.nomeCpf') as nomecpf,  -- String\n            json_value(doc, '$.nomeQualificacao') as nomequalificacao,  -- String\n            json_value(doc, '$.language') as language,  -- String\n            json_value(doc, '$.codOrgaoMunicipio') as codorgaomunicipio,  -- String\n            json_value(doc, '$.codSituacaoCpf') as codsituacaocpf,  -- String\n            json_value(doc, '$.ufMunicipio') as ufmunicipio,  -- String\n            json_value(doc, '$.timestamp') as timestamp,  -- String (Duplicate key name in list, assuming it's the same $.timestamp)\n\n            -- Technical fields from doc and source, based on your models\n            json_value(doc, '$._id') as _id,  -- String from doc\n            json_value(doc, '$._rev') as _rev,  -- String from doc\n\n            -- 'cnaes' looks like an array - use JSON_EXTRACT_ARRAY\n            json_extract_array(doc, '$.cnaes') as cnaes,  -- Array or NULL\n\n            json_value(doc, '$.emailContato') as emailcontato,  -- String\n            json_value(doc, '$.nomeSituacao') as nomesituacao,  -- String\n            -- _rev already included\n            json_value(doc, '$.cei') as cei,  -- String\n            json_value(doc, '$.codMunicipio') as codmunicipio,  -- String\n            json_value(doc, '$.logradouro') as logradouro,  -- String (Duplicate key name in list, assuming it's the same $.logradouro) - added suffix\n            json_value(doc, '$.nroAepf') as nroaepf,  -- String\n            json_value(doc, '$.views') as views,  -- JSON object/array -> analyzed as NULL by JSON_VALUE\n            json_value(doc, '$.codQualificacao') as codqualificacao,  -- String\n        -- Note: Removed '_airbyte_*' and 'value', 'seq', 'last_seq' as they weren't\n        -- in the provided CNO key list\n        -- If they exist in the source schema and need analysis, add them here.\n        -- The provided key list is assumed to be the definitive set of JSON keys for\n        -- this analysis.\n        from `rj-iplanrio.brutos_bcadastro_staging.chcaepf_bcadastros`\n    ),\n\n    -- Step 3: Calculate counts for each column using UNION ALL\n    column_counts as (\n        -- For each column in fonte_extracted, create a SELECT statement\n        -- Handle STRING, DATE, ARRAY, and other scalar types differently for empty\n        -- counts\n        -- --- STRING Columns (Most JSON_VALUE extractions) ---\n        -- Includes raw string versions of potential dates/codes and nested view paths\n        -- analyzed as scalar or NULL\n        select\n            'dataInicioAtividade' as column_name,\n            sum(case when datainicioatividade is null then 1 else 0 end) as null_count,\n            sum(case when datainicioatividade = '' then 1 else 0 end) as empty_count,\n            sum(\n                case\n                    when datainicioatividade is not null and datainicioatividade != ''\n                    then 1\n                    else 0\n                end\n            ) as other_count\n        from fonte_extracted\n        union all\n        select\n            'nroCpf' as column_name,\n            sum(case when nrocpf is null then 1 else 0 end),\n            sum(case when nrocpf = '' then 1 else 0 end),\n            sum(case when nrocpf is not null and nrocpf != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'numeroLogradouro' as column_name,\n            sum(case when numerologradouro is null then 1 else 0 end),\n            sum(case when numerologradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when numerologradouro is not null and numerologradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'dataSituacao' as column_name,\n            sum(case when datasituacao is null then 1 else 0 end),\n            sum(case when datasituacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when datasituacao is not null and datasituacao != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeAtividade' as column_name,\n            sum(case when nomeatividade is null then 1 else 0 end),\n            sum(case when nomeatividade = '' then 1 else 0 end),\n            sum(\n                case\n                    when nomeatividade is not null and nomeatividade != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeMotivoSituacao' as column_name,\n            sum(case when nomemotivosituacao is null then 1 else 0 end),\n            sum(case when nomemotivosituacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when nomemotivosituacao is not null and nomemotivosituacao != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeMunicipio' as column_name,\n            sum(case when nomemunicipio is null then 1 else 0 end),\n            sum(case when nomemunicipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when nomemunicipio is not null and nomemunicipio != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeSituacaoCpf' as column_name,\n            sum(case when nomesituacaocpf is null then 1 else 0 end),\n            sum(case when nomesituacaocpf = '' then 1 else 0 end),\n            sum(\n                case\n                    when nomesituacaocpf is not null and nomesituacaocpf != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'telefoneContato' as column_name,\n            sum(case when telefonecontato is null then 1 else 0 end),\n            sum(case when telefonecontato = '' then 1 else 0 end),\n            sum(\n                case\n                    when telefonecontato is not null and telefonecontato != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'tipo' as column_name,\n            sum(case when tipo is null then 1 else 0 end),\n            sum(case when tipo = '' then 1 else 0 end),\n            sum(case when tipo is not null and tipo != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'cep' as column_name,\n            sum(case when cep is null then 1 else 0 end),\n            sum(case when cep = '' then 1 else 0 end),\n            sum(case when cep is not null and cep != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'codSituacao' as column_name,\n            sum(case when codsituacao is null then 1 else 0 end),\n            sum(case when codsituacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when codsituacao is not null and codsituacao != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nroAepfCompleto' as column_name,\n            sum(case when nroaepfcompleto is null then 1 else 0 end),\n            sum(case when nroaepfcompleto = '' then 1 else 0 end),\n            sum(\n                case\n                    when nroaepfcompleto is not null and nroaepfcompleto != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codMotivoSituacao' as column_name,\n            sum(case when codmotivosituacao is null then 1 else 0 end),\n            sum(case when codmotivosituacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when codmotivosituacao is not null and codmotivosituacao != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeTipoContribuinte' as column_name,\n            sum(case when nometipocontribuinte is null then 1 else 0 end),\n            sum(case when nometipocontribuinte = '' then 1 else 0 end),\n            sum(\n                case\n                    when nometipocontribuinte is not null and nometipocontribuinte != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'bairro' as column_name,\n            sum(case when bairro is null then 1 else 0 end),\n            sum(case when bairro = '' then 1 else 0 end),\n            sum(case when bairro is not null and bairro != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'version' as column_name,\n            sum(case when version is null then 1 else 0 end),\n            sum(case when version = '' then 1 else 0 end),\n            sum(case when version is not null and version != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'codOrgaoCpf' as column_name,\n            sum(case when codorgaocpf is null then 1 else 0 end),\n            sum(case when codorgaocpf = '' then 1 else 0 end),\n            sum(\n                case\n                    when codorgaocpf is not null and codorgaocpf != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'complemento' as column_name,\n            sum(case when complemento is null then 1 else 0 end),\n            sum(case when complemento = '' then 1 else 0 end),\n            sum(\n                case\n                    when complemento is not null and complemento != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        -- id (analyzed below as source column)\n        select\n            'codTipoContribuinte' as column_name,\n            sum(case when codtipocontribuinte is null then 1 else 0 end),\n            sum(case when codtipocontribuinte = '' then 1 else 0 end),\n            sum(\n                case\n                    when codtipocontribuinte is not null and codtipocontribuinte != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        -- views_nroCpf_indice_map_fields (analyzed below as potential non-scalar)\n        select\n            'codAtividade' as column_name,\n            sum(case when codatividade is null then 1 else 0 end),\n            sum(case when codatividade = '' then 1 else 0 end),\n            sum(\n                case\n                    when codatividade is not null and codatividade != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeCpf' as column_name,\n            sum(case when nomecpf is null then 1 else 0 end),\n            sum(case when nomecpf = '' then 1 else 0 end),\n            sum(case when nomecpf is not null and nomecpf != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'nomeQualificacao' as column_name,\n            sum(case when nomequalificacao is null then 1 else 0 end),\n            sum(case when nomequalificacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when nomequalificacao is not null and nomequalificacao != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'language' as column_name,\n            sum(case when language is null then 1 else 0 end),\n            sum(case when language = '' then 1 else 0 end),\n            sum(case when language is not null and language != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'codOrgaoMunicipio' as column_name,\n            sum(case when codorgaomunicipio is null then 1 else 0 end),\n            sum(case when codorgaomunicipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when codorgaomunicipio is not null and codorgaomunicipio != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codSituacaoCpf' as column_name,\n            sum(case when codsituacaocpf is null then 1 else 0 end),\n            sum(case when codsituacaocpf = '' then 1 else 0 end),\n            sum(\n                case\n                    when codsituacaocpf is not null and codsituacaocpf != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'ufMunicipio' as column_name,\n            sum(case when ufmunicipio is null then 1 else 0 end),\n            sum(case when ufmunicipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when ufmunicipio is not null and ufmunicipio != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        -- views_nroCpf_indice (analyzed below as potential non-scalar)\n        select\n            'timestamp' as column_name,\n            sum(case when timestamp is null then 1 else 0 end),\n            sum(case when timestamp = '' then 1 else 0 end),\n            sum(case when timestamp is not null and timestamp != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        -- views_nroCpf_indice_map (analyzed below as potential non-scalar)\n        select\n            '_id' as column_name,\n            sum(case when _id is null then 1 else 0 end),\n            sum(case when _id = '' then 1 else 0 end),\n            sum(case when _id is not null and _id != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        -- cnaes (analyzed below as array)\n        select\n            'emailContato' as column_name,\n            sum(case when emailcontato is null then 1 else 0 end),\n            sum(case when emailcontato = '' then 1 else 0 end),\n            sum(\n                case\n                    when emailcontato is not null and emailcontato != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeSituacao' as column_name,\n            sum(case when nomesituacao is null then 1 else 0 end),\n            sum(case when nomesituacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when nomesituacao is not null and nomesituacao != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n\n        union all\n        select\n            '_rev' as column_name,\n            sum(case when _rev is null then 1 else 0 end),\n            sum(case when _rev = '' then 1 else 0 end),\n            sum(case when _rev is not null and _rev != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'cei' as column_name,\n            sum(case when cei is null then 1 else 0 end),\n            sum(case when cei = '' then 1 else 0 end),\n            sum(case when cei is not null and cei != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'codMunicipio' as column_name,\n            sum(case when codmunicipio is null then 1 else 0 end),\n            sum(case when codmunicipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when codmunicipio is not null and codmunicipio != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'logradouro' as column_name,\n            sum(case when logradouro is null then 1 else 0 end),\n            sum(case when logradouro = '' then 1 else 0 end),\n            sum(case when logradouro is not null and logradouro != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'nroAepf' as column_name,\n            sum(case when nroaepf is null then 1 else 0 end),\n            sum(case when nroaepf = '' then 1 else 0 end),\n            sum(case when nroaepf is not null and nroaepf != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        -- views (analyzed below as potential non-scalar)\n        select\n            'codQualificacao' as column_name,\n            sum(case when codqualificacao is null then 1 else 0 end),\n            sum(case when codqualificacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when codqualificacao is not null and codqualificacao != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n\n        -- --- Source Column (id) ---\n        -- Assuming 'id' is not a string where '' check makes sense (e.g., BYTES,\n        -- INT64). NULL vs NOT NULL only.\n        -- --- ARRAY Columns ---\n        select\n            'cnaes' as column_name,\n            sum(case when cnaes is null then 1 else 0 end) as null_count,\n            sum(case when array_length(cnaes) = 0 then 1 else 0 end) as empty_count,\n            sum(\n                case\n                    when cnaes is not null and array_length(cnaes) > 0 then 1 else 0\n                end\n            ) as other_count\n        from fonte_extracted\n\n    -- Add a UNION ALL block for every column extracted in fonte_extracted\n    )\n\n-- Step 4: Calculate percentages by joining counts with total count\nselect\n    cc.column_name as key,\n    round(safe_divide(cc.null_count * 100, trc.total_rows), 2) as null_percent,\n    round(safe_divide(cc.empty_count * 100, trc.total_rows), 2) as empty_percent,\n    round(safe_divide(cc.other_count * 100, trc.total_rows), 2) as others_percent  -- Non-null, non-empty\nfrom column_counts as cc\ncross join  -- Joins each row from column_counts with the single row from total_row_count\n    total_row_count as trc\norder by null_percent desc  -- Order by null percentage descending","compiled_path":"target/compiled/models/intermediate/bcadastro/int_bcadastro_nulls_caepf.sql","config":{"access":null,"alias":"nulls_caepf","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"debug_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":null,"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","intermediate","bcadastro","int_bcadastro_nulls_caepf"],"language":"sql","metrics":[],"name":"int_bcadastro_nulls_caepf","original_file_path":"models/intermediate/bcadastro/int_bcadastro_nulls_caepf.sql","package_name":"queries","path":"models/intermediate/bcadastro/int_bcadastro_nulls_caepf.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_caepf`","resource_type":"model","schema":"pedrosiqueira__debug_bcadastro","sources":[],"unique_id":"model.queries.int_bcadastro_nulls_caepf","unrendered_config":{}},"model.queries.int_bcadastro_nulls_cno":{"alias":"nulls_cno","checksum":{"checksum":"a64f3a010a2644389c8055ea59822411618cfd6009a82090e4e871ae2b7f50a2","name":"SHA256"},"columns":{"empty_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"empty_percent","tags":[]},"key":{"config":{},"constraints":[],"data_type":"STRING not null","meta":{},"name":"key","tags":[]},"null_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"null_percent","tags":[]},"others_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"others_percent","tags":[]}},"compiled":true,"compiled_code":"\n\n\nwith\n    -- Step 1: Get the total number of rows efficiently\n    total_row_count as (\n        select count(*) as total_rows\n        from `rj-iplanrio.brutos_bcadastro_staging.chcno_bcadastros`  -- Target table for CNO\n    ),\n    -- Step 2: Parse the JSON and extract fields without window functions or\n    -- aggressive casting/nullif\n    -- Extract all listed keys using JSON_VALUE or appropriate functions (PARSE_DATE,\n    -- EXTRACT_ARRAY)\n    fonte_extracted as (\n        select\n\n            -- Extract keys from the provided list\n            json_value(doc, '$.dataInicioObra') as datainicioobra,  -- Likely date string\n            json_value(doc, '$.cadastroImobiliario') as cadastroimobiliario,  -- String\n            json_value(doc, '$.cib') as cib,  -- String\n            json_value(\n                doc, '$.dataInicioResponsabilidade'\n            ) as datainicioresponsabilidade,  -- Likely date string\n            json_value(doc, '$.rrt') as rrt,  -- String\n            json_value(doc, '$.logradouro') as logradouro,  -- String\n            json_value(doc, '$.cep') as cep,  -- String\n            json_value(doc, '$.tipoLogradouro') as tipologradouro,  -- String\n            json_value(doc, '$.valorMedida') as valormedida,  -- Likely numeric string\n            json_value(doc, '$.timestamp') as timestamp,  -- String (often epoch time)\n            json_value(doc, '$.cno') as cno,  -- String (Primary key from doc)\n            json_value(doc, '$.complemento') as complemento,  -- String\n            json_value(doc, '$.situacao') as situacao,  -- String\n            json_value(doc, '$.art') as art,  -- String\n            json_value(doc, '$.municipio') as municipio,  -- String (Municipality name)\n            json_value(doc, '$.numeroLogradouro') as numerologradouro,  -- String\n            json_value(doc, '$.bairro') as bairro,  -- String\n            json_value(doc, '$.codigoMunicipio') as codigomunicipio,  -- Likely municipality code string\n            json_value(doc, '$.cnoVinculado') as cnovinculado,  -- String\n            json_value(doc, '$.dataSituacao') as datasituacao,  -- Likely date string\n            json_value(doc, '$.niResponsavel') as niresponsavel,  -- String\n            json_value(doc, '$.tipo') as tipo,  -- String\n            json_value(doc, '$.tipoResponsabilidade') as tiporesponsabilidade,  -- String\n            json_value(doc, '$.uf') as uf,  -- String\n            json_value(doc, '$.unidadeMedida') as unidademedida,  -- String\n\n            -- Keys requiring special handling based on your CPNJ/CPF models or name\n            -- '~version' requires REPLACE\n            json_value(replace(to_json_string(doc), '~', ''), '$.version') as version,  -- String\n\n            -- Technical fields from doc, based on your CPF model\n            json_value(doc, '$._id') as _id,  -- String\n            json_value(doc, '$._rev') as _rev,  -- String\n\n            -- 'areas' looks like an array\n            json_extract_array(doc, '$.areas') as areas  -- Array or NULL\n\n        from `rj-iplanrio.brutos_bcadastro_staging.chcno_bcadastros`\n    ),\n\n    -- Step 3: Calculate counts for each column using UNION ALL\n    column_counts as (\n        -- For each column in fonte_extracted, create a SELECT statement\n        -- Handle STRING, DATE, ARRAY, and other scalar types differently for empty\n        -- counts\n        -- --- STRING Columns (JSON_VALUE extractions unless noted) ---\n        select\n            'dataInicioObra' as column_name,\n            sum(case when datainicioobra is null then 1 else 0 end) as null_count,\n            sum(case when datainicioobra = '' then 1 else 0 end) as empty_count,\n            sum(\n                case\n                    when datainicioobra is not null and datainicioobra != ''\n                    then 1\n                    else 0\n                end\n            ) as other_count\n        from fonte_extracted\n        union all\n        select\n            'cadastroImobiliario' as column_name,\n            sum(case when cadastroimobiliario is null then 1 else 0 end),\n            sum(case when cadastroimobiliario = '' then 1 else 0 end),\n            sum(\n                case\n                    when cadastroimobiliario is not null and cadastroimobiliario != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'cib' as column_name,\n            sum(case when cib is null then 1 else 0 end),\n            sum(case when cib = '' then 1 else 0 end),\n            sum(case when cib is not null and cib != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'dataInicioResponsabilidade' as column_name,\n            sum(case when datainicioresponsabilidade is null then 1 else 0 end),\n            sum(case when datainicioresponsabilidade = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        datainicioresponsabilidade is not null\n                        and datainicioresponsabilidade != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'rrt' as column_name,\n            sum(case when rrt is null then 1 else 0 end),\n            sum(case when rrt = '' then 1 else 0 end),\n            sum(case when rrt is not null and rrt != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'logradouro' as column_name,\n            sum(case when logradouro is null then 1 else 0 end),\n            sum(case when logradouro = '' then 1 else 0 end),\n            sum(case when logradouro is not null and logradouro != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'cep' as column_name,\n            sum(case when cep is null then 1 else 0 end),\n            sum(case when cep = '' then 1 else 0 end),\n            sum(case when cep is not null and cep != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'tipoLogradouro' as column_name,\n            sum(case when tipologradouro is null then 1 else 0 end),\n            sum(case when tipologradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when tipologradouro is not null and tipologradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'valorMedida' as column_name,\n            sum(case when valormedida is null then 1 else 0 end),\n            sum(case when valormedida = '' then 1 else 0 end),\n            sum(\n                case\n                    when valormedida is not null and valormedida != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'timestamp' as column_name,\n            sum(case when timestamp is null then 1 else 0 end),\n            sum(case when timestamp = '' then 1 else 0 end),\n            sum(case when timestamp is not null and timestamp != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'cno' as column_name,\n            sum(case when cno is null then 1 else 0 end),\n            sum(case when cno = '' then 1 else 0 end),\n            sum(case when cno is not null and cno != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'complemento' as column_name,\n            sum(case when complemento is null then 1 else 0 end),\n            sum(case when complemento = '' then 1 else 0 end),\n            sum(\n                case\n                    when complemento is not null and complemento != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'situacao' as column_name,\n            sum(case when situacao is null then 1 else 0 end),\n            sum(case when situacao = '' then 1 else 0 end),\n            sum(case when situacao is not null and situacao != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'art' as column_name,\n            sum(case when art is null then 1 else 0 end),\n            sum(case when art = '' then 1 else 0 end),\n            sum(case when art is not null and art != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'municipio' as column_name,\n            sum(case when municipio is null then 1 else 0 end),\n            sum(case when municipio = '' then 1 else 0 end),\n            sum(case when municipio is not null and municipio != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'numeroLogradouro' as column_name,\n            sum(case when numerologradouro is null then 1 else 0 end),\n            sum(case when numerologradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when numerologradouro is not null and numerologradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'bairro' as column_name,\n            sum(case when bairro is null then 1 else 0 end),\n            sum(case when bairro = '' then 1 else 0 end),\n            sum(case when bairro is not null and bairro != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'codigoMunicipio' as column_name,\n            sum(case when codigomunicipio is null then 1 else 0 end),\n            sum(case when codigomunicipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when codigomunicipio is not null and codigomunicipio != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'cnoVinculado' as column_name,\n            sum(case when cnovinculado is null then 1 else 0 end),\n            sum(case when cnovinculado = '' then 1 else 0 end),\n            sum(\n                case\n                    when cnovinculado is not null and cnovinculado != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'dataSituacao' as column_name,\n            sum(case when datasituacao is null then 1 else 0 end),\n            sum(case when datasituacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when datasituacao is not null and datasituacao != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'niResponsavel' as column_name,\n            sum(case when niresponsavel is null then 1 else 0 end),\n            sum(case when niresponsavel = '' then 1 else 0 end),\n            sum(\n                case\n                    when niresponsavel is not null and niresponsavel != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'tipo' as column_name,\n            sum(case when tipo is null then 1 else 0 end),\n            sum(case when tipo = '' then 1 else 0 end),\n            sum(case when tipo is not null and tipo != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'tipoResponsabilidade' as column_name,\n            sum(case when tiporesponsabilidade is null then 1 else 0 end),\n            sum(case when tiporesponsabilidade = '' then 1 else 0 end),\n            sum(\n                case\n                    when tiporesponsabilidade is not null and tiporesponsabilidade != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'uf' as column_name,\n            sum(case when uf is null then 1 else 0 end),\n            sum(case when uf = '' then 1 else 0 end),\n            sum(case when uf is not null and uf != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'unidadeMedida' as column_name,\n            sum(case when unidademedida is null then 1 else 0 end),\n            sum(case when unidademedida = '' then 1 else 0 end),\n            sum(\n                case\n                    when unidademedida is not null and unidademedida != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'version' as column_name,\n            sum(case when version is null then 1 else 0 end),\n            sum(case when version = '' then 1 else 0 end),\n            sum(case when version is not null and version != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            '_id' as column_name,\n            sum(case when _id is null then 1 else 0 end),\n            sum(case when _id = '' then 1 else 0 end),\n            sum(case when _id is not null and _id != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            '_rev' as column_name,\n            sum(case when _rev is null then 1 else 0 end),\n            sum(case when _rev = '' then 1 else 0 end),\n            sum(case when _rev is not null and _rev != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n\n        -- --- ARRAY Columns ---\n        select\n            'areas' as column_name,\n            sum(case when areas is null then 1 else 0 end) as null_count,\n            sum(case when array_length(areas) = 0 then 1 else 0 end) as empty_count,\n            sum(\n                case\n                    when areas is not null and array_length(areas) > 0 then 1 else 0\n                end\n            ) as other_count\n        from fonte_extracted\n\n    -- Add a UNION ALL block for every column extracted in fonte_extracted\n    )\n\n-- Step 4: Calculate percentages by joining counts with total count\nselect\n    cc.column_name as key,\n    round(safe_divide(cc.null_count * 100, trc.total_rows), 2) as null_percent,\n    round(safe_divide(cc.empty_count * 100, trc.total_rows), 2) as empty_percent,\n    round(safe_divide(cc.other_count * 100, trc.total_rows), 2) as others_percent  -- Non-null, non-empty\nfrom column_counts as cc\ncross join  -- Joins each row from column_counts with the single row from total_row_count\n    total_row_count as trc\norder by null_percent desc  -- Order by null percentage descending","compiled_path":"target/compiled/models/intermediate/bcadastro/int_bcadastro_nulls_cno.sql","config":{"access":null,"alias":"nulls_cno","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"debug_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":null,"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","intermediate","bcadastro","int_bcadastro_nulls_cno"],"language":"sql","metrics":[],"name":"int_bcadastro_nulls_cno","original_file_path":"models/intermediate/bcadastro/int_bcadastro_nulls_cno.sql","package_name":"queries","path":"models/intermediate/bcadastro/int_bcadastro_nulls_cno.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_cno`","resource_type":"model","schema":"pedrosiqueira__debug_bcadastro","sources":[],"unique_id":"model.queries.int_bcadastro_nulls_cno","unrendered_config":{}},"model.queries.int_bcadastro_nulls_cnpj":{"alias":"nulls_cnpj","checksum":{"checksum":"29725fad02fe13cc3c9ee42a812aaa07503c11e8aa7de64274ac26693b48e44f","name":"SHA256"},"columns":{"empty_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"empty_percent","tags":[]},"key":{"config":{},"constraints":[],"data_type":"STRING not null","meta":{},"name":"key","tags":[]},"null_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"null_percent","tags":[]},"others_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"others_percent","tags":[]}},"compiled":true,"compiled_code":"\n\nwith\n    -- Step 1: Get the total number of rows efficiently\n    total_row_count as (\n        select count(*) as total_rows\n        from `rj-iplanrio.brutos_bcadastro_staging.chcnpj_bcadastros`\n    ),\n    -- Step 2: Parse the JSON and extract fields. Aliases are used for convenience\n    -- within this CTE, but the original JSON key names will be used in the output.\n    fonte_extracted as (\n        select\n            -- Primary key (extracted as STRING)\n            json_value(doc, '$.cnpj') as cnpj,\n\n            -- Foreign keys (extracted as STRING initially)\n            json_value(doc, '$.codigoMunicipio') as codigo_municipio,\n            json_value(doc, '$.codigoPais') as codigo_pais,\n            json_value(doc, '$.naturezaJuridica') as natureza_juridica,\n            json_value(doc, '$.qualificacaoResponsavel') as qualificacao_responsavel,\n            json_value(doc, '$.porteEmpresa') as porte_empresa,\n            json_value(doc, '$.indicadorMatriz') as indicador_matriz,\n            json_value(doc, '$.tipoOrgaoRegistro') as tipo_orgao_registro,\n            json_value(doc, '$.motivoSituacao') as motivo_situacao,\n            json_value(doc, '$.situacaoCadastral') as situacao_cadastral,\n\n            -- Business data (extracted as STRING)\n            json_value(doc, '$.nomeEmpresarial') as nome_empresarial,\n            json_value(doc, '$.nomeFantasia') as nome_fantasia,\n            json_value(doc, '$.capitalSocial') as capital_social,\n            json_value(doc, '$.cnaeFiscal') as cnae_fiscal,\n            json_value(doc, '$.nire') as nire,\n            json_value(doc, '$.cnpjSucedida') as cnpj_sucedida,\n\n            -- Dates (extracted as STRING here, conversion to DATE happens later if\n            -- needed for analysis)\n            json_value(doc, '$.dataInicioAtividade') as data_inicio_atividade,\n            json_value(doc, '$.dataSituacaoCadastral') as data_situacao_cadastral,\n            json_value(doc, '$.dataSituacaoEspecial') as data_situacao_especial,\n            json_value(doc, '$.dataInclusaoResponsavel') as data_inclusao_responsavel,\n\n            -- Status and demographics (extracted as STRING, handling enteFederativo\n            -- logic)\n            json_value(doc, '$.situacaoEspecial') as situacao_especial,\n            case\n                when regexp_contains(json_value(doc, '$.enteFederativo'), r'^[0-9]+$')\n                then json_value(doc, '$.enteFederativo')\n                else upper(json_value(doc, '$.enteFederativo'))\n            end as id_ente_federativo,  -- Analyzing the result of this case\n\n            -- Contact (extracted as STRING)\n            json_value(doc, '$.dddTelefone1') as ddd_telefone_1,\n            json_value(doc, '$.telefone1') as telefone_1,\n            json_value(doc, '$.dddTelefone2') as ddd_telefone_2,\n            json_value(doc, '$.telefone2') as telefone_2,\n            json_value(doc, '$.email') as email,\n\n            -- Address (extracted as STRING)\n            json_value(doc, '$.cep') as endereco_cep,  -- Assuming this corresponds to the $.cep key\n            json_value(doc, '$.uf') as endereco_uf,  -- Assuming this corresponds to the $.uf key\n            json_value(doc, '$.bairro') as endereco_bairro,  -- Assuming this corresponds to the $.bairro key\n            json_value(doc, '$.tipoLogradouro') as endereco_tipo_logradouro,  -- Assuming this corresponds to the $.tipoLogradouro key\n            json_value(doc, '$.logradouro') as endereco_logradouro,  -- Assuming this corresponds to the $.logradouro key\n            json_value(doc, '$.numero') as endereco_numero,  -- Assuming this corresponds to the $.numero key\n            json_value(doc, '$.complemento') as endereco_complemento,  -- Assuming this corresponds to the $.complemento key\n            json_value(doc, '$.nomeCidadeExterior') as endereco_nome_cidade_exterior,  -- Assuming this corresponds to the $.nomeCidadeExterior key\n\n            -- Accountant Information (extracted as STRING)\n            json_value(doc, '$.tipoCrcContadorPF') as tipo_crc_contador_pf,\n            json_value(doc, '$.contadorPJ') as contador_pj,\n            json_value(\n                doc, '$.classificacaoCrcContadorPF'\n            ) as classificacao_crc_contador_pf,\n            json_value(doc, '$.sequencialCrcContadorPF') as sequencial_crc_contador_pf,\n            json_value(doc, '$.contadorPF') as contador_pf,\n            json_value(doc, '$.tipoCrcContadorPJ') as tipo_crc_contador_pj,\n            json_value(\n                doc, '$.classificacaoCrcContadorPJ'\n            ) as classificacao_crc_contador_pj,\n            json_value(doc, '$.ufCrcContadorPJ') as uf_crc_contador_pj,\n            json_value(doc, '$.ufCrcContadorPF') as uf_crc_contador_pf,\n            json_value(doc, '$.sequencialCrcContadorPJ') as sequencial_crc_contador_pj,\n\n            -- Responsible Person (extracted as STRING)\n            json_value(doc, '$.cpfResponsavel') as cpf_responsavel,\n\n            -- Arrays (extracted as ARRAY or NULL)\n            json_extract_array(doc, '$.cnaeSecundarias') as cnae_secundarias,\n            json_extract_array(doc, '$.tiposUnidade') as tipos_unidade,\n            json_extract_array(doc, '$.formasAtuacao') as formas_atuacao,\n            json_extract_array(doc, '$.socios') as socios,\n            json_extract_array(doc, '$.sucessoes') as sucessoes,\n\n            -- Metadata (extracted as STRING, handling version string replace)\n            json_value(doc, '$.timestamp') as timestamp,\n            json_value(doc, '$.language') as language,\n            -- Use the original key name including the '~' if that's what you want\n            -- reported\n            json_value(\n                replace(to_json_string(doc), '~', ''), '$.version'\n            ) as version_extracted,  -- Alias the extracted value\n\n            -- Other potential fields from doc (assuming based on original CTE\n            -- structure)\n            json_value(doc, '$._id') as _id,\n            json_value(doc, '$._rev') as _rev,\n        -- Assuming 'id' extracted from doc maps to key 'id'\n        from `rj-iplanrio.brutos_bcadastro_staging.chcnpj_bcadastros`\n    ),\n\n    -- Step 3: Calculate counts for each column using UNION ALL\n    column_counts as (\n        -- For each column extracted from 'doc' in fonte_extracted, create a SELECT\n        -- statement\n        -- Use the original JSON key name as the 'column_name' literal string\n        -- STRING Columns\n        select\n            'cnpj' as column_name,\n            sum(case when cnpj is null then 1 else 0 end) as null_count,\n            sum(case when cnpj = '' then 1 else 0 end) as empty_count,\n            sum(\n                case when cnpj is not null and cnpj != '' then 1 else 0 end\n            ) as other_count\n        from fonte_extracted\n        union all\n        select\n            'codigoMunicipio' as column_name,\n            sum(case when codigo_municipio is null then 1 else 0 end),\n            sum(case when codigo_municipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when codigo_municipio is not null and codigo_municipio != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codigoPais' as column_name,\n            sum(case when codigo_pais is null then 1 else 0 end),\n            sum(case when codigo_pais = '' then 1 else 0 end),\n            sum(\n                case\n                    when codigo_pais is not null and codigo_pais != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'naturezaJuridica' as column_name,\n            sum(case when natureza_juridica is null then 1 else 0 end),\n            sum(case when natureza_juridica = '' then 1 else 0 end),\n            sum(\n                case\n                    when natureza_juridica is not null and natureza_juridica != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'qualificacaoResponsavel' as column_name,\n            sum(case when qualificacao_responsavel is null then 1 else 0 end),\n            sum(case when qualificacao_responsavel = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        qualificacao_responsavel is not null\n                        and qualificacao_responsavel != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'porteEmpresa' as column_name,\n            sum(case when porte_empresa is null then 1 else 0 end),\n            sum(case when porte_empresa = '' then 1 else 0 end),\n            sum(\n                case\n                    when porte_empresa is not null and porte_empresa != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'indicadorMatriz' as column_name,\n            sum(case when indicador_matriz is null then 1 else 0 end),\n            sum(case when indicador_matriz = '' then 1 else 0 end),\n            sum(\n                case\n                    when indicador_matriz is not null and indicador_matriz != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'tipoOrgaoRegistro' as column_name,\n            sum(case when tipo_orgao_registro is null then 1 else 0 end),\n            sum(case when tipo_orgao_registro = '' then 1 else 0 end),\n            sum(\n                case\n                    when tipo_orgao_registro is not null and tipo_orgao_registro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'motivoSituacao' as column_name,\n            sum(case when motivo_situacao is null then 1 else 0 end),\n            sum(case when motivo_situacao = '' then 1 else 0 end),\n            sum(\n                case\n                    when motivo_situacao is not null and motivo_situacao != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'situacaoCadastral' as column_name,\n            sum(case when situacao_cadastral is null then 1 else 0 end),\n            sum(case when situacao_cadastral = '' then 1 else 0 end),\n            sum(\n                case\n                    when situacao_cadastral is not null and situacao_cadastral != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        -- Analyze the derived id_ente_federativo, report under original key\n        -- 'enteFederativo'\n        select\n            'enteFederativo' as column_name,\n            sum(case when id_ente_federativo is null then 1 else 0 end),\n            sum(case when id_ente_federativo = '' then 1 else 0 end),\n            sum(\n                case\n                    when id_ente_federativo is not null and id_ente_federativo != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeEmpresarial' as column_name,\n            sum(case when nome_empresarial is null then 1 else 0 end),\n            sum(case when nome_empresarial = '' then 1 else 0 end),\n            sum(\n                case\n                    when nome_empresarial is not null and nome_empresarial != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeFantasia' as column_name,\n            sum(case when nome_fantasia is null then 1 else 0 end),\n            sum(case when nome_fantasia = '' then 1 else 0 end),\n            sum(\n                case\n                    when nome_fantasia is not null and nome_fantasia != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'capitalSocial' as column_name,\n            sum(case when capital_social is null then 1 else 0 end),\n            sum(case when capital_social = '' then 1 else 0 end),\n            sum(\n                case\n                    when capital_social is not null and capital_social != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'cnaeFiscal' as column_name,\n            sum(case when cnae_fiscal is null then 1 else 0 end),\n            sum(case when cnae_fiscal = '' then 1 else 0 end),\n            sum(\n                case\n                    when cnae_fiscal is not null and cnae_fiscal != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nire' as column_name,\n            sum(case when nire is null then 1 else 0 end),\n            sum(case when nire = '' then 1 else 0 end),\n            sum(case when nire is not null and nire != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'cnpjSucedida' as column_name,\n            sum(case when cnpj_sucedida is null then 1 else 0 end),\n            sum(case when cnpj_sucedida = '' then 1 else 0 end),\n            sum(\n                case\n                    when cnpj_sucedida is not null and cnpj_sucedida != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n\n        -- Date fields (extracted as strings, analyze as NULL vs NOT NULL)\n        select\n            'dataInicioAtividade' as column_name,\n            sum(\n                case when data_inicio_atividade is null then 1 else 0 end\n            ) as null_count,\n            0 as empty_count,\n            sum(\n                case when data_inicio_atividade is not null then 1 else 0 end\n            ) as other_count\n        from fonte_extracted\n        union all\n        select\n            'dataSituacaoCadastral' as column_name,\n            sum(case when data_situacao_cadastral is null then 1 else 0 end),\n            0 as empty_count,\n            sum(case when data_situacao_cadastral is not null then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'dataSituacaoEspecial' as column_name,\n            sum(case when data_situacao_especial is null then 1 else 0 end),\n            0 as empty_count,\n            sum(case when data_situacao_especial is not null then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'dataInclusaoResponsavel' as column_name,\n            sum(case when data_inclusao_responsavel is null then 1 else 0 end),\n            0 as empty_count,\n            sum(case when data_inclusao_responsavel is not null then 1 else 0 end)\n        from fonte_extracted\n        union all\n\n        -- Remaining String Columns\n        select\n            'situacaoEspecial' as column_name,\n            sum(case when situacao_especial is null then 1 else 0 end),\n            sum(case when situacao_especial = '' then 1 else 0 end),\n            sum(\n                case\n                    when situacao_especial is not null and situacao_especial != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'dddTelefone1' as column_name,\n            sum(case when ddd_telefone_1 is null then 1 else 0 end),\n            sum(case when ddd_telefone_1 = '' then 1 else 0 end),\n            sum(\n                case\n                    when ddd_telefone_1 is not null and ddd_telefone_1 != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'telefone1' as column_name,\n            sum(case when telefone_1 is null then 1 else 0 end),\n            sum(case when telefone_1 = '' then 1 else 0 end),\n            sum(case when telefone_1 is not null and telefone_1 != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'dddTelefone2' as column_name,\n            sum(case when ddd_telefone_2 is null then 1 else 0 end),\n            sum(case when ddd_telefone_2 = '' then 1 else 0 end),\n            sum(\n                case\n                    when ddd_telefone_2 is not null and ddd_telefone_2 != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'telefone2' as column_name,\n            sum(case when telefone_2 is null then 1 else 0 end),\n            sum(case when telefone_2 = '' then 1 else 0 end),\n            sum(case when telefone_2 is not null and telefone_2 != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'email' as column_name,\n            sum(case when email is null then 1 else 0 end),\n            sum(case when email = '' then 1 else 0 end),\n            sum(case when email is not null and email != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        -- Address fields (using original JSON keys)\n        select\n            'cep' as column_name,\n            sum(case when endereco_cep is null then 1 else 0 end),\n            sum(case when endereco_cep = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_cep is not null and endereco_cep != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'uf' as column_name,\n            sum(case when endereco_uf is null then 1 else 0 end),\n            sum(case when endereco_uf = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_uf is not null and endereco_uf != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'bairro' as column_name,\n            sum(case when endereco_bairro is null then 1 else 0 end),\n            sum(case when endereco_bairro = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_bairro is not null and endereco_bairro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'tipoLogradouro' as column_name,\n            sum(case when endereco_tipo_logradouro is null then 1 else 0 end),\n            sum(case when endereco_tipo_logradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        endereco_tipo_logradouro is not null\n                        and endereco_tipo_logradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'logradouro' as column_name,\n            sum(case when endereco_logradouro is null then 1 else 0 end),\n            sum(case when endereco_logradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_logradouro is not null and endereco_logradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'numero' as column_name,\n            sum(case when endereco_numero is null then 1 else 0 end),\n            sum(case when endereco_numero = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_numero is not null and endereco_numero != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'complemento' as column_name,\n            sum(case when endereco_complemento is null then 1 else 0 end),\n            sum(case when endereco_complemento = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_complemento is not null and endereco_complemento != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeCidadeExterior' as column_name,\n            sum(case when endereco_nome_cidade_exterior is null then 1 else 0 end),\n            sum(case when endereco_nome_cidade_exterior = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        endereco_nome_cidade_exterior is not null\n                        and endereco_nome_cidade_exterior != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        -- Accountant Information (using original JSON keys)\n        select\n            'tipoCrcContadorPF' as column_name,\n            sum(case when tipo_crc_contador_pf is null then 1 else 0 end),\n            sum(case when tipo_crc_contador_pf = '' then 1 else 0 end),\n            sum(\n                case\n                    when tipo_crc_contador_pf is not null and tipo_crc_contador_pf != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'contadorPJ' as column_name,\n            sum(case when contador_pj is null then 1 else 0 end),\n            sum(case when contador_pj = '' then 1 else 0 end),\n            sum(\n                case\n                    when contador_pj is not null and contador_pj != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'classificacaoCrcContadorPF' as column_name,\n            sum(case when classificacao_crc_contador_pf is null then 1 else 0 end),\n            sum(case when classificacao_crc_contador_pf = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        classificacao_crc_contador_pf is not null\n                        and classificacao_crc_contador_pf != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'sequencialCrcContadorPF' as column_name,\n            sum(case when sequencial_crc_contador_pf is null then 1 else 0 end),\n            sum(case when sequencial_crc_contador_pf = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        sequencial_crc_contador_pf is not null\n                        and sequencial_crc_contador_pf != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'contadorPF' as column_name,\n            sum(case when contador_pf is null then 1 else 0 end),\n            sum(case when contador_pf = '' then 1 else 0 end),\n            sum(\n                case\n                    when contador_pf is not null and contador_pf != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'tipoCrcContadorPJ' as column_name,\n            sum(case when tipo_crc_contador_pj is null then 1 else 0 end),\n            sum(case when tipo_crc_contador_pj = '' then 1 else 0 end),\n            sum(\n                case\n                    when tipo_crc_contador_pj is not null and tipo_crc_contador_pj != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'classificacaoCrcContadorPJ' as column_name,\n            sum(case when classificacao_crc_contador_pj is null then 1 else 0 end),\n            sum(case when classificacao_crc_contador_pj = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        classificacao_crc_contador_pj is not null\n                        and classificacao_crc_contador_pj != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'ufCrcContadorPJ' as column_name,\n            sum(case when uf_crc_contador_pj is null then 1 else 0 end),\n            sum(case when uf_crc_contador_pj = '' then 1 else 0 end),\n            sum(\n                case\n                    when uf_crc_contador_pj is not null and uf_crc_contador_pj != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'ufCrcContadorPF' as column_name,\n            sum(case when uf_crc_contador_pf is null then 1 else 0 end),\n            sum(case when uf_crc_contador_pf = '' then 1 else 0 end),\n            sum(\n                case\n                    when uf_crc_contador_pf is not null and uf_crc_contador_pf != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'sequencialCrcContadorPJ' as column_name,\n            sum(case when sequencial_crc_contador_pj is null then 1 else 0 end),\n            sum(case when sequencial_crc_contador_pj = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        sequencial_crc_contador_pj is not null\n                        and sequencial_crc_contador_pj != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        -- Responsible Person (using original JSON key)\n        select\n            'cpfResponsavel' as column_name,\n            sum(case when cpf_responsavel is null then 1 else 0 end),\n            sum(case when cpf_responsavel = '' then 1 else 0 end),\n            sum(\n                case\n                    when cpf_responsavel is not null and cpf_responsavel != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n\n        -- Arrays (NULL vs Empty Array vs Non-empty Array) - Using original JSON keys\n        select\n            'cnaeSecundarias' as column_name,\n            sum(case when cnae_secundarias is null then 1 else 0 end) as null_count,\n            sum(\n                case when array_length(cnae_secundarias) = 0 then 1 else 0 end\n            ) as empty_count,\n            sum(\n                case\n                    when\n                        cnae_secundarias is not null\n                        and array_length(cnae_secundarias) > 0\n                    then 1\n                    else 0\n                end\n            ) as other_count\n        from fonte_extracted\n        union all\n        select\n            'tiposUnidade' as column_name,\n            sum(case when tipos_unidade is null then 1 else 0 end),\n            sum(case when array_length(tipos_unidade) = 0 then 1 else 0 end),\n            sum(\n                case\n                    when tipos_unidade is not null and array_length(tipos_unidade) > 0\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'formasAtuacao' as column_name,\n            sum(case when formas_atuacao is null then 1 else 0 end),\n            sum(case when array_length(formas_atuacao) = 0 then 1 else 0 end),\n            sum(\n                case\n                    when formas_atuacao is not null and array_length(formas_atuacao) > 0\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'socios' as column_name,\n            sum(case when socios is null then 1 else 0 end),\n            sum(case when array_length(socios) = 0 then 1 else 0 end),\n            sum(\n                case\n                    when socios is not null and array_length(socios) > 0 then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'sucessoes' as column_name,\n            sum(case when sucessoes is null then 1 else 0 end),\n            sum(case when array_length(sucessoes) = 0 then 1 else 0 end),\n            sum(\n                case\n                    when sucessoes is not null and array_length(sucessoes) > 0\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n\n        -- Metadata (string columns) - Using original JSON keys, report ~version as key\n        select\n            'timestamp' as column_name,\n            sum(case when timestamp is null then 1 else 0 end),\n            sum(case when timestamp = '' then 1 else 0 end),\n            sum(case when timestamp is not null and timestamp != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'language' as column_name,\n            sum(case when language is null then 1 else 0 end),\n            sum(case when language = '' then 1 else 0 end),\n            sum(case when language is not null and language != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        -- Use the original key name '~version' for the column name, but check the\n        -- extracted value\n        select\n            '~version' as column_name,\n            sum(case when version_extracted is null then 1 else 0 end),\n            sum(case when version_extracted = '' then 1 else 0 end),\n            sum(\n                case\n                    when version_extracted is not null and version_extracted != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n\n        -- Other fields from doc (using original JSON keys)\n        select\n            '_id' as column_name,\n            sum(case when _id is null then 1 else 0 end),\n            sum(case when _id = '' then 1 else 0 end),\n            sum(case when _id is not null and _id != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            '_rev' as column_name,\n            sum(case when _rev is null then 1 else 0 end),\n            sum(case when _rev = '' then 1 else 0 end),\n            sum(case when _rev is not null and _rev != '' then 1 else 0 end)\n        from fonte_extracted\n\n    -- UNION ALL blocks for any source columns (like top-level id, key, rev from value)\n    -- are excluded as per the request to use original *JSON* key names from 'doc'.\n    )\n\n-- Step 4: Calculate percentages by joining counts with total count\nselect\n    cc.column_name as key,  -- Use the original JSON key name from column_counts\n    round(safe_divide(cc.null_count * 100, trc.total_rows), 2) as null_percent,\n    round(safe_divide(cc.empty_count * 100, trc.total_rows), 2) as empty_percent,\n    round(safe_divide(cc.other_count * 100, trc.total_rows), 2) as others_percent  -- Non-null, non-empty\nfrom column_counts as cc\ncross join  -- Joins each row from column_counts with the single row from total_row_count\n    total_row_count as trc\norder by null_percent desc  -- Order by null percentage descending","compiled_path":"target/compiled/models/intermediate/bcadastro/int_bcadastro_nulls_cnpj.sql","config":{"access":null,"alias":"nulls_cnpj","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"debug_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":null,"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","intermediate","bcadastro","int_bcadastro_nulls_cnpj"],"language":"sql","metrics":[],"name":"int_bcadastro_nulls_cnpj","original_file_path":"models/intermediate/bcadastro/int_bcadastro_nulls_cnpj.sql","package_name":"queries","path":"models/intermediate/bcadastro/int_bcadastro_nulls_cnpj.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_cnpj`","resource_type":"model","schema":"pedrosiqueira__debug_bcadastro","sources":[],"unique_id":"model.queries.int_bcadastro_nulls_cnpj","unrendered_config":{}},"model.queries.int_bcadastro_nulls_cpf":{"alias":"nulls_cpf","checksum":{"checksum":"1554451ddae99c3a40fd5ec3a70c8ca221cdab7ebd092f0daad093cb9a46dd59","name":"SHA256"},"columns":{"empty_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"empty_percent","tags":[]},"key":{"config":{},"constraints":[],"data_type":"STRING not null","meta":{},"name":"key","tags":[]},"null_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"null_percent","tags":[]},"others_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"others_percent","tags":[]}},"compiled":true,"compiled_code":"\n\nwith\n    -- Step 1: Get the total number of rows efficiently\n    total_row_count as (\n        select count(*) as total_rows\n        from `rj-iplanrio.brutos_bcadastro_staging.chcpf_bcadastros`  -- Target table for CPF\n    ),\n    -- Step 2: Parse the JSON and extract fields. Use aliases for internal CTE use.\n    -- Apply SAFE.PARSE_DATE where appropriate to treat dates as DATE type.\n    fonte_extracted as (\n        select\n            json_value(doc, '$.cpfId') as cpf_id,\n\n            -- Foreign keys (extracted as STRING)\n            json_value(doc, '$.codMunDomic') as cod_mun_domic_raw,\n            json_value(doc, '$.codMunNat') as cod_mun_nat_raw,\n            json_value(doc, '$.codPaisNac') as cod_pais_nac_raw,\n            json_value(doc, '$.codPaisRes') as cod_pais_res_raw,\n            json_value(doc, '$.codNatOcup') as cod_nat_ocup_raw,\n            json_value(doc, '$.codOcup') as cod_ocup_raw,\n            json_value(doc, '$.codUA') as cod_ua_raw,\n\n            -- Person data (extracted as STRING)\n            json_value(doc, '$.nomeContribuinte') as nome,\n            json_value(doc, '$.nomeSocial') as nome_social,\n            json_value(doc, '$.nomeMae') as mae_nome,\n\n            -- Dates (extracted and parsed as DATE or NULL)\n            json_value(doc, '$.dtNasc') as nascimento_data,\n            json_value(doc, '$.dtInscricao') as inscricao_data,\n            json_value(doc, '$.dtUltAtualiz') as atualizacao_data,\n\n            -- Status and demographics (extracted as STRING)\n            json_value(doc, '$.codSitCad') as cod_sit_cad_raw,\n            json_value(doc, '$.codSexo') as cod_sexo_raw,\n            json_value(doc, '$.anoObito') as obito_ano_raw,\n            json_value(doc, '$.indEstrangeiro') as indicativo_estrangeiro_raw,\n            json_value(doc, '$.indResExt') as indicativo_residente_exterior_raw,\n\n            -- Contact (extracted as STRING)\n            json_value(doc, '$.telefone') as telefone,\n            json_value(doc, '$.email') as email,\n\n            -- Address (extracted as STRING)\n            json_value(doc, '$.cep') as endereco_cep,\n            json_value(doc, '$.ufMunDomic') as endereco_uf,\n            json_value(doc, '$.bairro') as endereco_bairro,\n            json_value(doc, '$.tipoLogradouro') as endereco_tipo_logradouro,\n            json_value(doc, '$.logradouro') as endereco_logradouro,\n            json_value(doc, '$.nroLogradouro') as endereco_numero,\n            json_value(doc, '$.complemento') as endereco_complemento,\n            json_value(doc, '$.municipio') as endereco_municipio,\n\n            -- Birth and residence (extracted as STRING)\n            json_value(doc, '$.ufMunNat') as nascimento_uf,\n            json_value(doc, '$.nomePaisNac') as nascimento_pais,\n            json_value(doc, '$.nomePaisRes') as residencia_pais,\n\n            -- Metadata (extracted as STRING, handling version string replace)\n            json_value(doc, '$.anoExerc') as exercicio_ano_raw,\n            json_value(replace(to_json_string(doc), '~', ''), '$.version') as version,  -- Extracted value for ~version\n            json_value(doc, '$.tipo') as tipo,\n            json_value(doc, '$.timestamp') as timestamp,\n\n            -- _id, _rev from doc\n            json_value(doc, '$._id') as _id,\n            json_value(doc, '$._rev') as _rev\n\n        from `rj-iplanrio.brutos_bcadastro_staging.chcpf_bcadastros`\n    ),\n\n    -- Step 3: Calculate counts for each column using UNION ALL.\n    -- Use original JSON key names or source column names as column_name literals.\n    -- Reference the aliased names from fonte_extracted for the CASE logic.\n    column_counts as (\n        -- --- STRING Columns ---\n        select\n            'cpfId' as column_name,\n            sum(case when cpf_id is null then 1 else 0 end) as null_count,\n            sum(case when cpf_id = '' then 1 else 0 end) as empty_count,\n            sum(\n                case when cpf_id is not null and cpf_id != '' then 1 else 0 end\n            ) as other_count\n        from fonte_extracted\n        union all\n        select\n            'codMunDomic' as column_name,\n            sum(case when cod_mun_domic_raw is null then 1 else 0 end),\n            sum(case when cod_mun_domic_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_mun_domic_raw is not null and cod_mun_domic_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codMunNat' as column_name,\n            sum(case when cod_mun_nat_raw is null then 1 else 0 end),\n            sum(case when cod_mun_nat_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_mun_nat_raw is not null and cod_mun_nat_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codPaisNac' as column_name,\n            sum(case when cod_pais_nac_raw is null then 1 else 0 end),\n            sum(case when cod_pais_nac_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_pais_nac_raw is not null and cod_pais_nac_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codPaisRes' as column_name,\n            sum(case when cod_pais_res_raw is null then 1 else 0 end),\n            sum(case when cod_pais_res_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_pais_res_raw is not null and cod_pais_res_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codNatOcup' as column_name,\n            sum(case when cod_nat_ocup_raw is null then 1 else 0 end),\n            sum(case when cod_nat_ocup_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_nat_ocup_raw is not null and cod_nat_ocup_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codOcup' as column_name,\n            sum(case when cod_ocup_raw is null then 1 else 0 end),\n            sum(case when cod_ocup_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_ocup_raw is not null and cod_ocup_raw != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codUA' as column_name,\n            sum(case when cod_ua_raw is null then 1 else 0 end),\n            sum(case when cod_ua_raw = '' then 1 else 0 end),\n            sum(case when cod_ua_raw is not null and cod_ua_raw != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'nomeContribuinte' as column_name,\n            sum(case when nome is null then 1 else 0 end),\n            sum(case when nome = '' then 1 else 0 end),\n            sum(case when nome is not null and nome != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'nomeSocial' as column_name,\n            sum(case when nome_social is null then 1 else 0 end),\n            sum(case when nome_social = '' then 1 else 0 end),\n            sum(\n                case\n                    when nome_social is not null and nome_social != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomeMae' as column_name,\n            sum(case when mae_nome is null then 1 else 0 end),\n            sum(case when mae_nome = '' then 1 else 0 end),\n            sum(case when mae_nome is not null and mae_nome != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'codSitCad' as column_name,\n            sum(case when cod_sit_cad_raw is null then 1 else 0 end),\n            sum(case when cod_sit_cad_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_sit_cad_raw is not null and cod_sit_cad_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'codSexo' as column_name,\n            sum(case when cod_sexo_raw is null then 1 else 0 end),\n            sum(case when cod_sexo_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when cod_sexo_raw is not null and cod_sexo_raw != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'anoObito' as column_name,\n            sum(case when obito_ano_raw is null then 1 else 0 end),\n            sum(case when obito_ano_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when obito_ano_raw is not null and obito_ano_raw != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'indEstrangeiro' as column_name,\n            sum(case when indicativo_estrangeiro_raw is null then 1 else 0 end),\n            sum(case when indicativo_estrangeiro_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        indicativo_estrangeiro_raw is not null\n                        and indicativo_estrangeiro_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'indResExt' as column_name,\n            sum(case when indicativo_residente_exterior_raw is null then 1 else 0 end),\n            sum(case when indicativo_residente_exterior_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        indicativo_residente_exterior_raw is not null\n                        and indicativo_residente_exterior_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'telefone' as column_name,\n            sum(case when telefone is null then 1 else 0 end),\n            sum(case when telefone = '' then 1 else 0 end),\n            sum(case when telefone is not null and telefone != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'email' as column_name,\n            sum(case when email is null then 1 else 0 end),\n            sum(case when email = '' then 1 else 0 end),\n            sum(case when email is not null and email != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'cep' as column_name,\n            sum(case when endereco_cep is null then 1 else 0 end),\n            sum(case when endereco_cep = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_cep is not null and endereco_cep != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'ufMunDomic' as column_name,\n            sum(case when endereco_uf is null then 1 else 0 end),\n            sum(case when endereco_uf = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_uf is not null and endereco_uf != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'bairro' as column_name,\n            sum(case when endereco_bairro is null then 1 else 0 end),\n            sum(case when endereco_bairro = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_bairro is not null and endereco_bairro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'tipoLogradouro' as column_name,\n            sum(case when endereco_tipo_logradouro is null then 1 else 0 end),\n            sum(case when endereco_tipo_logradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when\n                        endereco_tipo_logradouro is not null\n                        and endereco_tipo_logradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'logradouro' as column_name,\n            sum(case when endereco_logradouro is null then 1 else 0 end),\n            sum(case when endereco_logradouro = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_logradouro is not null and endereco_logradouro != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nroLogradouro' as column_name,\n            sum(case when endereco_numero is null then 1 else 0 end),\n            sum(case when endereco_numero = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_numero is not null and endereco_numero != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'complemento' as column_name,\n            sum(case when endereco_complemento is null then 1 else 0 end),\n            sum(case when endereco_complemento = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_complemento is not null and endereco_complemento != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'municipio' as column_name,\n            sum(case when endereco_municipio is null then 1 else 0 end),\n            sum(case when endereco_municipio = '' then 1 else 0 end),\n            sum(\n                case\n                    when endereco_municipio is not null and endereco_municipio != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'ufMunNat' as column_name,\n            sum(case when nascimento_uf is null then 1 else 0 end),\n            sum(case when nascimento_uf = '' then 1 else 0 end),\n            sum(\n                case\n                    when nascimento_uf is not null and nascimento_uf != '' then 1 else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomePaisNac' as column_name,\n            sum(case when nascimento_pais is null then 1 else 0 end),\n            sum(case when nascimento_pais = '' then 1 else 0 end),\n            sum(\n                case\n                    when nascimento_pais is not null and nascimento_pais != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'nomePaisRes' as column_name,\n            sum(case when residencia_pais is null then 1 else 0 end),\n            sum(case when residencia_pais = '' then 1 else 0 end),\n            sum(\n                case\n                    when residencia_pais is not null and residencia_pais != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            'anoExerc' as column_name,\n            sum(case when exercicio_ano_raw is null then 1 else 0 end),\n            sum(case when exercicio_ano_raw = '' then 1 else 0 end),\n            sum(\n                case\n                    when exercicio_ano_raw is not null and exercicio_ano_raw != ''\n                    then 1\n                    else 0\n                end\n            )\n        from fonte_extracted\n        union all\n        select\n            '~version' as column_name,\n            sum(case when version is null then 1 else 0 end),\n            sum(case when version = '' then 1 else 0 end),\n            sum(case when version is not null and version != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'tipo' as column_name,\n            sum(case when tipo is null then 1 else 0 end),\n            sum(case when tipo = '' then 1 else 0 end),\n            sum(case when tipo is not null and tipo != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'timestamp' as column_name,\n            sum(case when timestamp is null then 1 else 0 end),\n            sum(case when timestamp = '' then 1 else 0 end),\n            sum(case when timestamp is not null and timestamp != '' then 1 else 0 end)\n        from fonte_extracted\n        union all  -- 'rev' from value column\n        select\n            '_id' as column_name,\n            sum(case when _id is null then 1 else 0 end),\n            sum(case when _id = '' then 1 else 0 end),\n            sum(case when _id is not null and _id != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            '_rev' as column_name,\n            sum(case when _rev is null then 1 else 0 end),\n            sum(case when _rev = '' then 1 else 0 end),\n            sum(case when _rev is not null and _rev != '' then 1 else 0 end)\n        from fonte_extracted\n        union all\n\n        -- --- DATE Columns (NULL vs NOT NULL only, empty_count is 0) ---\n        select\n            'dtNasc' as column_name,\n            sum(case when nascimento_data is null then 1 else 0 end) as null_count,\n            0 as empty_count,\n            sum(case when nascimento_data is not null then 1 else 0 end) as other_count\n        from fonte_extracted\n        union all\n        select\n            'dtInscricao' as column_name,\n            sum(case when inscricao_data is null then 1 else 0 end),\n            0 as empty_count,\n            sum(case when inscricao_data is not null then 1 else 0 end)\n        from fonte_extracted\n        union all\n        select\n            'dtUltAtualiz' as column_name,\n            sum(case when atualizacao_data is null then 1 else 0 end),\n            0 as empty_count,\n            sum(case when atualizacao_data is not null then 1 else 0 end)\n        from fonte_extracted\n\n    -- UNION ALL blocks for other types (ARRAY, STRUCT, etc.) would go here if present\n    -- in the extracted list\n    -- No Arrays or complex structs in the user's provided list for this query.\n    )\n\n-- Step 4: Calculate percentages by joining counts with total count\nselect\n    cc.column_name as key,  -- Use the original JSON key name from column_counts\n    round(safe_divide(cc.null_count * 100, trc.total_rows), 2) as null_percent,\n    round(safe_divide(cc.empty_count * 100, trc.total_rows), 2) as empty_percent,\n    round(safe_divide(cc.other_count * 100, trc.total_rows), 2) as others_percent  -- Non-null, non-empty\nfrom column_counts as cc\ncross join  -- Joins each row from column_counts with the single row from total_row_count\n    total_row_count as trc\norder by null_percent desc  -- Order by null percentage descending","compiled_path":"target/compiled/models/intermediate/bcadastro/int_bcadastro_nulls_cpf.sql","config":{"access":null,"alias":"nulls_cpf","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"debug_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":null,"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"fqn":["queries","intermediate","bcadastro","int_bcadastro_nulls_cpf"],"language":"sql","metrics":[],"name":"int_bcadastro_nulls_cpf","original_file_path":"models/intermediate/bcadastro/int_bcadastro_nulls_cpf.sql","package_name":"queries","path":"models/intermediate/bcadastro/int_bcadastro_nulls_cpf.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_cpf`","resource_type":"model","schema":"pedrosiqueira__debug_bcadastro","sources":[],"unique_id":"model.queries.int_bcadastro_nulls_cpf","unrendered_config":{}},"model.queries.mart_bcadastro_nulls_consolidado":{"alias":"nulls_consolidado","checksum":{"checksum":"0caf12a2c656200d0173aa28142b0e185d4eb1c66cc8b9cff52f26a6ba678d90","name":"SHA256"},"columns":{"empty_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"empty_percent","tags":[]},"key":{"config":{},"constraints":[],"data_type":"STRING not null","meta":{},"name":"key","tags":[]},"null_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"null_percent","tags":[]},"others_percent":{"config":{},"constraints":[],"data_type":"FLOAT64","meta":{},"name":"others_percent","tags":[]},"table":{"config":{},"constraints":[],"data_type":"STRING not null","meta":{},"name":"table","tags":[]}},"compiled":true,"compiled_code":"\n\nselect 'cpf' as table, *\nfrom `rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_cpf`\nunion all\nselect 'cnpj' as table, *\nfrom `rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_cnpj`\nunion all\nselect 'cno' as table, *\nfrom `rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_cno`\nunion all\nselect 'caepf' as table, *\nfrom `rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_caepf`\n","compiled_path":"target/compiled/models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","config":{"access":null,"alias":"nulls_consolidado","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"debug_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":null,"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["model.queries.int_bcadastro_nulls_cpf","model.queries.int_bcadastro_nulls_cnpj","model.queries.int_bcadastro_nulls_cno","model.queries.int_bcadastro_nulls_caepf"],"nodes_with_ref_location":[["model.queries.int_bcadastro_nulls_cpf",{"col":6,"expanded":null,"file":"models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","index":154,"line":10}],["model.queries.int_bcadastro_nulls_cnpj",{"col":6,"expanded":null,"file":"models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","index":232,"line":13}],["model.queries.int_bcadastro_nulls_cno",{"col":6,"expanded":null,"file":"models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","index":310,"line":16}],["model.queries.int_bcadastro_nulls_caepf",{"col":6,"expanded":null,"file":"models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","index":389,"line":19}]]},"fqn":["queries","mart","bcadastro","mart_bcadastro_nulls_consolidado"],"language":"sql","metrics":[],"name":"mart_bcadastro_nulls_consolidado","original_file_path":"models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","package_name":"queries","patch_path":"models/mart/bcadastro/_schema.yml","path":"models/mart/bcadastro/mart_bcadastro_nulls_consolidado.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"int_bcadastro_nulls_cpf"},{"name":"int_bcadastro_nulls_cnpj"},{"name":"int_bcadastro_nulls_cno"},{"name":"int_bcadastro_nulls_caepf"}],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__debug_bcadastro`.`nulls_consolidado`","resource_type":"model","schema":"pedrosiqueira__debug_bcadastro","sources":[],"unique_id":"model.queries.mart_bcadastro_nulls_consolidado","unrendered_config":{}},"model.queries.raw_base_bcadastro_chcaepf":{"alias":"chcaepf_bcadastros_parsed","checksum":{"checksum":"cb6ad3dec5465ce14851ac67af33b8251178a2d9d6e9c655c6783755a5d6e195","name":"SHA256"},"columns":{"_id":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"_id","tags":[]},"_rev":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"_rev","tags":[]},"airbyte":{"config":{},"constraints":[],"data_type":"STRUCT<raw_id STRING, extracted_at TIMESTAMP, generation_id INT64, changes STRING, sync_id STRING>","meta":{},"name":"airbyte","tags":[]},"bairro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"bairro","tags":[]},"cei":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cei","tags":[]},"cep":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cep","tags":[]},"cnaes":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cnaes","tags":[]},"codAtividade":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codAtividade","tags":[]},"codMotivoSituacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codMotivoSituacao","tags":[]},"codMunicipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codMunicipio","tags":[]},"codOrgaoCpf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codOrgaoCpf","tags":[]},"codOrgaoMunicipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codOrgaoMunicipio","tags":[]},"codQualificacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codQualificacao","tags":[]},"codSituacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codSituacao","tags":[]},"codSituacaoCpf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codSituacaoCpf","tags":[]},"codTipoContribuinte":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codTipoContribuinte","tags":[]},"complemento":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"complemento","tags":[]},"cpf_particao":{"config":{},"constraints":[],"data_type":"INT64","meta":{},"name":"cpf_particao","tags":[]},"dataInicioAtividade":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dataInicioAtividade","tags":[]},"dataSituacao":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dataSituacao","tags":[]},"emailContato":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"emailContato","tags":[]},"language":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"language","tags":[]},"logradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"logradouro","tags":[]},"nomeAtividade":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeAtividade","tags":[]},"nomeCpf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeCpf","tags":[]},"nomeMotivoSituacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeMotivoSituacao","tags":[]},"nomeMunicipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeMunicipio","tags":[]},"nomeQualificacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeQualificacao","tags":[]},"nomeSituacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeSituacao","tags":[]},"nomeSituacaoCpf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeSituacaoCpf","tags":[]},"nomeTipoContribuinte":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeTipoContribuinte","tags":[]},"nroAepf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nroAepf","tags":[]},"nroAepfCompleto":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nroAepfCompleto","tags":[]},"nroCpf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nroCpf","tags":[]},"numeroLogradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"numeroLogradouro","tags":[]},"telefoneContato":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"telefoneContato","tags":[]},"timestamp":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"timestamp","tags":[]},"tipo":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipo","tags":[]},"ufMunicipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"ufMunicipio","tags":[]},"version":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"version","tags":[]}},"compiled":true,"compiled_code":"-- tabela de CAEPF - Cadastro de Atividade Econômica da Pessoa Física\n\n\n\nwith\n    fonte as (\n        select *\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`chcaepf_bcadastros`\n\n        \n            where\n                timestamp(_airbyte_extracted_at)\n                >= timestamp_sub(current_timestamp(), interval 3 day)\n        \n    ),\n\n    fonte_parseada as (\n        select\n            -- Campos extraídos do JSON conforme a imagem fornecida\n            nullif(json_value(doc, '$.bairro'), '') as bairro,\n            nullif(json_value(doc, '$.cei'), '') as cei,\n            nullif(json_value(doc, '$.cep'), '') as cep,\n            nullif(json_value(doc, '$.cnaes'), '') as cnaes,\n            nullif(json_value(doc, '$.codAtividade'), '') as codAtividade,\n            nullif(json_value(doc, '$.codMotivoSituacao'), '') as codMotivoSituacao,\n            nullif(json_value(doc, '$.codMunicipio'), '') as codMunicipio,\n            nullif(json_value(doc, '$.codOrgaoCpf'), '') as codOrgaoCpf,\n            nullif(json_value(doc, '$.codOrgaoMunicipio'), '') as codOrgaoMunicipio,\n            nullif(json_value(doc, '$.codQualificacao'), '') as codQualificacao,\n            nullif(json_value(doc, '$.codSituacao'), '') as codSituacao,\n            nullif(json_value(doc, '$.codSituacaoCpf'), '') as codSituacaoCpf,\n            nullif(json_value(doc, '$.codTipoContribuinte'), '') as codTipoContribuinte,\n            nullif(json_value(doc, '$.complemento'), '') as complemento,\n            safe.parse_date(\n                '%Y-%m-%d', nullif(json_value(doc, '$.dataInicioAtividade'), '')\n            ) as dataInicioAtividade,\n            safe.parse_date(\n                '%Y-%m-%d', nullif(json_value(doc, '$.dataSituacao'), '')\n            ) as dataSituacao,\n            nullif(json_value(doc, '$.emailContato'), '') as emailContato,\n            nullif(json_value(doc, '$.language'), '') as language,\n            nullif(json_value(doc, '$.logradouro'), '') as logradouro,\n            nullif(json_value(doc, '$.nomeAtividade'), '') as nomeAtividade,\n            nullif(json_value(doc, '$.nomeCpf'), '') as nomeCpf,\n            nullif(json_value(doc, '$.nomeMotivoSituacao'), '') as nomeMotivoSituacao,\n            nullif(json_value(doc, '$.nomeMunicipio'), '') as nomeMunicipio,\n            nullif(json_value(doc, '$.nomeQualificacao'), '') as nomeQualificacao,\n            nullif(json_value(doc, '$.nomeSituacao'), '') as nomeSituacao,\n            nullif(json_value(doc, '$.nomeSituacaoCpf'), '') as nomeSituacaoCpf,\n            nullif(json_value(doc, '$.nomeTipoContribuinte'), '') as nomeTipoContribuinte,\n            nullif(json_value(doc, '$.nroAepf'), '') as nroAepf,\n            nullif(json_value(doc, '$.nroAepfCompleto'), '') as nroAepfCompleto,\n            nullif(json_value(doc, '$.nroCpf'), '') as nroCpf,\n            nullif(json_value(doc, '$.numeroLogradouro'), '') as numeroLogradouro,\n            nullif(json_value(doc, '$.telefoneContato'), '') as telefoneContato,\n            nullif(json_value(doc, '$.timestamp'), '') as timestamp,\n            nullif(json_value(doc, '$.tipo'), '') as tipo,\n            nullif(json_value(doc, '$.ufMunicipio'), '') as ufMunicipio,\n            nullif(json_value(doc, '$.version'), '') as version,\n            nullif(json_value(doc, '$._id'), '') as _id,\n            nullif(json_value(doc, '$._rev'), '') as _rev,\n\n            -- Airbyte fields\n            struct(\n                _airbyte_raw_id as raw_id,\n                _airbyte_extracted_at as extracted_at,\n                _airbyte_generation_id as generation_id,\n                nullif(json_value(_airbyte_meta, '$.changes'), \"\") as changes,\n                nullif(json_value(_airbyte_meta, '$.sync_id'), \"\") as sync_id\n            ) as airbyte,\n\n            \n        from fonte\n    ),\n\n    dedup as (\n        select *,\n            -- Partition by cpf\n            cast(nroCpf as int64) as cpf_particao,\n\n        from fonte_parseada\n        qualify\n            row_number() over (partition by nroCpf order by airbyte.extracted_at desc)\n            = 1\n    )\n\nselect *\nfrom dedup","compiled_path":"target/compiled/models/raw/bcadastro/base/raw_base_bcadastro_chcaepf.sql","config":{"access":null,"alias":"chcaepf_bcadastros_parsed","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"partition_by":{"copy_partitions":false,"data_type":"int64","field":"cpf_particao","range":{"end":100000000000,"interval":34722222,"start":0},"time_ingestion_partitioning":false},"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.chcaepf_bcadastros"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.chcaepf_bcadastros",{"col":14,"expanded":null,"file":"models/raw/bcadastro/base/raw_base_bcadastro_chcaepf.sql","index":507,"line":23}]]},"fqn":["queries","raw","bcadastro","base","raw_base_bcadastro_chcaepf"],"language":"sql","metrics":[],"name":"raw_base_bcadastro_chcaepf","original_file_path":"models/raw/bcadastro/base/raw_base_bcadastro_chcaepf.sql","package_name":"queries","path":"models/raw/bcadastro/base/raw_base_bcadastro_chcaepf.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro_staging`.`chcaepf_bcadastros_parsed`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro_staging","sources":[["brutos_bcadastro_staging","chcaepf_bcadastros"]],"unique_id":"model.queries.raw_base_bcadastro_chcaepf","unrendered_config":{}},"model.queries.raw_base_bcadastro_chcno":{"alias":"chcno_bcadastros_parsed","checksum":{"checksum":"f8cc97be796f5fcc46bdcdc722760ba7f6141dd448f9a87bfd6322a2288c119f","name":"SHA256"},"columns":{"_id":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"_id","tags":[]},"_rev":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"_rev","tags":[]},"airbyte":{"config":{},"constraints":[],"data_type":"STRUCT<raw_id STRING, extracted_at TIMESTAMP, generation_id INT64, changes STRING, sync_id STRING>","meta":{},"name":"airbyte","tags":[]},"areas":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"areas","tags":[]},"art":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"art","tags":[]},"bairro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"bairro","tags":[]},"cadastromobiliario":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cadastromobiliario","tags":[]},"cep":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cep","tags":[]},"cib":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cib","tags":[]},"cno":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cno","tags":[]},"cno_particao":{"config":{},"constraints":[],"data_type":"INT64","meta":{},"name":"cno_particao","tags":[]},"cnovinculado":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cnovinculado","tags":[]},"codigomunicipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codigomunicipio","tags":[]},"complemento":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"complemento","tags":[]},"datainicioobra":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"datainicioobra","tags":[]},"datainicioresponsabilidade":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"datainicioresponsabilidade","tags":[]},"datasituacao":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"datasituacao","tags":[]},"id_doc":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"id_doc","tags":[]},"logradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"logradouro","tags":[]},"municipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"municipio","tags":[]},"niresponsavel":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"niresponsavel","tags":[]},"numerologradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"numerologradouro","tags":[]},"rrt":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"rrt","tags":[]},"situacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"situacao","tags":[]},"timestamp":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"timestamp","tags":[]},"tipo":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipo","tags":[]},"tipologradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipologradouro","tags":[]},"tiporesponsabilidade":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tiporesponsabilidade","tags":[]},"uf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"uf","tags":[]},"unidademedida":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"unidademedida","tags":[]},"valormedida":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"valormedida","tags":[]},"version":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"version","tags":[]}},"compiled":true,"compiled_code":"-- tabela de CNO - Cadastro Nacional de Obras\n\n\n\nwith\n    fonte as (\n        select *\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`chcno_bcadastros`\n\n        \n            where\n                timestamp(_airbyte_extracted_at)\n                >= timestamp_sub(current_timestamp(), interval 3 day)\n        \n    ),\n\n    fonte_parseada as (\n        select\n            -- Campos extraídos do JSON conforme a imagem fornecida\n            nullif(json_value(doc, '$.areas'), '') as areas,\n            nullif(json_value(doc, '$.art'), '') as art,\n            nullif(json_value(doc, '$.bairro'), '') as bairro,\n            nullif(json_value(doc, '$.cadastromobiliario'), '') as cadastromobiliario,\n            nullif(json_value(doc, '$.cep'), '') as cep,\n            nullif(json_value(doc, '$.cib'), '') as cib,\n            nullif(json_value(doc, '$.cno'), '') as cno,\n            nullif(json_value(doc, '$.cnoVinculado'), '') as cnovinculado,\n            nullif(json_value(doc, '$.codigoMunicipio'), '') as codigomunicipio,\n            nullif(json_value(doc, '$.complemento'), '') as complemento,\n            safe.parse_date(\n                '%Y-%m-%d', nullif(json_value(doc, '$.dataInicioObra'), '')\n            ) as datainicioobra,\n            safe.parse_date(\n                '%Y-%m-%d', nullif(json_value(doc, '$.dataInicioResponsabilidade'), '')\n            ) as datainicioresponsabilidade,\n            safe.parse_date(\n                '%Y-%m-%d', nullif(json_value(doc, '$.dataSituacao'), '')\n            ) as datasituacao,\n            nullif(json_value(doc, '$.id_doc'), '') as id_doc,\n            nullif(json_value(doc, '$.logradouro'), '') as logradouro,\n            nullif(json_value(doc, '$.municipio'), '') as municipio,\n            nullif(json_value(doc, '$.niResponsavel'), '') as niresponsavel,\n            nullif(json_value(doc, '$.numeroLogradouro'), '') as numerologradouro,\n            nullif(json_value(doc, '$._rev'), '') as _rev,\n            nullif(json_value(doc, '$.rrt'), '') as rrt,\n            nullif(json_value(doc, '$.situacao'), '') as situacao,\n            nullif(json_value(doc, '$.timestamp'), '') as timestamp,\n            nullif(json_value(doc, '$.tipo'), '') as tipo,\n            nullif(json_value(doc, '$.tipoLogradouro'), '') as tipologradouro,\n            nullif(\n                json_value(doc, '$.tipoResponsabilidade'), ''\n            ) as tiporesponsabilidade,\n            nullif(json_value(doc, '$.uf'), '') as uf,\n            nullif(json_value(doc, '$.unidadeMedida'), '') as unidademedida,\n            nullif(json_value(doc, '$.valorMedida'), '') as valormedida,\n            nullif(json_value(doc, '$.version'), '') as version,\n            nullif(json_value(doc, '$._id'), '') as _id,\n\n            -- Airbyte fields\n            struct(\n                _airbyte_raw_id as raw_id,\n                _airbyte_extracted_at as extracted_at,\n                _airbyte_generation_id as generation_id,\n                nullif(json_value(_airbyte_meta, '$.changes'), \"\") as changes,\n                nullif(json_value(_airbyte_meta, '$.sync_id'), \"\") as sync_id\n            ) as airbyte,\n        from fonte\n    ),\n\n    dedup as (\n        select *,\n        -- Partition by cno\n            cast(cno as int64) as cno_particao,\n        from fonte_parseada\n        qualify\n            row_number() over (partition by cno order by airbyte.extracted_at desc) = 1\n    )\n\nselect *\nfrom dedup","compiled_path":"target/compiled/models/raw/bcadastro/base/raw_base_bcadastro_chcno.sql","config":{"access":null,"alias":"chcno_bcadastros_parsed","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.chcno_bcadastros"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.chcno_bcadastros",{"col":14,"expanded":null,"file":"models/raw/bcadastro/base/raw_base_bcadastro_chcno.sql","index":236,"line":14}]]},"fqn":["queries","raw","bcadastro","base","raw_base_bcadastro_chcno"],"language":"sql","metrics":[],"name":"raw_base_bcadastro_chcno","original_file_path":"models/raw/bcadastro/base/raw_base_bcadastro_chcno.sql","package_name":"queries","path":"models/raw/bcadastro/base/raw_base_bcadastro_chcno.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro_staging`.`chcno_bcadastros_parsed`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro_staging","sources":[["brutos_bcadastro_staging","chcno_bcadastros"]],"unique_id":"model.queries.raw_base_bcadastro_chcno","unrendered_config":{}},"model.queries.raw_base_bcadastro_chcnpj":{"alias":"chcnpj_bcadastros_parsed","checksum":{"checksum":"e032195eda3d27617518da294c1e751ba3afdc95dde3bf8de9d3341f67c7fdf0","name":"SHA256"},"columns":{"airbyte":{"config":{},"constraints":[],"data_type":"STRUCT<raw_id STRING, extracted_at TIMESTAMP, generation_id INT64, changes STRING, sync_id STRING>","meta":{},"name":"airbyte","tags":[]},"bairro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"bairro","tags":[]},"classificacaoCrcContadorPF":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"classificacaoCrcContadorPF","tags":[]},"classificacaoCrcContadorPJ":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"classificacaoCrcContadorPJ","tags":[]},"cnae":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cnae","tags":[]},"cnaeSecundarias":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cnaeSecundarias","tags":[]},"cnpj":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cnpj","tags":[]},"cnpjSucedida":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cnpjSucedida","tags":[]},"cnpj_particao":{"config":{},"constraints":[],"data_type":"INT64","meta":{},"name":"cnpj_particao","tags":[]},"codMunDomic":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codMunDomic","tags":[]},"codMunNat":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codMunNat","tags":[]},"codNatOcup":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codNatOcup","tags":[]},"codOcup":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codOcup","tags":[]},"codPaisNac":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codPaisNac","tags":[]},"codPaisRes":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codPaisRes","tags":[]},"codSexo":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codSexo","tags":[]},"codSitCad":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codSitCad","tags":[]},"codUA":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codUA","tags":[]},"codigoMunicipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codigoMunicipio","tags":[]},"codigoPais":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codigoPais","tags":[]},"complemento":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"complemento","tags":[]},"contadorPF":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"contadorPF","tags":[]},"contadorPJ":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"contadorPJ","tags":[]},"cpfResponsavel":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cpfResponsavel","tags":[]},"dataInclusaoResponsavel":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dataInclusaoResponsavel","tags":[]},"dataInicioAtividade":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dataInicioAtividade","tags":[]},"dataSituacaoCadastral":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dataSituacaoCadastral","tags":[]},"dataSituacaoEspecial":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dataSituacaoEspecial","tags":[]},"dddTelefone1":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"dddTelefone1","tags":[]},"dddTelefone2":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"dddTelefone2","tags":[]},"email":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"email","tags":[]},"enteFederativo":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"enteFederativo","tags":[]},"formasAtuacao":{"config":{},"constraints":[],"data_type":"ARRAY<JSON>","meta":{},"name":"formasAtuacao","tags":[]},"indicadorMatriz":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"indicadorMatriz","tags":[]},"language":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"language","tags":[]},"logradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"logradouro","tags":[]},"motivoSituacao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"motivoSituacao","tags":[]},"naturezaJuridica":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"naturezaJuridica","tags":[]},"nire":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nire","tags":[]},"nomeCidadeExterior":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeCidadeExterior","tags":[]},"nomeEmpresarial":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeEmpresarial","tags":[]},"nomeFantasia":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeFantasia","tags":[]},"numero":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"numero","tags":[]},"porteEmpresa":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"porteEmpresa","tags":[]},"qualificacaoResponsavel":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"qualificacaoResponsavel","tags":[]},"sequencialCrcContadorPF":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"sequencialCrcContadorPF","tags":[]},"sequencialCrcContadorPJ":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"sequencialCrcContadorPJ","tags":[]},"situacaoCadastral":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"situacaoCadastral","tags":[]},"situacaoEspecial":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"situacaoEspecial","tags":[]},"socios":{"config":{},"constraints":[],"data_type":"ARRAY<JSON>","meta":{},"name":"socios","tags":[]},"sucessoes":{"config":{},"constraints":[],"data_type":"ARRAY<JSON>","meta":{},"name":"sucessoes","tags":[]},"telefone1":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"telefone1","tags":[]},"telefone2":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"telefone2","tags":[]},"timestamp":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"timestamp","tags":[]},"tipoCrcContadorPF":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipoCrcContadorPF","tags":[]},"tipoCrcContadorPJ":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipoCrcContadorPJ","tags":[]},"tipoLogradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipoLogradouro","tags":[]},"tipoOrgaoRegistro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipoOrgaoRegistro","tags":[]},"tiposUnidade":{"config":{},"constraints":[],"data_type":"ARRAY<JSON>","meta":{},"name":"tiposUnidade","tags":[]},"uf":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"uf","tags":[]},"ufCrcContadorPF":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"ufCrcContadorPF","tags":[]},"ufCrcContadorPJ":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"ufCrcContadorPJ","tags":[]},"version":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"version","tags":[]}},"compiled":true,"compiled_code":"-- tabela de CNPJ - Cadastro de Pessoas Jurídicas\n\n\n\n\nwith\n    fonte as (\n        select *\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`chcnpj_bcadastros`\n\n        \n            where\n                timestamp(_airbyte_extracted_at)\n                >= timestamp_sub(current_timestamp(), interval 3 day)\n        \n    ),\n\n    fonte_parseada as (\n        select\n            -- Alphabetically ordered fields\n            nullif(json_value(doc, '$.bairro'), '') as bairro,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.classificacaoCrcContadorPF'), '') as int64\n                ) as string\n            ) as classificacaoCrcContadorPF,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.classificacaoCrcContadorPJ'), '') as int64\n                ) as string\n            ) as classificacaoCrcContadorPJ,\n            nullif(json_value(doc, '$.cnae'), '') as cnae,\n            nullif(json_value(doc, '$.cnaeSecundarias'), '') as cnaeSecundarias,\n            nullif(json_value(doc, '$.cnpj'), '') as cnpj,\n            nullif(json_value(doc, '$.cnpjSucedida'), '') as cnpjSucedida,\n            nullif(json_value(doc, '$.codMunDomic'), '') as codMunDomic,\n            nullif(json_value(doc, '$.codMunNat'), '') as codMunNat,\n            nullif(json_value(doc, '$.codNatOcup'), '') as codNatOcup,\n            nullif(json_value(doc, '$.codOcup'), '') as codOcup,\n            nullif(json_value(doc, '$.codPaisNac'), '') as codPaisNac,\n            nullif(json_value(doc, '$.codPaisRes'), '') as codPaisRes,\n            nullif(json_value(doc, '$.codSexo'), '') as codSexo,\n            nullif(json_value(doc, '$.codSitCad'), '') as codSitCad,\n            nullif(json_value(doc, '$.codUA'), '') as codUA,\n            nullif(json_value(doc, '$.codigoMunicipio'), '') as codigoMunicipio,\n            nullif(json_value(doc, '$.codigoPais'), '') as codigoPais,\n            nullif(json_value(doc, '$.complemento'), '') as complemento,\n            nullif(json_value(doc, '$.contadorPF'), '') as contadorPF,\n            nullif(json_value(doc, '$.contadorPJ'), '') as contadorPJ,\n            nullif(json_value(doc, '$.cpfResponsavel'), '') as cpfResponsavel,\n            nullif(json_value(doc, '$.dddTelefone1'), '') as dddTelefone1,\n            nullif(json_value(doc, '$.dddTelefone2'), '') as dddTelefone2,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataInclusaoResponsavel'), '')\n            ) as dataInclusaoResponsavel,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataInicioAtividade'), '')\n            ) as dataInicioAtividade,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataSituacaoCadastral'), '')\n            ) as dataSituacaoCadastral,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataSituacaoEspecial'), '')\n            ) as dataSituacaoEspecial,\n            nullif(json_value(doc, '$.email'), '') as email,\n            case\n                when regexp_contains(json_value(doc, '$.enteFederativo'), r'^[0-9]+$')\n                then\n                    cast(\n                        cast(\n                            nullif(json_value(doc, '$.enteFederativo'), '') as int64\n                        ) as string\n                    )\n                else upper(nullif(json_value(doc, '$.enteFederativo'), ''))\n            end as enteFederativo,\n            json_extract_array(doc, '$.formasAtuacao') as formasAtuacao,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.indicadorMatriz'), '') as int64\n                ) as string\n            ) as indicadorMatriz,\n            nullif(json_value(doc, '$.language'), '') as language,\n            nullif(json_value(doc, '$.logradouro'), '') as logradouro,\n            cast(\n                cast(nullif(json_value(doc, '$.motivoSituacao'), '') as int64) as string\n            ) as motivoSituacao,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.naturezaJuridica'), '') as int64\n                ) as string\n            ) as naturezaJuridica,\n            nullif(json_value(doc, '$.nire'), '') as nire,\n            nullif(json_value(doc, '$.nomeCidadeExterior'), '') as nomeCidadeExterior,\n            nullif(json_value(doc, '$.nomeEmpresarial'), '') as nomeEmpresarial,\n            nullif(json_value(doc, '$.nomeFantasia'), '') as nomeFantasia,\n            nullif(json_value(doc, '$.numero'), '') as numero,\n            cast(\n                cast(nullif(json_value(doc, '$.porteEmpresa'), '') as int64) as string\n            ) as porteEmpresa,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.qualificacaoResponsavel'), '') as int64\n                ) as string\n            ) as qualificacaoResponsavel,\n            nullif(\n                json_value(doc, '$.sequencialCrcContadorPF'), ''\n            ) as sequencialCrcContadorPF,\n            nullif(\n                json_value(doc, '$.sequencialCrcContadorPJ'), ''\n            ) as sequencialCrcContadorPJ,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.situacaoCadastral'), '') as int64\n                ) as string\n            ) as situacaoCadastral,\n            nullif(json_value(doc, '$.situacaoEspecial'), '') as situacaoEspecial,\n            json_extract_array(doc, '$.socios') as socios,\n            json_extract_array(doc, '$.sucessoes') as sucessoes,\n            nullif(json_value(doc, '$.telefone1'), '') as telefone1,\n            nullif(json_value(doc, '$.telefone2'), '') as telefone2,\n            nullif(json_value(doc, '$.timestamp'), '') as timestamp,\n            nullif(json_value(doc, '$.tipoLogradouro'), '') as tipoLogradouro,\n            nullif(json_value(doc, '$.tipoOrgaoRegistro'), '') as tipoOrgaoRegistro,\n            json_extract_array(doc, '$.tiposUnidade') as tiposUnidade,\n            nullif(json_value(doc, '$.tipoCrcContadorPF'), '') as tipoCrcContadorPF,\n            nullif(json_value(doc, '$.tipoCrcContadorPJ'), '') as tipoCrcContadorPJ,\n            nullif(json_value(doc, '$.uf'), '') as uf,\n            nullif(json_value(doc, '$.ufCrcContadorPF'), '') as ufCrcContadorPF,\n            nullif(json_value(doc, '$.ufCrcContadorPJ'), '') as ufCrcContadorPJ,\n            nullif(\n                json_value(replace(to_json_string(doc), '~', ''), '$.version'), ''\n            ) as version,\n\n            -- Airbyte fields\n            struct(\n                _airbyte_raw_id as raw_id,\n                _airbyte_extracted_at as extracted_at,\n                _airbyte_generation_id as generation_id,\n                nullif(json_value(_airbyte_meta, '$.changes'), \"\") as changes,\n                nullif(json_value(_airbyte_meta, '$.sync_id'), \"\") as sync_id\n            ) as airbyte,\n\n        from fonte\n    ),\n\n    dedup as (\n        select *,\n         -- Partition by cnpj\n            cast(cnpj as int64) as cnpj_particao,\n        from fonte_parseada\n        qualify\n            row_number() over (partition by cnpj order by airbyte.extracted_at desc)\n            = 1\n    )\n\nselect *\nfrom dedup","compiled_path":"target/compiled/models/raw/bcadastro/base/raw_base_bcadastro_chcnpj.sql","config":{"access":null,"alias":"chcnpj_bcadastros_parsed","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.chcnpj_bcadastros"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.chcnpj_bcadastros",{"col":14,"expanded":null,"file":"models/raw/bcadastro/base/raw_base_bcadastro_chcnpj.sql","index":243,"line":15}]]},"fqn":["queries","raw","bcadastro","base","raw_base_bcadastro_chcnpj"],"language":"sql","metrics":[],"name":"raw_base_bcadastro_chcnpj","original_file_path":"models/raw/bcadastro/base/raw_base_bcadastro_chcnpj.sql","package_name":"queries","path":"models/raw/bcadastro/base/raw_base_bcadastro_chcnpj.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro_staging`.`chcnpj_bcadastros_parsed`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro_staging","sources":[["brutos_bcadastro_staging","chcnpj_bcadastros"]],"unique_id":"model.queries.raw_base_bcadastro_chcnpj","unrendered_config":{}},"model.queries.raw_base_bcadastro_chcpf":{"alias":"chcpf_bcadastros_parsed","checksum":{"checksum":"53e64379045ce4ff52f454d90231cbbd4847cd4acf0b5d7b31e8493b6605397b","name":"SHA256"},"columns":{"airbyte":{"config":{},"constraints":[],"data_type":"STRUCT<raw_id STRING, extracted_at TIMESTAMP, generation_id INT64, changes STRING, sync_id STRING>","meta":{},"name":"airbyte","tags":[]},"anoExerc":{"config":{},"constraints":[],"data_type":"INT64","meta":{},"name":"anoExerc","tags":[]},"anoObito":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"anoObito","tags":[]},"bairro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"bairro","tags":[]},"cep":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cep","tags":[]},"codMunDomic":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codMunDomic","tags":[]},"codMunNat":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codMunNat","tags":[]},"codNatOcup":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codNatOcup","tags":[]},"codOcup":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codOcup","tags":[]},"codPaisNac":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codPaisNac","tags":[]},"codPaisRes":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codPaisRes","tags":[]},"codSexo":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codSexo","tags":[]},"codSitCad":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codSitCad","tags":[]},"codUA":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"codUA","tags":[]},"complemento":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"complemento","tags":[]},"cpfId":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"cpfId","tags":[]},"cpfId_particao":{"config":{},"constraints":[],"data_type":"INT64","meta":{},"name":"cpfId_particao","tags":[]},"dtInscricao":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dtInscricao","tags":[]},"dtNasc":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dtNasc","tags":[]},"dtUltAtualiz":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"dtUltAtualiz","tags":[]},"email":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"email","tags":[]},"indEstrangeiro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"indEstrangeiro","tags":[]},"indResExt":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"indResExt","tags":[]},"logradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"logradouro","tags":[]},"municipio":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"municipio","tags":[]},"nomeContribuinte":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeContribuinte","tags":[]},"nomeMae":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeMae","tags":[]},"nomePaisNac":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomePaisNac","tags":[]},"nomePaisRes":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomePaisRes","tags":[]},"nomeSocial":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nomeSocial","tags":[]},"nroLogradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"nroLogradouro","tags":[]},"telefone":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"telefone","tags":[]},"timestamp":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"timestamp","tags":[]},"tipo":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipo","tags":[]},"tipoLogradouro":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"tipoLogradouro","tags":[]},"ufMunDomic":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"ufMunDomic","tags":[]},"ufMunNat":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"ufMunNat","tags":[]},"version":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"version","tags":[]}},"compiled":true,"compiled_code":"-- tabela de CPF - Cadastro de Pessoas Físicas\n\n\n\n\nwith\n    fonte as (\n        select *\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`chcpf_bcadastros`\n\n        \n            where\n                timestamp(_airbyte_extracted_at)\n                >= timestamp_sub(current_timestamp(), interval 3 day)\n        \n    ),\n\n    fonte_parseada as (\n        select\n            -- Alphabetically ordered fields\n            cast(nullif(json_value(doc, '$.anoExerc'), \"\") as int64) as anoExerc,\n            nullif(json_value(doc, '$.anoObito'), \"\") as anoObito,\n            nullif(json_value(doc, '$.bairro'), \"\") as bairro,\n            nullif(json_value(doc, '$.cep'), \"\") as cep,\n            nullif(json_value(doc, '$.codMunDomic'), \"\") as codMunDomic,\n            nullif(json_value(doc, '$.codMunNat'), \"\") as codMunNat,\n            nullif(json_value(doc, '$.codNatOcup'), \"\") as codNatOcup,\n            nullif(json_value(doc, '$.codOcup'), \"\") as codOcup,\n            nullif(json_value(doc, '$.codPaisNac'), \"\") as codPaisNac,\n            nullif(json_value(doc, '$.codPaisRes'), \"\") as codPaisRes,\n            nullif(json_value(doc, '$.codSexo'), \"\") as codSexo,\n            nullif(json_value(doc, '$.codSitCad'), \"\") as codSitCad,\n            nullif(json_value(doc, '$.codUA'), \"\") as codUA,\n            nullif(json_value(doc, '$.complemento'), \"\") as complemento,\n            nullif(json_value(doc, '$.cpfId'), \"\") as cpfId,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dtInscricao'), \"\")\n            ) as dtInscricao,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dtNasc'), \"\")\n            ) as dtNasc,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dtUltAtualiz'), \"\")\n            ) as dtUltAtualiz,\n            nullif(json_value(doc, '$.email'), \"\") as email,\n            nullif(json_value(doc, '$.indEstrangeiro'), \"\") as indEstrangeiro,\n            nullif(json_value(doc, '$.indResExt'), \"\") as indResExt,\n            nullif(json_value(doc, '$.logradouro'), \"\") as logradouro,\n            nullif(json_value(doc, '$.municipio'), \"\") as municipio,\n            nullif(json_value(doc, '$.nomeContribuinte'), \"\") as nomeContribuinte,\n            nullif(json_value(doc, '$.nomeMae'), \"\") as nomeMae,\n            nullif(json_value(doc, '$.nomePaisNac'), \"\") as nomePaisNac,\n            nullif(json_value(doc, '$.nomePaisRes'), \"\") as nomePaisRes,\n            nullif(json_value(doc, '$.nomeSocial'), \"\") as nomeSocial,\n            nullif(json_value(doc, '$.nroLogradouro'), \"\") as nroLogradouro,\n            nullif(json_value(doc, '$.telefone'), \"\") as telefone,\n            nullif(json_value(doc, '$.timestamp'), \"\") as timestamp,\n            nullif(json_value(doc, '$.tipo'), \"\") as tipo,\n            nullif(json_value(doc, '$.tipoLogradouro'), \"\") as tipoLogradouro,\n            nullif(json_value(doc, '$.ufMunDomic'), \"\") as ufMunDomic,\n            nullif(json_value(doc, '$.ufMunNat'), \"\") as ufMunNat,\n            nullif(\n                json_value(replace(to_json_string(doc), '~', ''), '$.version'), \"\"\n            ) as version,\n\n            -- Airbyte fields\n            struct(\n                _airbyte_raw_id as raw_id,\n                _airbyte_extracted_at as extracted_at,\n                _airbyte_generation_id as generation_id,\n                nullif(json_value(_airbyte_meta, '$.changes'), \"\") as changes,\n                nullif(json_value(_airbyte_meta, '$.sync_id'), \"\") as sync_id\n            ) as airbyte,\n            \n        from fonte\n    ),\n\n    dedup as (\n        select *,\n         -- Partition by cpfId\n            cast(cpfId as int64) as cpfId_particao,\n        \n        from fonte_parseada\n        qualify\n            row_number() over (partition by cpfId order by airbyte.extracted_at desc)\n            = 1\n    )\n\nselect *\nfrom dedup\nwhere cpfId is not null and cpfId != ''\n","compiled_path":"target/compiled/models/raw/bcadastro/base/raw_base_bcadastro_chcpf.sql","config":{"access":null,"alias":"chcpf_bcadastros_parsed","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.chcpf_bcadastros"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.chcpf_bcadastros",{"col":14,"expanded":null,"file":"models/raw/bcadastro/base/raw_base_bcadastro_chcpf.sql","index":239,"line":15}]]},"fqn":["queries","raw","bcadastro","base","raw_base_bcadastro_chcpf"],"language":"sql","metrics":[],"name":"raw_base_bcadastro_chcpf","original_file_path":"models/raw/bcadastro/base/raw_base_bcadastro_chcpf.sql","package_name":"queries","path":"models/raw/bcadastro/base/raw_base_bcadastro_chcpf.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro_staging`.`chcpf_bcadastros_parsed`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro_staging","sources":[["brutos_bcadastro_staging","chcpf_bcadastros"]],"unique_id":"model.queries.raw_base_bcadastro_chcpf","unrendered_config":{}},"model.queries.raw_bcadastro_cnpj":{"alias":"cnpj","checksum":{"checksum":"18717a1aacb61a9ea92d77b5cc22b829161170eee209f6dfa5a4e6f79b641965","name":"SHA256"},"columns":{"airbyte":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, key STRING, rev STRING, _id STRING, _rev STRING, version STRING, seq STRING, last_seq STRING, airbyte_raw_id STRING, airbyte_extracted_at TIMESTAMP, airbyte_meta STRUCT<changes STRING, sync_id STRING>, airbyte_generation_id INT64>","meta":{},"name":"airbyte","tags":[]},"capital_social":{"config":{},"constraints":[],"data_type":"INT64","description":"Esta coluna representa o capital social da empresa, em reais.\nFormato: Valor decimal com até 2 casas decimais Exemplo: 1000000.00","meta":{},"name":"capital_social","tags":[]},"cnae_fiscal":{"config":{},"constraints":[],"data_type":"STRING","description":"Esta coluna representa o código CNAE (Classificação Nacional de Atividades Econômicas) principal da empresa.","meta":{},"name":"cnae_fiscal","tags":[]},"cnae_secundarias":{"config":{},"constraints":[],"data_type":"ARRAY<JSON>","description":"Esta coluna contém uma lista de códigos CNAE secundários da empresa.","meta":{},"name":"cnae_secundarias","tags":[]},"cnpj":{"config":{},"constraints":[],"data_type":"STRING","description":"Esta coluna representa o CNPJ (Cadastro Nacional da Pessoa Jurídica), que é um identificador único para empresas brasileiras.  É armazenado como uma string e é crucial para identificar empresas individuais no Brasil.\nFormato: 14 dígitos numéricos Exemplo: 00000000000191","meta":{},"name":"cnpj","tags":[]},"cnpj_particao":{"config":{},"constraints":[],"data_type":"INT64","description":"Esta coluna representa a partição do CNPJ (Cadastro Nacional da Pessoa Jurídica). O 'cnpj_particao' é usado para otimizar o processamento e consulta de dados, dividindo os dados em partes menores.","meta":{},"name":"cnpj_particao","tags":[]},"contador":{"config":{},"constraints":[],"data_type":"STRUCT<pf STRUCT<tipo_crc STRING, classificacao_crc STRING, sequencial_crc STRING, id STRING>, pj STRUCT<id STRING, tipo_crc STRING, classificacao_crc STRING, sequencial_crc STRING>>","meta":{},"name":"contador","tags":[]},"contato":{"config":{},"constraints":[],"data_type":"STRUCT<telefone ARRAY<STRUCT<ddd STRING, telefone STRING>>, email STRING>","meta":{},"name":"contato","tags":[]},"endereco":{"config":{},"constraints":[],"data_type":"STRUCT<cep STRING, id_pais STRING, uf STRING, id_municipio STRING, municipio_nome STRING, municipio_exterior_nome STRING, bairro STRING, tipo_logradouro STRING, logradouro STRING, numero STRING, complemento STRING>","meta":{},"name":"endereco","tags":[]},"ente_federativo":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, tipo STRING>","description":"Descrição do Ente Federativo Responsável (EFR).","meta":{},"name":"ente_federativo","tags":[]},"formas_atuacao":{"config":{},"constraints":[],"data_type":"ARRAY<STRING>","description":"Formas de atuação da empresa.","meta":{},"name":"formas_atuacao","tags":[]},"inicio_atividade_data":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"inicio_atividade_data","tags":[]},"language":{"config":{},"constraints":[],"data_type":"STRING","description":"Código do idioma.","meta":{},"name":"language","tags":[]},"matriz_filial":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, descricao STRING>","meta":{},"name":"matriz_filial","tags":[]},"natureza_juridica":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, descricao STRING>","description":"Descrição da natureza jurídica da empresa.","meta":{},"name":"natureza_juridica","tags":[]},"nire":{"config":{},"constraints":[],"data_type":"STRING","description":"Esta coluna representa o NIRE (Número de Identificação do Registro de Empresas) da empresa.","meta":{},"name":"nire","tags":[]},"nome_fantasia":{"config":{},"constraints":[],"data_type":"STRING","description":"Esta coluna representa o nome fantasia da empresa.","meta":{},"name":"nome_fantasia","tags":[]},"orgao_registro":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, descricao STRING>","meta":{},"name":"orgao_registro","tags":[]},"porte":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, descricao STRING>","meta":{},"name":"porte","tags":[]},"razao_social":{"config":{},"constraints":[],"data_type":"STRING","description":"Esta coluna representa o nome empresarial (razão social) da empresa.","meta":{},"name":"razao_social","tags":[]},"responsavel":{"config":{},"constraints":[],"data_type":"STRUCT<cpf STRING, qualificacao_id STRING, qualificacao_descricao STRING, inclusao_data DATE>","meta":{},"name":"responsavel","tags":[]},"situacao_cadastral":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, descricao STRING, data DATE, motivo_id STRING, motivo_descricao STRING>","description":"Descrição da situação cadastral da empresa.","meta":{},"name":"situacao_cadastral","tags":[]},"situacao_especial":{"config":{},"constraints":[],"data_type":"STRUCT<descricao STRING, data DATE>","description":"Descrição da situação especial da empresa, se houver.","meta":{},"name":"situacao_especial","tags":[]},"socios":{"config":{},"constraints":[],"data_type":"ARRAY<STRUCT<codigo_pais STRING, cpf_socio STRING, cnpj_socio STRING, cpf_representante_legal STRING, data_situacao_especial DATE, nome_socio_estrangeiro STRING, qualificacao_representante_legal STRING, qualificacao_socio STRING, tipo STRING>>","meta":{},"name":"socios","tags":[]},"socios_quantidade":{"config":{},"constraints":[],"data_type":"INT64","description":"Quantidade de sócios da empresa.","meta":{},"name":"socios_quantidade","tags":[]},"sucessoes":{"config":{},"constraints":[],"data_type":"ARRAY<STRUCT<evento_sucedida STRING, data_evento_sucedida DATE, data_processamento DATE, sucessoras STRING>>","meta":{},"name":"sucessoes","tags":[]},"timestamp":{"config":{},"constraints":[],"data_type":"STRING","description":"Timestamp da extração dos dados.","meta":{},"name":"timestamp","tags":[]},"tipos_unidade":{"config":{},"constraints":[],"data_type":"ARRAY<STRING>","description":"Tipos de unidade da empresa (Matriz, Filial).","meta":{},"name":"tipos_unidade","tags":[]}},"compiled":true,"compiled_code":"with\n    fonte as (\n        select *\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`chcnpj_bcadastros`\n\n        \n            where\n                timestamp(_airbyte_extracted_at)\n                >= timestamp_sub(current_timestamp(), interval 3 day)\n        \n    \n    ),\n\n    sigla_uf_bd as (select sigla from `basedosdados`.`br_bd_diretorios_brasil`.`uf`),\n\n    municipio_bd as (\n        select id_municipio_rf, nome as municipio_nome\n        from `basedosdados`.`br_bd_diretorios_brasil`.`municipio`\n    ),\n\n    dominio as (\n        select id, \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(descricao, ' ')) as word\n    )\n as descricao, column\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`dominio_cnpj`\n    ),\n\n    fonte_parseada as (\n        select\n            -- Primary key\n            nullif(json_value(doc, '$.cnpj'), '') as id_cnpj,\n\n            -- Foreign keys\n            nullif(json_value(doc, '$.codigoMunicipio'), '') as id_municipio,\n            nullif(json_value(doc, '$.codigoPais'), '') as id_pais,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.naturezaJuridica'), '') as int64\n                ) as string\n            ) as id_natureza_juridica,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.qualificacaoResponsavel'), '') as int64\n                ) as string\n            ) as id_qualificacao_responsavel,\n            cast(\n                cast(nullif(json_value(doc, '$.porteEmpresa'), '') as int64) as string\n            ) as id_porte,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.indicadorMatriz'), '') as int64\n                ) as string\n            ) as id_indicador_matriz,\n            nullif(\n                json_value(doc, '$.tipoOrgaoRegistro'), ''\n            ) as id_tipo_orgao_registro,\n            cast(\n                cast(nullif(json_value(doc, '$.motivoSituacao'), '') as int64) as string\n            ) as id_motivo_situacao,\n            cast(\n                cast(\n                    nullif(json_value(doc, '$.situacaoCadastral'), '') as int64\n                ) as string\n            ) as id_situacao_cadastral,\n\n            -- Business data\n            nullif(json_value(doc, '$.nomeEmpresarial'), '') as razao_social,\n            nullif(json_value(doc, '$.nomeFantasia'), '') as nome_fantasia,\n            cast(\n                nullif(json_value(doc, '$.capitalSocial'), '') as int64\n            ) as capital_social,\n            nullif(json_value(doc, '$.cnaeFiscal'), '') as cnae_fiscal,\n            nullif(json_value(doc, '$.nire'), '') as nire,\n            nullif(json_value(doc, '$.cnpjSucedida'), '') as id_cnpj_sucedida,\n\n            -- Dates\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataInicioAtividade'), '')\n            ) as data_inicio_atividade,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataSituacaoCadastral'), '')\n            ) as data_situacao_cadastral,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataSituacaoEspecial'), '')\n            ) as data_situacao_especial,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dataInclusaoResponsavel'), '')\n            ) as data_inclusao_responsavel,\n\n            -- Status and demographics\n            nullif(json_value(doc, '$.situacaoEspecial'), '') as situacao_especial,\n            case\n                when regexp_contains(json_value(doc, '$.enteFederativo'), r'^[0-9]+$')\n                then\n                    cast(\n                        cast(\n                            nullif(json_value(doc, '$.enteFederativo'), '') as int64\n                        ) as string\n                    )\n                else upper(nullif(json_value(doc, '$.enteFederativo'), ''))\n            end as id_ente_federativo,\n\n            -- Contact\n            nullif(json_value(doc, '$.dddTelefone1'), '') as contato_ddd_1,\n            nullif(json_value(doc, '$.telefone1'), '') as contato_telefone_1,\n            nullif(json_value(doc, '$.dddTelefone2'), '') as contato_ddd_2,\n            nullif(json_value(doc, '$.telefone2'), '') as contato_telefone_2,\n            nullif(json_value(doc, '$.email'), '') as contato_email,\n\n            -- Address\n            nullif(json_value(doc, '$.cep'), '') as endereco_cep,\n            nullif(json_value(doc, '$.uf'), '') as endereco_uf,\n            nullif(json_value(doc, '$.bairro'), '') as endereco_bairro,\n            nullif(json_value(doc, '$.tipoLogradouro'), '') as endereco_tipo_logradouro,\n            nullif(json_value(doc, '$.logradouro'), '') as endereco_logradouro,\n            nullif(json_value(doc, '$.numero'), '') as endereco_numero,\n            nullif(json_value(doc, '$.complemento'), '') as endereco_complemento,\n            nullif(\n                json_value(doc, '$.nomeCidadeExterior'), ''\n            ) as endereco_cidade_exterior_nome,\n\n            -- Accountant Information\n            nullif(json_value(doc, '$.tipoCrcContadorPF'), '') as contador_pf_tipo_crc,\n            nullif(json_value(doc, '$.contadorPJ'), '') as contador_pj_id,\n            nullif(\n                json_value(doc, '$.classificacaoCrcContadorPF'), ''\n            ) as contador_pf_classificacao_crc,\n            nullif(\n                json_value(doc, '$.sequencialCrcContadorPF'), ''\n            ) as contador_pf_sequencial_crc,\n            nullif(json_value(doc, '$.contadorPF'), '') as contador_pf_id,\n            nullif(json_value(doc, '$.tipoCrcContadorPJ'), '') as contador_pj_tipo_crc,\n            nullif(\n                json_value(doc, '$.classificacaoCrcContadorPJ'), ''\n            ) as contador_pj_classificacao_crc,\n            nullif(json_value(doc, '$.ufCrcContadorPJ'), '') as contador_pj_uf_crc,\n            nullif(json_value(doc, '$.ufCrcContadorPF'), '') as contador_pf_uf_crc,\n            nullif(\n                json_value(doc, '$.sequencialCrcContadorPJ'), ''\n            ) as contador_pj_sequencial_crc,\n\n            -- Responsible Person\n            nullif(json_value(doc, '$.cpfResponsavel'), '') as responsavel_cpf,\n\n            -- arrays\n            json_extract_array(doc, '$.cnaeSecundarias') as cnae_secundarias,\n            json_extract_array(doc, '$.tiposUnidade') as tipos_unidade,\n            json_extract_array(doc, '$.formasAtuacao') as formas_atuacao,\n            json_extract_array(doc, '$.socios') as socios,\n            json_extract_array(doc, '$.sucessoes') as sucessoes,\n\n            -- Metadata\n            nullif(json_value(doc, '$.timestamp'), '') as timestamp,\n            nullif(json_value(doc, '$.language'), '') as language,\n            nullif(\n                json_value(replace(to_json_string(doc), '~', ''), '$.version'), ''\n            ) as version,\n\n            -- Outros\n            id,\n            key,\n            nullif(json_value(value, '$.rev'), '') as rev,\n            nullif(json_value(doc, '$._id'), '') as _id,\n            nullif(json_value(doc, '$._rev'), '') as _rev,\n\n            seq,\n            last_seq,\n            _airbyte_raw_id as airbyte_raw_id,\n            _airbyte_extracted_at as airbyte_extracted_at,\n            struct(\n                nullif(json_value(_airbyte_meta, '$.changes'), '') as changes,\n                nullif(json_value(_airbyte_meta, '$.sync_id'), '') as sync_id\n            ) as airbyte_meta,\n            _airbyte_generation_id as airbyte_generation_id,\n\n        from fonte\n    ),\n\n    array_convert_tb as (\n        select\n            id_cnpj,\n            seq,\n            version,\n            array_agg(distinct tut.descricao) as tipos_unidade,\n            array_agg(distinct fat.descricao) as formas_atuacao\n        from\n            fonte_parseada t,\n            unnest(t.formas_atuacao) as fa,\n            unnest(t.tipos_unidade) as tu\n        left join\n            (\n                select id as tipos_unidade_id, descricao\n                from dominio\n                where column = 'tipo_unidade'\n            ) tut\n            on cast(cast(json_value(tu) as int64) as string) = tut.tipos_unidade_id\n        left join\n            (\n                select id as formas_atuacao_id, descricao\n                from dominio\n                where column = 'forma_atuacao'\n            ) fat\n            on cast(cast(json_value(fa) as int64) as string) = fat.formas_atuacao_id\n        group by id_cnpj, seq, version\n    ),\n\n    _socios_tb as (\n        select\n            id_cnpj,\n            seq,\n            version,\n            nullif(json_value(so, '$.codigoPais'), \"\") as codigo_pais,\n            substr(nullif(json_value(so, '$.cpfCnpj'), \"\"), -11) as cpf_socio,\n            nullif(json_value(so, '$.cpfCnpj'), \"\") as cnpj_socio,\n            nullif(\n                json_value(so, '$.cpfRepresentanteLegal'), \"\"\n            ) as cpf_representante_legal,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(so, '$.dataEntrada'), '')\n            ) as data_situacao_especial,\n            nullif(\n                json_value(so, '$.nomeSocioEstrangeiro'), \"\"\n            ) as nome_socio_estrangeiro,\n            qrl.descricao as qualificacao_representante_legal,  -- qualificacao_representante_legal\n            qs.descricao as qualificacao_socio,  -- qualificacao_socio\n            ts.descricao as tipo  -- tipo_socio\n        from fonte_parseada t, unnest(t.socios) as so\n        left join\n            (\n                select id as qualificacao_representante_legal_id, descricao\n                from dominio\n                where column = 'qualificacao_representante_legal'\n            ) qrl\n            on cast(\n                cast(\n                    nullif(\n                        json_value(so, '$.qualificacaoRepresentanteLegal'), \"\"\n                    ) as int64\n                ) as string\n            )\n            = qrl.qualificacao_representante_legal_id\n        left join\n            (\n                select id as qualificacao_socio_id, descricao\n                from dominio\n                where column = 'qualificacao_socio'\n            ) qs\n            on cast(\n                cast(\n                    nullif(json_value(so, '$.qualificacaoSocio'), \"\") as int64\n                ) as string\n            )\n            = qs.qualificacao_socio_id\n        left join\n            (\n                select id as tipo_socio_id, descricao\n                from dominio\n                where column = 'tipo_socio'\n            ) ts\n            on cast(cast(nullif(json_value(so, '$.tipo'), \"\") as int64) as string)\n            = ts.tipo_socio_id\n    ),\n\n    _socios_tb_validate_cpf as (\n        select\n            id_cnpj,\n            seq,\n            version,\n            so.codigo_pais,\n            so.cpf_socio,\n            \n        -- cpf validation based on https://homepages.dcc.ufmg.br/~rodolfo/aedsi-2-10/regrasDigitosVerificadoresCPF.html\n        CASE \n            WHEN LENGTH(so.cpf_socio) != 11 THEN FALSE\n            WHEN so.cpf_socio IN ('00000000000', '11111111111', '22222222222', '33333333333', \n                                    '44444444444', '55555555555', '66666666666', '77777777777', \n                                    '88888888888', '99999999999') THEN FALSE\n            ELSE (\n                SELECT \n                    CASE \n                        WHEN calculated_first_digit = d0 AND calculated_second_digit = d_unit THEN TRUE\n                        ELSE FALSE\n                    END\n                FROM (\n                    SELECT \n                        *,\n                        CASE \n                            WHEN second_sum_mod < 2 THEN 0\n                            ELSE 11 - second_sum_mod\n                        END AS calculated_second_digit\n                    FROM (\n                        SELECT \n                            *,\n                            MOD(d9*11 + d8*10 + d7*9 + d6*8 + d5*7 + d4*6 + d3*5 + d2*4 + d1*3 + calculated_first_digit*2, 11) AS second_sum_mod\n                        FROM (\n                            SELECT \n                                *,\n                                CASE \n                                    WHEN first_sum_mod < 2 THEN 0\n                                    ELSE 11 - first_sum_mod\n                                END AS calculated_first_digit\n                            FROM (\n                                SELECT \n                                    *,\n                                    MOD(d9*10 + d8*9 + d7*8 + d6*7 + d5*6 + d4*5 + d3*4 + d2*3 + d1*2, 11) AS first_sum_mod\n                                FROM (\n                                    SELECT \n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 1, 1) AS INT64) AS d9,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 2, 1) AS INT64) AS d8,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 3, 1) AS INT64) AS d7,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 4, 1) AS INT64) AS d6,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 5, 1) AS INT64) AS d5,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 6, 1) AS INT64) AS d4,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 7, 1) AS INT64) AS d3,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 8, 1) AS INT64) AS d2,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 9, 1) AS INT64) AS d1,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 10, 1) AS INT64) AS d0,\n                                        SAFE_CAST(SUBSTR(so.cpf_socio, 11, 1) AS INT64) AS d_unit\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        END as cpf_valido_indicador,\n            so.cnpj_socio,\n            so.cpf_representante_legal,\n            so.data_situacao_especial,\n            so.nome_socio_estrangeiro,\n            so.qualificacao_representante_legal,\n            so.qualificacao_socio,\n            so.tipo\n        from _socios_tb so\n    ),\n\n    socios_tb as (\n        select\n            id_cnpj,\n            seq,\n            version,\n            array_agg(\n                struct(\n                    so.codigo_pais,\n                    case\n                        when cpf_valido_indicador = true then so.cpf_socio else null\n                    end as cpf_socio,\n                    case\n                        when cpf_valido_indicador = false then so.cnpj_socio else null\n                    end as cnpj_socio,\n                    so.cpf_representante_legal,\n                    so.data_situacao_especial,\n                    so.nome_socio_estrangeiro,\n                    so.qualificacao_representante_legal,\n                    so.qualificacao_socio,\n                    so.tipo\n                )\n            ) as socios\n        from _socios_tb_validate_cpf so\n        group by id_cnpj, seq, version\n    ),\n\n    sucessoes_tb as (\n        select\n            id_cnpj_sucedida,\n            seq,\n            version,\n            array_agg(\n                struct(\n                    ev.descricao as evento_sucedida,  -- evento\n                    safe.parse_date(\n                        '%Y%m%d', nullif(json_value(su, '$.dataEventoSucedida'), '')\n                    ) as data_evento_sucedida,\n                    safe.parse_date(\n                        '%Y%m%d', nullif(json_value(su, '$.dataProcessamento'), '')\n                    ) as data_processamento,\n                    nullif(json_value(su, '$.sucessoras'), \"\") as sucessoras\n\n                )\n            ) as sucessoes\n        from fonte_parseada t, unnest(t.sucessoes) as su\n        left join\n            (select id as evento_id, descricao from dominio where column = 'eventos') ev\n            on cast(\n                cast(\n                    nullif(json_value(su, '$.codigoEventoSucedida'), \"\") as int64\n                ) as string\n            )\n            = ev.evento_id\n        group by id_cnpj_sucedida, seq, version\n    ),\n\n    contato as (\n        select id_cnpj, seq, version, array_agg(struct(ddd, telefone)) as telefone\n        from\n            (\n                select\n                    id_cnpj,\n                    seq,\n                    version,\n                    case\n                        when\n                            contato_ddd_1 not in (\n                                '11',\n                                '12',\n                                '13',\n                                '14',\n                                '15',\n                                '16',\n                                '17',\n                                '18',\n                                '19',\n                                '21',\n                                '22',\n                                '24',\n                                '27',\n                                '28',\n                                '31',\n                                '32',\n                                '33',\n                                '34',\n                                '35',\n                                '37',\n                                '38',\n                                '41',\n                                '42',\n                                '43',\n                                '44',\n                                '45',\n                                '46',\n                                '47',\n                                '48',\n                                '49',\n                                '51',\n                                '53',\n                                '54',\n                                '55',\n                                '61',\n                                '62',\n                                '63',\n                                '64',\n                                '65',\n                                '66',\n                                '67',\n                                '68',\n                                '69',\n                                '71',\n                                '73',\n                                '74',\n                                '75',\n                                '77',\n                                '79',\n                                '81',\n                                '82',\n                                '83',\n                                '84',\n                                '85',\n                                '86',\n                                '87',\n                                '88',\n                                '89',\n                                '91',\n                                '92',\n                                '93',\n                                '94',\n                                '95',\n                                '96',\n                                '97',\n                                '98',\n                                '99'\n                            )\n                        then null\n                        else contato_ddd_1\n                    end as ddd,\n                    \n    case\n        when\n            length(trim(contato_telefone_1)) = 0\n            or trim(contato_telefone_1) in ('NONE', 'NULL', '0', \"()\", \"\")\n            or trim(contato_telefone_1) like '00%'\n            or trim(contato_telefone_1) like '000%'\n            or trim(contato_telefone_1) like '0000%'\n            or regexp_contains(trim(contato_telefone_1), r'^([0-9])\\\\1*$')  -- Remove repeated digits\n            or regexp_contains(trim(contato_telefone_1), r'E\\+\\d+')  -- Remove scientific notation\n            or regexp_contains(trim(contato_telefone_1), r'[a-zA-Z]')  -- Remove numbers that contain letters\n        then null\n        else\n            regexp_replace(\n                regexp_replace(\n                    regexp_replace(\n                        regexp_replace(\n                            trim(contato_telefone_1), '^0', ''  -- Remove leading 0\n                        ),\n                        '[()]',\n                        ''  -- Remove parentheses\n                    ),\n                    '-',\n                    ''  -- Remove hyphens\n                ),\n                ' ',  -- Remove blank spaces\n                ''\n            )\n    end\n as telefone\n                from fonte_parseada\n                where contato_telefone_1 is not null\n                union all\n                select\n                    id_cnpj,\n                    seq,\n                    version,\n                    case\n                        when\n                            contato_ddd_2 not in (\n                                '11',\n                                '12',\n                                '13',\n                                '14',\n                                '15',\n                                '16',\n                                '17',\n                                '18',\n                                '19',\n                                '21',\n                                '22',\n                                '24',\n                                '27',\n                                '28',\n                                '31',\n                                '32',\n                                '33',\n                                '34',\n                                '35',\n                                '37',\n                                '38',\n                                '41',\n                                '42',\n                                '43',\n                                '44',\n                                '45',\n                                '46',\n                                '47',\n                                '48',\n                                '49',\n                                '51',\n                                '53',\n                                '54',\n                                '55',\n                                '61',\n                                '62',\n                                '63',\n                                '64',\n                                '65',\n                                '66',\n                                '67',\n                                '68',\n                                '69',\n                                '71',\n                                '73',\n                                '74',\n                                '75',\n                                '77',\n                                '79',\n                                '81',\n                                '82',\n                                '83',\n                                '84',\n                                '85',\n                                '86',\n                                '87',\n                                '88',\n                                '89',\n                                '91',\n                                '92',\n                                '93',\n                                '94',\n                                '95',\n                                '96',\n                                '97',\n                                '98',\n                                '99'\n                            )\n                        then null\n                        else contato_ddd_2\n                    end as ddd,\n                    \n    case\n        when\n            length(trim(contato_telefone_2)) = 0\n            or trim(contato_telefone_2) in ('NONE', 'NULL', '0', \"()\", \"\")\n            or trim(contato_telefone_2) like '00%'\n            or trim(contato_telefone_2) like '000%'\n            or trim(contato_telefone_2) like '0000%'\n            or regexp_contains(trim(contato_telefone_2), r'^([0-9])\\\\1*$')  -- Remove repeated digits\n            or regexp_contains(trim(contato_telefone_2), r'E\\+\\d+')  -- Remove scientific notation\n            or regexp_contains(trim(contato_telefone_2), r'[a-zA-Z]')  -- Remove numbers that contain letters\n        then null\n        else\n            regexp_replace(\n                regexp_replace(\n                    regexp_replace(\n                        regexp_replace(\n                            trim(contato_telefone_2), '^0', ''  -- Remove leading 0\n                        ),\n                        '[()]',\n                        ''  -- Remove parentheses\n                    ),\n                    '-',\n                    ''  -- Remove hyphens\n                ),\n                ' ',  -- Remove blank spaces\n                ''\n            )\n    end\n as telefone\n                from fonte_parseada\n                where contato_telefone_2 is not null\n            )\n        group by id_cnpj, seq, version\n    ),\n\n    fonte_intermediaria as (\n        select\n            -- Primary key\n            case\n                when t.id_cnpj is null then t.id_cnpj_sucedida else t.id_cnpj\n            end as id_cnpj,\n\n            -- Foreign keys\n            t.id_municipio,\n            t.id_pais,\n            t.id_natureza_juridica,\n            t.id_qualificacao_responsavel,\n            t.id_porte,\n            t.id_indicador_matriz,\n            t.id_tipo_orgao_registro,\n            t.id_motivo_situacao,\n            t.id_situacao_cadastral,\n\n            -- Business data\n            t.razao_social,\n            t.nome_fantasia,\n            t.capital_social,\n            t.cnae_fiscal,\n            t.cnae_secundarias,\n            t.nire,\n\n            -- Dates\n            t.data_inicio_atividade,\n            t.data_situacao_cadastral,\n            t.data_situacao_especial,\n            t.data_inclusao_responsavel,\n\n            -- Status and demographics\n            t.situacao_especial,\n            t.id_ente_federativo,\n            case\n                when id_ente_federativo = 'BR'\n                then 'União'\n                when regexp_contains(id_ente_federativo, r'^[0-9]+$')\n                then 'Município'\n                when\n                    upper(id_ente_federativo)\n                    in (select upper(id_ente_federativo) from sigla_uf_bd)\n                then 'Estado'\n                else null\n            end as ente_federativo_tipo,\n\n            -- Contact\n            tel.telefone as contato_telefone,\n            t.contato_email,\n\n            -- Address\n            t.endereco_cep,\n            t.endereco_uf,\n            t.endereco_bairro,\n            t.endereco_tipo_logradouro,\n            t.endereco_logradouro,\n            t.endereco_numero,\n            t.endereco_complemento,\n            t.endereco_cidade_exterior_nome,\n\n            -- Accountant Information\n            t.contador_pf_tipo_crc,\n            t.contador_pj_id,\n            t.contador_pf_classificacao_crc,\n            t.contador_pf_sequencial_crc,\n            t.contador_pf_id,\n            t.contador_pj_tipo_crc,\n            t.contador_pj_classificacao_crc,\n            t.contador_pj_uf_crc,\n            t.contador_pf_uf_crc,\n            t.contador_pj_sequencial_crc,\n\n            -- Responsible Person\n            t.responsavel_cpf,\n\n            -- Business arrays\n            actb.tipos_unidade,\n            actb.formas_atuacao,\n            array_length(soc.socios) as socios_quantidade,\n            soc.socios,\n            suc.sucessoes,\n\n            -- Metadata\n            t.timestamp,\n            t.language,\n            t.version,\n\n            -- Outros\n            t.id,\n            t.key,\n            t.rev,\n            t._id,\n            t._rev,\n            t.seq,\n            t.last_seq,\n            t.airbyte_raw_id,\n            t.airbyte_extracted_at,\n            t.airbyte_meta,\n            t.airbyte_generation_id,\n\n            -- Joins\n            md.municipio_nome as endereco_municipio_nome,\n            sc.descricao as situacao_cadastral_descricao,\n            ms.descricao as motivo_situacao_descricao,\n            org.descricao as tipo_orgao_registro_descricao,\n            nj.descricao as natureza_juridica_descricao,\n            pe.descricao as porte_descricao,\n            im.descricao as indicador_matriz_descricao,\n            qr.descricao as qualificacao_responsavel_descricao,\n\n            cast(t.id_cnpj as int64) as cnpj_particao\n\n        from fonte_parseada t\n        left join\n            contato as tel\n            on t.id_cnpj = tel.id_cnpj\n            and t.seq = tel.seq\n            and t.version = tel.version\n\n        left join\n            socios_tb as soc\n            on t.id_cnpj = soc.id_cnpj\n            and t.seq = soc.seq\n            and t.version = soc.version\n        left join\n            sucessoes_tb as suc\n            on t.id_cnpj_sucedida = suc.id_cnpj_sucedida\n            and t.seq = suc.seq\n            and t.version = suc.version\n        left join\n            array_convert_tb as actb\n            on t.id_cnpj = actb.id_cnpj\n            and t.seq = actb.seq\n            and t.version = actb.version\n        left join\n            municipio_bd as md\n            on cast(t.id_municipio as int64) = cast(md.id_municipio_rf as int64)\n        left join\n            (\n                select id as id_situacao_cadastral, descricao\n                from dominio\n                where column = 'situacao_cadastral'\n            ) sc\n            on t.id_situacao_cadastral = sc.id_situacao_cadastral\n        left join\n            (\n                select id as id_motivo_situacao, descricao\n                from dominio\n                where column = 'motivo_situacao_cadastral'\n            )\n            ms on t.id_motivo_situacao = ms.id_motivo_situacao\n        left join\n            (\n                select id as id_tipo_orgao_registro, descricao\n                from dominio\n                where column = 'tipo_orgao_registro'\n            )\n            org on t.id_tipo_orgao_registro = org.id_tipo_orgao_registro\n        left join\n            (\n                select id as id_natureza_juridica, descricao\n                from dominio\n                where column = 'natureza_juridica'\n            )\n            nj on t.id_natureza_juridica = nj.id_natureza_juridica\n        left join\n            (\n                select id as id_porte_empresa, descricao\n                from dominio\n                where column = 'porte_empresa'\n            )\n            pe on t.id_porte = pe.id_porte_empresa\n        left join\n            (\n                select id as id_indicador_matriz, descricao\n                from dominio\n                where column = 'indicador_matriz'\n            )\n            im on t.id_indicador_matriz = im.id_indicador_matriz\n        left join\n            (\n                select id as id_qualificacao_responsavel, descricao\n                from dominio\n                where column = 'qualificacao_responsavel'\n            )\n            qr on t.id_qualificacao_responsavel = qr.id_qualificacao_responsavel\n    ),\n\n    fonte_padronizada as (\n        select\n            -- Primary key\n            t.id_cnpj,\n\n            -- Foreign keys\n            t.id_municipio,\n            t.id_pais,\n            t.id_natureza_juridica,\n            t.id_qualificacao_responsavel,\n            t.id_porte,\n            t.id_indicador_matriz,\n            t.id_tipo_orgao_registro,\n            t.id_motivo_situacao,\n            t.id_situacao_cadastral,\n\n            -- Business data\n            t.razao_social,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(nome_fantasia, ' ')) as word\n    )\n as nome_fantasia,  -- Padronizado\n            t.capital_social,\n            t.cnae_fiscal,\n            t.cnae_secundarias,\n            t.nire,\n            -- Dates\n            t.data_inicio_atividade,\n            t.data_situacao_cadastral,\n            t.data_situacao_especial,\n            t.data_inclusao_responsavel,\n\n            -- Status and demographics\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(situacao_especial, ' ')) as word\n    )\n as situacao_especial,  -- Padronizado\n            t.id_ente_federativo,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(ente_federativo_tipo, ' ')) as word\n    )\n as ente_federativo_tipo,\n\n            -- Contact\n            t.contato_telefone,\n            t.contato_email,\n\n            -- Address\n            t.endereco_cep,\n            t.endereco_uf,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(endereco_bairro, ' ')) as word\n    )\n as endereco_bairro,  -- Padronizado\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(endereco_tipo_logradouro, ' ')) as word\n    )\n as endereco_tipo_logradouro,  -- Padronizado\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(endereco_logradouro, ' ')) as word\n    )\n as endereco_logradouro,  -- Padronizado\n            t.endereco_numero,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(endereco_complemento, ' ')) as word\n    )\n as endereco_complemento,  -- Padronizado\n            t.endereco_cidade_exterior_nome,\n            t.endereco_municipio_nome,\n\n            -- Accountant Information\n            t.contador_pf_tipo_crc,\n            t.contador_pj_id,\n            t.contador_pf_classificacao_crc,\n            t.contador_pf_sequencial_crc,\n            t.contador_pf_id,\n            t.contador_pj_tipo_crc,\n            t.contador_pj_classificacao_crc,\n            t.contador_pj_uf_crc,\n            t.contador_pf_uf_crc,\n            t.contador_pj_sequencial_crc,\n\n            -- Responsible Person\n            t.responsavel_cpf,\n\n            -- Business arrays\n            t.tipos_unidade,\n            t.formas_atuacao,\n            t.socios_quantidade,\n            t.socios,\n            t.sucessoes,\n            -- Metadata\n            t.timestamp,\n            t.language,\n\n            -- Outros\n            struct(\n                t.id,\n                t.key,\n                t.rev,\n                t._id,\n                t._rev,\n                t.version,\n                t.seq,\n                t.last_seq,\n                t.airbyte_raw_id,\n                t.airbyte_extracted_at,\n                t.airbyte_meta,\n                t.airbyte_generation_id\n            ) as airbyte,\n            -- descricoes\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(tipo_orgao_registro_descricao, ' ')) as word\n    )\n\n            as tipo_orgao_registro_descricao,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(motivo_situacao_descricao, ' ')) as word\n    )\n as motivo_situacao_descricao,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(situacao_cadastral_descricao, ' ')) as word\n    )\n\n            as situacao_cadastral_descricao,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(natureza_juridica_descricao, ' ')) as word\n    )\n\n            as natureza_juridica_descricao,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(porte_descricao, ' ')) as word\n    )\n as porte_descricao,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(indicador_matriz_descricao, ' ')) as word\n    )\n as indicador_matriz_descricao,\n            \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(qualificacao_responsavel_descricao, ' ')) as word\n    )\n\n            as responsavel_qualificacao_descricao,\n            -- Partition and Rank\n            t.cnpj_particao\n        from fonte_intermediaria t\n    ),\n\n    fonte_deduplicada as (\n        select *\n        from fonte_padronizada\n        qualify\n            row_number() over (\n                partition by id_cnpj order by data_situacao_cadastral desc\n            )\n            = 1\n    ),\n\n    final as (\n        select\n            -- Primary key\n            id_cnpj as cnpj,\n\n            -- Business data\n            razao_social,\n            nome_fantasia,\n            capital_social,\n            cnae_fiscal,\n            cnae_secundarias,\n            nire,\n\n            struct(\n                id_natureza_juridica as id, natureza_juridica_descricao as descricao\n            ) as natureza_juridica,\n\n            struct(id_porte as id, porte_descricao as descricao) as porte,\n\n            struct(\n                id_indicador_matriz as id, indicador_matriz_descricao as descricao\n            ) as matriz_filial,\n\n            struct(\n                id_tipo_orgao_registro as id, tipo_orgao_registro_descricao as descricao\n            ) as orgao_registro,\n\n            -- Dates\n            data_inicio_atividade as inicio_atividade_data,\n\n            -- Status and demographics\n            struct(\n                id_situacao_cadastral as id,\n                situacao_cadastral_descricao as descricao,\n                data_situacao_cadastral as data,\n                id_motivo_situacao as motivo_id,\n                motivo_situacao_descricao as motivo_descricao\n            ) as situacao_cadastral,\n            struct(\n                situacao_especial as descricao, data_situacao_especial as data\n            ) as situacao_especial,\n            struct(\n                id_ente_federativo as id, ente_federativo_tipo as tipo\n            ) as ente_federativo,\n\n            -- Contact information grouped in struct\n            struct(contato_telefone as telefone, contato_email as email) as contato,\n\n            -- Address information grouped in struct\n            struct(\n                endereco_cep as cep,\n                id_pais,\n                endereco_uf as uf,\n                id_municipio,\n                endereco_municipio_nome as municipio_nome,\n                endereco_cidade_exterior_nome as municipio_exterior_nome,\n                endereco_bairro as bairro,\n                endereco_tipo_logradouro as tipo_logradouro,\n                endereco_logradouro as logradouro,\n                endereco_numero as numero,\n                endereco_complemento as complemento\n\n            ) as endereco,\n\n            -- Accountant information grouped in struct\n            struct(\n                struct(\n                    contador_pf_tipo_crc as tipo_crc,\n                    contador_pf_classificacao_crc as classificacao_crc,\n                    contador_pf_sequencial_crc as sequencial_crc,\n                    contador_pf_id as id\n                ) as pf,\n                struct(\n                    contador_pj_id as id,\n                    contador_pj_tipo_crc as tipo_crc,\n                    contador_pj_classificacao_crc as classificacao_crc,\n                    contador_pj_sequencial_crc as sequencial_crc\n                ) as pj\n            ) as contador,\n\n            -- Responsible Person\n            struct(\n                responsavel_cpf as cpf,\n                id_qualificacao_responsavel as qualificacao_id,\n                responsavel_qualificacao_descricao as qualificacao_descricao,\n                data_inclusao_responsavel as inclusao_data\n            ) as responsavel,\n\n            -- Business arrays\n            tipos_unidade,\n            formas_atuacao,\n            socios_quantidade,\n            socios,\n            sucessoes,\n\n            -- Metadata\n            timestamp,\n            language,\n\n            -- Outros\n            airbyte,\n\n            -- Partition\n            cnpj_particao\n\n        from fonte_deduplicada\n    )\n\nselect *\nfrom final","compiled_path":"target/compiled/models/raw/bcadastro/raw_bcadastro_cnpj.sql","config":{"access":null,"alias":"cnpj","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"partition_by":{"copy_partitions":false,"data_type":"int64","field":"cnpj_particao","range":{"end":100000000000,"interval":34722222,"start":0},"time_ingestion_partitioning":false},"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":["bcadastro","cnpj","raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.chcnpj_bcadastros","source.queries.br_bd_diretorios_brasil.uf","source.queries.br_bd_diretorios_brasil.municipio","source.queries.brutos_bcadastro_staging.dominio_cnpj"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.chcnpj_bcadastros",{"col":14,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cnpj.sql","index":50,"line":4}],["source.queries.br_bd_diretorios_brasil.uf",{"col":39,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cnpj.sql","index":440,"line":14}],["source.queries.br_bd_diretorios_brasil.municipio",{"col":14,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cnpj.sql","index":579,"line":18}],["source.queries.brutos_bcadastro_staging.dominio_cnpj",{"col":14,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cnpj.sql","index":739,"line":23}]]},"description":"O modelo cnpj é um conjunto de dados abrangente que contém informações detalhadas sobre empresas, incluindo seus dados cadastrais,  informações de contato, detalhes de localização, informações sobre o quadro societário e informações sobre empresas sucedidas.  Inclui campos como CNPJ (um identificador único para empresas no Brasil), nomes, informações de contato (telefone e e-mail),  detalhes de endereço (incluindo cidade, estado e país), informações sobre a natureza jurídica da empresa, informações sobre o  porte da empresa e outras informações relevantes. Este modelo é particularmente útil para usuários de negócios que precisam  entender a demografia das empresas, acompanhar dados das empresas ao longo do tempo ou analisar o comportamento da empresa  com base em atributos cadastrais ou de localização.\nFonte: Base de Cadastro Nacional Frequência de Atualização: Diária Stakeholders: Secretaria Municipal de Desenvolvimento Econômico","fqn":["queries","raw","bcadastro","raw_bcadastro_cnpj"],"language":"sql","metrics":[],"name":"raw_bcadastro_cnpj","original_file_path":"models/raw/bcadastro/raw_bcadastro_cnpj.sql","package_name":"queries","patch_path":"models/raw/bcadastro/raw_bcadastro_cnpj.yml","path":"models/raw/bcadastro/raw_bcadastro_cnpj.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro`.`cnpj`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro","sources":[["brutos_bcadastro_staging","chcnpj_bcadastros"],["br_bd_diretorios_brasil","uf"],["br_bd_diretorios_brasil","municipio"],["brutos_bcadastro_staging","dominio_cnpj"]],"unique_id":"model.queries.raw_bcadastro_cnpj","unrendered_config":{}},"model.queries.raw_bcadastro_cpf":{"alias":"cpf","checksum":{"checksum":"9ab8c7e0cc897d8feb1d166e0147b8c4aebd6b7beb2126596c226654462785cc","name":"SHA256"},"columns":{"airbyte":{"config":{},"constraints":[],"data_type":"STRUCT<seq STRING, last_seq STRING, airbyte_raw_id STRING, airbyte_extracted_at TIMESTAMP, airbyte_meta STRUCT<changes STRING, sync_id STRING>, airbyte_generation_id INT64>","meta":{},"name":"airbyte","tags":[]},"atualizacao_data":{"config":{},"constraints":[],"data_type":"DATE","description":"Data da última atualização do registro","meta":{},"name":"atualizacao_data","tags":[]},"contato":{"config":{},"constraints":[],"data_type":"STRUCT<telefone STRUCT<ddi STRING, ddd STRING, numero STRING>, email STRING>","meta":{},"name":"contato","tags":[]},"cpf":{"config":{},"constraints":[],"data_type":"STRING","description":"Número de inscrição no Cadastro de Pessoas Físicas (CPF)","meta":{},"name":"cpf","tags":[]},"cpf_particao":{"config":{},"constraints":[],"data_type":"INT64","description":"Campo usado para particionamento da tabela","meta":{},"name":"cpf_particao","tags":[]},"endereco":{"config":{},"constraints":[],"data_type":"STRUCT<cep STRING, id_pais STRING, pais STRING, uf STRING, id_municipio STRING, municipio STRING, bairro STRING, tipo_logradouro STRING, logradouro STRING, numero STRING, complemento STRING>","meta":{},"name":"endereco","tags":[]},"estrangeiro_indicador":{"config":{},"constraints":[],"data_type":"BOOL","description":"Indica se o contribuinte é estrangeiro (true/false)","meta":{},"name":"estrangeiro_indicador","tags":[]},"inscricao_data":{"config":{},"constraints":[],"data_type":"DATE","description":"Data de inscrição no CPF","meta":{},"name":"inscricao_data","tags":[]},"mae_nome":{"config":{},"constraints":[],"data_type":"STRING","description":"Nome completo da mãe do contribuinte","meta":{},"name":"mae_nome","tags":[]},"metadados":{"config":{},"constraints":[],"data_type":"STRUCT<ano_exercicio INT64, version STRING, tipo STRING, timestamp STRING>","meta":{},"name":"metadados","tags":[]},"nascimento_data":{"config":{},"constraints":[],"data_type":"DATE","description":"Data de nascimento do contribuinte","meta":{},"name":"nascimento_data","tags":[]},"nascimento_local":{"config":{},"constraints":[],"data_type":"STRUCT<id_pais STRING, pais STRING, uf STRING, id_municipio STRING, municipio STRING>","meta":{},"name":"nascimento_local","tags":[]},"nome":{"config":{},"constraints":[],"data_type":"STRING","description":"Nome completo do contribuinte","meta":{},"name":"nome","tags":[]},"nome_social":{"config":{},"constraints":[],"data_type":"STRING","description":"Nome social do contribuinte, quando aplicável","meta":{},"name":"nome_social","tags":[]},"obito_ano":{"config":{},"constraints":[],"data_type":"STRING","description":"Ano do óbito, se aplicável","meta":{},"name":"obito_ano","tags":[]},"ocupacao":{"config":{},"constraints":[],"data_type":"STRUCT<id STRING, nome STRING, id_natureza STRING, id_ua STRING>","meta":{},"name":"ocupacao","tags":[]},"residente_exterior_indicador":{"config":{},"constraints":[],"data_type":"BOOL","description":"Indica se o contribuinte é residente no exterior (true/false)","meta":{},"name":"residente_exterior_indicador","tags":[]},"sexo":{"config":{},"constraints":[],"data_type":"STRING","description":"Sexo do contribuinte (masculino/feminino)","meta":{},"name":"sexo","tags":[]},"situacao_cadastral_tipo":{"config":{},"constraints":[],"data_type":"STRING","description":"Situação cadastral do CPF (ex: Regular, Suspenso, Cancelado, etc)","meta":{},"name":"situacao_cadastral_tipo","tags":[]}},"compiled":true,"compiled_code":"\nwith\n    fonte as (\n        select *\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`chcpf_bcadastros`\n\n        \n            where\n                timestamp(_airbyte_extracted_at)\n                >= timestamp_sub(current_timestamp(), interval 3 day)\n        \n    ),\n\n    municipio_bd as (\n        select id_municipio_rf, nome as municipio_nome\n        from `basedosdados`.`br_bd_diretorios_brasil`.`municipio`\n    ),\n\n    dominio as (\n        select id, \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(descricao, ' ')) as word\n    )\n as descricao, column\n        from `rj-iplanrio`.`brutos_bcadastro_staging`.`dominio_cpf`\n    ),\n\n    fonte_parseada as (\n        select\n            -- Primary key\n            nullif(json_value(doc, '$.cpfId'), \"\") as cpf_id,\n\n            -- Foreign keys\n            nullif(json_value(doc, '$.codMunDomic'), \"\") as id_municipio_domicilio,\n            nullif(json_value(doc, '$.codMunNat'), \"\") as id_nascimento_municipio,\n            nullif(json_value(doc, '$.codPaisNac'), \"\") as id_pais_nascimento,\n            nullif(json_value(doc, '$.codPaisRes'), \"\") as id_pais_residencia,\n            nullif(json_value(doc, '$.codNatOcup'), \"\") as id_natureza_ocupacao,\n            nullif(json_value(doc, '$.codOcup'), \"\") as id_ocupacao,\n            nullif(json_value(doc, '$.codUA'), \"\") as id_ua,\n\n            -- Person data\n            nullif(json_value(doc, '$.nomeContribuinte'), \"\") as nome,\n            nullif(json_value(doc, '$.nomeSocial'), \"\") as nome_social,\n            nullif(json_value(doc, '$.nomeMae'), \"\") as mae_nome,\n\n            -- Dates\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dtNasc'), \"\")\n            ) as nascimento_data,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dtInscricao'), \"\")\n            ) as inscricao_data,\n            safe.parse_date(\n                '%Y%m%d', nullif(json_value(doc, '$.dtUltAtualiz'), \"\")\n            ) as atualizacao_data,\n\n            -- Status and demographics\n            nullif(json_value(doc, '$.codSitCad'), \"\") as id_situacao_cadastral,\n            nullif(json_value(doc, '$.codSexo'), \"\") as id_sexo,\n            nullif(json_value(doc, '$.anoObito'), \"\") as obito_ano,\n            nullif(json_value(doc, '$.indEstrangeiro'), \"\") as indicativo_estrangeiro,\n            nullif(json_value(doc, '$.indResExt'), \"\") as indicativo_residente_exterior,\n\n            -- Contact\n            nullif(json_value(doc, '$.telefone'), \"\") as telefone,  -- necessário tratativa para extrair ddi,ddd,numero\n            nullif(json_value(doc, '$.email'), \"\") as email,\n\n            -- Address\n            nullif(json_value(doc, '$.cep'), \"\") as endereco_cep,\n            nullif(json_value(doc, '$.ufMunDomic'), \"\") as endereco_uf,\n            nullif(json_value(doc, '$.bairro'), \"\") as endereco_bairro,\n            nullif(json_value(doc, '$.tipoLogradouro'), \"\") as endereco_tipo_logradouro,\n            nullif(json_value(doc, '$.logradouro'), \"\") as endereco_logradouro,\n            nullif(json_value(doc, '$.nroLogradouro'), \"\") as endereco_numero,\n            nullif(json_value(doc, '$.complemento'), \"\") as endereco_complemento,\n            nullif(json_value(doc, '$.municipio'), \"\") as endereco_municipio,\n\n            -- Birth and residence\n            nullif(json_value(doc, '$.ufMunNat'), \"\") as nascimento_uf,\n            nullif(json_value(doc, '$.nomePaisNac'), \"\") as nascimento_pais,\n            nullif(json_value(doc, '$.nomePaisRes'), \"\") as residencia_pais,\n\n            -- Metadata\n            cast(nullif(json_value(doc, '$.anoExerc'), \"\") as int64) as exercicio_ano,\n            nullif(\n                json_value(replace(to_json_string(doc), '~', ''), '$.version'), \"\"\n            ) as version,\n            nullif(json_value(doc, '$.tipo'), \"\") as tipo,\n            nullif(json_value(doc, '$.timestamp'), \"\") as timestamp,\n\n            -- Technical fields\n            seq,\n            last_seq,\n            nullif(json_value(doc, '$.id'), \"\") as id_doc,\n            id,\n            key,\n            nullif(json_value(value, '$.rev'), \"\") as rev,\n\n            nullif(json_value(doc, '$._id'), \"\") as _id,\n            nullif(json_value(doc, '$._rev'), \"\") as _rev,\n            _airbyte_raw_id as airbyte_raw_id,\n            _airbyte_extracted_at as airbyte_extracted_at,\n            struct(\n                nullif(json_value(_airbyte_meta, '$.changes'), \"\") as changes,\n                nullif(json_value(_airbyte_meta, '$.sync_id'), \"\") as sync_id\n            ) as airbyte_meta,\n            _airbyte_generation_id as airbyte_generation_id\n        from fonte\n    ),\n\n    fonte_intermediaria as (\n        select\n            -- Primary key\n            cpf_id as cpf,\n\n            -- Foreign keys\n            id_municipio_domicilio,\n            id_nascimento_municipio,\n            id_pais_nascimento,\n            id_pais_residencia,\n            id_natureza_ocupacao,\n            t.id_ocupacao,\n            id_ua,\n\n            -- Person data\n            nome,\n            nome_social,\n            mae_nome,\n\n            -- Dates\n            nascimento_data,\n            inscricao_data,\n            atualizacao_data,\n\n            -- Status and demographics\n            sc.descricao as situacao_cadastral_tipo,\n            s.descricao as sexo,\n            obito_ano,\n            ie.descricao as estrangeiro_indicador,\n            re.descricao as residente_exterior_indicador,\n\n            -- Contact\n            telefone,  -- necessário tratativa para extrair ddi,ddd,numero\n            email,\n\n            -- Address\n            endereco_cep,\n            endereco_uf,\n            endereco_bairro,\n            endereco_tipo_logradouro,\n            endereco_logradouro,\n            endereco_numero,\n            endereco_complemento,\n\n            -- Birth and residence\n            nascimento_uf,\n            mn.municipio_nome as nascimento_municipio,  -- TODO: CORRIGIR\n            nascimento_pais,\n            residencia_pais,\n            md.municipio_nome as endereco_municipio,\n\n            -- Occupation\n            o.descricao as ocupacao_nome,\n\n            -- Metadata\n            exercicio_ano,\n            version,\n            tipo,\n            timestamp,\n\n            -- Technical fields\n            seq,\n            last_seq,\n            airbyte_raw_id,\n            airbyte_extracted_at,\n            airbyte_meta,\n            airbyte_generation_id,\n\n            -- Partition\n            cast(cpf_id as int64) as cpf_particao,\n\n            -- Outros\n            id,\n            _id,\n            key,\n            rev,\n            _rev,\n            id_doc,\n\n        from fonte_parseada t\n        left join\n            municipio_bd as md\n            on cast(t.id_municipio_domicilio as int64)\n            = cast(md.id_municipio_rf as int64)\n        left join\n            municipio_bd as mn\n            on cast(t.id_nascimento_municipio as int64)\n            = cast(mn.id_municipio_rf as int64)\n        left join\n            (\n                select id as id_ocupacao, descricao\n                from dominio\n                where column = 'ocupacao'\n            ) o\n            on t.id_ocupacao = o.id_ocupacao\n        left join\n            (select id as id_sexo, descricao from dominio where column = 'sexo') s\n            on t.id_sexo = s.id_sexo\n        left join\n            (\n                select id as id_situacao_cadastral, descricao\n                from dominio\n                where column = 'situacao_cadastral'\n            ) sc\n            on t.id_situacao_cadastral = sc.id_situacao_cadastral\n        left join\n            (\n                select\n                    id as indicativo_estrangeiro,\n                    case\n                        upper(id) when 'N' then false when 'S' then true else null\n                    end as descricao\n                from dominio\n                where column = 'indicativo_estrangeiro'\n            ) ie\n            on upper(t.indicativo_estrangeiro) = upper(ie.indicativo_estrangeiro)\n        left join\n            (\n                select\n                    id as indicativo_residente_exterior,\n                    case\n                        upper(id) when 'N' then false when 'S' then true else null\n                    end as descricao\n                from dominio\n                where column = 'indicativo_residente_exterior'\n            ) re\n            on upper(t.indicativo_residente_exterior)\n            = upper(re.indicativo_residente_exterior)\n    ),\n\n    fonte_padronizada as (\n        select\n            -- Primary key\n            cpf,\n\n            -- Foreign keys\n            id_municipio_domicilio,\n            id_nascimento_municipio,\n            id_pais_nascimento,\n            id_pais_residencia,\n            id_natureza_ocupacao,\n            id_ocupacao,\n            id_ua,\n\n            -- Person data\n            nome,\n            nome_social,\n            mae_nome,\n\n            -- Dates\n            nascimento_data,\n            inscricao_data,\n            atualizacao_data,\n\n            -- Status and demographics\n            situacao_cadastral_tipo,\n            lower(sexo) as sexo,\n            obito_ano,\n            estrangeiro_indicador,\n            residente_exterior_indicador,\n\n            -- Contact\n            trim(telefone) as telefone_original,\n            case\n                when regexp_contains(telefone, r'\\+')\n                then regexp_extract(telefone, r'\\+([^\\s]+)')\n                else null\n            end as telefone_ddi,\n            case\n                when regexp_contains(telefone, r'\\(')\n                then regexp_extract(telefone, r'\\(([^\\)]+)\\)')\n                else null\n            end as telefone_ddd,\n            case\n                when telefone is not null\n                then\n                    if(\n                        strpos(reverse(regexp_replace(telefone, r'-', '')), ' ') > 0,\n                        substr(\n                            regexp_replace(telefone, r'-', ''),\n                            length(telefone) - strpos(reverse(telefone), ' ') + 1\n                        ),\n                        regexp_replace(telefone, r'-', '')\n                    )\n                else null\n            end as telefone_numero,\n            email,\n\n            -- Address\n            endereco_cep,\n            lower(endereco_uf) as endereco_uf,\n            endereco_municipio,\n            endereco_bairro,\n            endereco_tipo_logradouro,\n            endereco_logradouro,\n            endereco_numero,\n            endereco_complemento,\n\n            -- Birth and residence\n            lower(nascimento_uf) as nascimento_uf,\n            nascimento_municipio,\n            nascimento_pais,\n            residencia_pais,\n\n            -- Occupation\n            ocupacao_nome,\n\n            -- Metadata\n            exercicio_ano as ano_exercicio,\n            version,\n            tipo,\n            timestamp,\n\n            -- Technical fields\n            struct(\n                seq,\n                last_seq,\n                airbyte_raw_id,\n                airbyte_extracted_at,\n                airbyte_meta,\n                airbyte_generation_id\n            ) as airbyte,\n\n            -- Partition\n            cpf_particao,\n\n            -- Outros\n            id,\n            _id,\n            key,\n            rev,\n            _rev,\n            id_doc\n        from fonte_intermediaria\n    ),\n\n    fonte_deduplicada as (\n        select *\n        from fonte_padronizada\n        qualify row_number() over (partition by cpf order by atualizacao_data desc) = 1\n    ),\n\n    final as (\n        select\n            -- Primary key\n            cpf,\n\n            -- Foreign keys\n            -- id_municipio_domicilio,\n            -- id_nascimento_municipio,\n            -- id_pais_nascimento,\n            -- id_pais_residencia,\n            -- id_natureza_ocupacao,\n            -- id_ocupacao,\n            -- id_ua,\n\n            -- Person data\n            nome,\n            nome_social,\n            mae_nome,\n\n            -- Dates\n            nascimento_data,\n            inscricao_data,\n            atualizacao_data,\n\n            -- Status and demographics\n            situacao_cadastral_tipo,\n            sexo,\n            obito_ano,\n            estrangeiro_indicador,\n            residente_exterior_indicador,\n\n            -- Contato\n            struct(\n                struct(\n                    telefone_ddi as ddi, telefone_ddd as ddd, telefone_numero as numero\n                ) as telefone,\n                email\n            ) as contato,\n\n            -- Endereço\n            struct(\n                endereco_cep as cep,\n                id_pais_residencia as id_pais,\n                residencia_pais as pais,\n                endereco_uf as uf,\n                id_municipio_domicilio as id_municipio,\n                endereco_municipio as municipio,\n                endereco_bairro as bairro,\n                endereco_tipo_logradouro as tipo_logradouro,\n                endereco_logradouro as logradouro,\n                endereco_numero as numero,\n                endereco_complemento as complemento \n            ) as endereco,\n\n            -- Nascimento e residência\n            struct(\n                id_pais_nascimento as id_pais,\n                nascimento_pais as pais,\n                nascimento_uf as uf,\n                id_nascimento_municipio as id_municipio,\n                nascimento_municipio as municipio\n            ) as nascimento_local,\n\n            -- Ocupação\n            struct(\n                id_ocupacao as id,\n                ocupacao_nome as nome,\n                id_natureza_ocupacao as id_natureza,\n                id_ua\n            ) as ocupacao,\n\n            -- Metadados\n            struct(ano_exercicio, version, tipo, timestamp) as metadados,\n\n            -- Technical fields\n            airbyte,\n\n            -- Partition\n            cpf_particao\n\n        from fonte_deduplicada\n        where cpf is not null and cpf != ''\n    )\n\nselect *\nfrom final","compiled_path":"target/compiled/models/raw/bcadastro/raw_bcadastro_cpf.sql","config":{"access":null,"alias":"cpf","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"partition_by":{"copy_partitions":false,"data_type":"int64","field":"cpf_particao","range":{"end":100000000000,"interval":34722222,"start":0},"time_ingestion_partitioning":false},"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.chcpf_bcadastros","source.queries.br_bd_diretorios_brasil.municipio","source.queries.brutos_bcadastro_staging.dominio_cpf"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.chcpf_bcadastros",{"col":14,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cpf.sql","index":51,"line":5}],["source.queries.br_bd_diretorios_brasil.municipio",{"col":14,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cpf.sql","index":406,"line":16}],["source.queries.brutos_bcadastro_staging.dominio_cpf",{"col":14,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_cpf.sql","index":566,"line":21}]]},"description":"Tabela contendo dados de pessoas físicas do Cadastro de Pessoas Físicas (CPF). Atualizada diariamente a partir do sistema BCadastro. Stakeholders principais: Secretaria Municipal de Fazenda.","fqn":["queries","raw","bcadastro","raw_bcadastro_cpf"],"language":"sql","metrics":[],"name":"raw_bcadastro_cpf","original_file_path":"models/raw/bcadastro/raw_bcadastro_cpf.sql","package_name":"queries","patch_path":"models/raw/bcadastro/raw_bcadastro_cpf.yml","path":"models/raw/bcadastro/raw_bcadastro_cpf.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro`.`cpf`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro","sources":[["brutos_bcadastro_staging","chcpf_bcadastros"],["br_bd_diretorios_brasil","municipio"],["brutos_bcadastro_staging","dominio_cpf"]],"unique_id":"model.queries.raw_bcadastro_cpf","unrendered_config":{}},"model.queries.raw_bcadastro_dominio":{"alias":"dominio","checksum":{"checksum":"b73e5a57dd51af485d7b2727d7c3170d93572982125b3c706ba8b1a4007c694d","name":"SHA256"},"columns":{"column":{"config":{},"constraints":[],"data_type":"STRING","description":"Identificador do dominio (sexo, codigo_pais, tipo_socio, ...)","meta":{},"name":"column","tags":[]},"descricao":{"config":{},"constraints":[],"data_type":"STRING","description":"Descrição do identificador","meta":{},"name":"descricao","tags":[]},"id":{"config":{},"constraints":[],"data_type":"STRING","description":"Código Identificador","meta":{},"name":"id","tags":[]},"source":{"config":{},"constraints":[],"data_type":"STRING not null","description":"Indica se a fonte do dominio é cpf ou cnpj","meta":{},"name":"source","tags":[]}},"compiled":true,"compiled_code":"\n\nselect id, \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(descricao, ' ')) as word\n    )\n as descricao, column, 'cpf' as source\nfrom `rj-iplanrio`.`brutos_bcadastro_staging`.`dominio_cpf`\nunion all\nselect id, \n    (\n        select\n            string_agg(\n                case\n                    when\n                        lower(word) in (\n                            'a',\n                            'à',\n                            'ao',\n                            'com',\n                            'e',\n                            'é',\n                            'em',\n                            'da',\n                            'das',\n                            'de',\n                            'do',\n                            'dos',\n                            'na',\n                            'no',\n                            'o',\n                            'para',\n                            'por',\n                            'um',\n                            'os',\n                            'as',\n                            'um',\n                            'uma',\n                            'uns',\n                            'umas'\n                        )\n                    then lower(word)\n                    when\n                        lower(word)\n                        in ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x')\n                    then upper(word)\n                    else concat(upper(substr(word, 1, 1)), lower(substr(word, 2)))\n                end,\n                ' '\n            )\n        from unnest(split(descricao, ' ')) as word\n    )\n as descricao, column, 'cnpj' as source\nfrom `rj-iplanrio`.`brutos_bcadastro_staging`.`dominio_cnpj`","compiled_path":"target/compiled/models/raw/bcadastro/raw_bcadastro_dominio.sql","config":{"access":null,"alias":"dominio","auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":"brutos_bcadastro","sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw","weekly"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_bcadastro_staging.dominio_cpf","source.queries.brutos_bcadastro_staging.dominio_cnpj"],"nodes_with_ref_location":[["source.queries.brutos_bcadastro_staging.dominio_cpf",{"col":6,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_dominio.sql","index":198,"line":10}],["source.queries.brutos_bcadastro_staging.dominio_cnpj",{"col":6,"expanded":null,"file":"models/raw/bcadastro/raw_bcadastro_dominio.sql","index":347,"line":13}]]},"description":"O modelo dominio é um dicionario de ids dos dados do bcadastro","fqn":["queries","raw","bcadastro","raw_bcadastro_dominio"],"language":"sql","metrics":[],"name":"raw_bcadastro_dominio","original_file_path":"models/raw/bcadastro/raw_bcadastro_dominio.sql","package_name":"queries","patch_path":"models/raw/bcadastro/raw_bcadastro_dominio.yml","path":"models/raw/bcadastro/raw_bcadastro_dominio.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_bcadastro`.`dominio`","resource_type":"model","schema":"pedrosiqueira__brutos_bcadastro","sources":[["brutos_bcadastro_staging","dominio_cpf"],["brutos_bcadastro_staging","dominio_cnpj"]],"unique_id":"model.queries.raw_bcadastro_dominio","unrendered_config":{}},"model.queries.raw_taxirio_races":{"alias":"raw_taxirio_races","checksum":{"checksum":"cbf548821f7055cec31d3bb818d56311a304351b1f0539df8a051e90132b2076","name":"SHA256"},"columns":{"ano_particao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"ano_particao","tags":[]},"billing_associatedcorporative_externalpropertypassenger":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_associatedcorporative_externalpropertypassenger","tags":[]},"billing_associateddiscount":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_associateddiscount","tags":[]},"billing_associatedminimumfare":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_associatedminimumfare","tags":[]},"billing_associatedpaymentmethod":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_associatedpaymentmethod","tags":[]},"billing_associatedtaximeter":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_associatedtaximeter","tags":[]},"billing_estimatedprice":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_estimatedprice","tags":[]},"billing_finalprice_minprice":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_minprice","tags":[]},"billing_finalprice_totalbykm":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totalbykm","tags":[]},"billing_finalprice_totalbystoppedtime":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totalbystoppedtime","tags":[]},"billing_finalprice_totalbytaximeter":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totalbytaximeter","tags":[]},"billing_finalprice_totaldiscount":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totaldiscount","tags":[]},"billing_finalprice_totalpricetoll":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totalpricetoll","tags":[]},"billing_finalprice_totaltopay":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totaltopay","tags":[]},"billing_finalprice_totalwithdiscount":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totalwithdiscount","tags":[]},"billing_finalprice_totalwithoutdiscount":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"billing_finalprice_totalwithoutdiscount","tags":[]},"broadcastqtd":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"broadcastqtd","tags":[]},"car":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"car","tags":[]},"city":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"city","tags":[]},"createdat":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"createdat","tags":[]},"dia_particao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"dia_particao","tags":[]},"driver":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"driver","tags":[]},"event":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"event","tags":[]},"id":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"id","tags":[]},"isinvalid":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"isinvalid","tags":[]},"issuspect":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"issuspect","tags":[]},"mes_particao":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"mes_particao","tags":[]},"passenger":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"passenger","tags":[]},"rating_score":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"rating_score","tags":[]},"routeorigindestination_distance_text":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"routeorigindestination_distance_text","tags":[]},"routeorigindestination_distance_value":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"routeorigindestination_distance_value","tags":[]},"routeorigindestination_duration_text":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"routeorigindestination_duration_text","tags":[]},"routeorigindestination_duration_value":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"routeorigindestination_duration_value","tags":[]},"status":{"config":{},"constraints":[],"data_type":"STRING","meta":{},"name":"status","tags":[]}},"compiled":true,"compiled_code":"with\n    source as (select * from `rj-iplanrio`.`brutos_taxirio_staging`.`races`),\n    renamed as (\n        select\n            id,\n            createdat,\n            event,\n            passenger,\n            city,\n            broadcastqtd,\n            rating_score,\n            issuspect,\n            isinvalid,\n            status,\n            car,\n            driver,\n            routeorigindestination_distance_text,\n            routeorigindestination_distance_value,\n            routeorigindestination_duration_text,\n            routeorigindestination_duration_value,\n            billing_estimatedprice,\n            billing_associatedpaymentmethod,\n            billing_associatedtaximeter,\n            billing_associatedminimumfare,\n            billing_associateddiscount,\n            billing_associatedcorporative_externalpropertypassenger,\n            billing_finalprice_totaltopay,\n            billing_finalprice_totalpricetoll,\n            billing_finalprice_totalwithdiscount,\n            billing_finalprice_totaldiscount,\n            billing_finalprice_totalwithoutdiscount,\n            billing_finalprice_totalbytaximeter,\n            billing_finalprice_totalbystoppedtime,\n            billing_finalprice_totalbykm,\n            billing_finalprice_minprice,\n            ano_particao,\n            mes_particao,\n            dia_particao\n        from source\n    )\n\nselect *\nfrom renamed","compiled_path":"target/compiled/models/raw/taxirio/raw_taxirio_races.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"schema":null,"sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["source.queries.brutos_taxirio_staging.races"],"nodes_with_ref_location":[["source.queries.brutos_taxirio_staging.races",{"col":30,"expanded":null,"file":"models/raw/taxirio/raw_taxirio_races.sql","index":34,"line":2}]]},"fqn":["queries","raw","taxirio","raw_taxirio_races"],"language":"sql","metrics":[],"name":"raw_taxirio_races","original_file_path":"models/raw/taxirio/raw_taxirio_races.sql","package_name":"queries","path":"models/raw/taxirio/raw_taxirio_races.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__gerenciamento__dbt`.`raw_taxirio_races`","resource_type":"model","schema":"pedrosiqueira__gerenciamento__dbt","sources":[["brutos_taxirio_staging","races"]],"unique_id":"model.queries.raw_taxirio_races","unrendered_config":{}},"model.queries.raw_teste_clickup_journalist":{"alias":"raw_teste_clickup_journalist","checksum":{"checksum":"62d10ff37bfeecacd73977876645b9b4dd9c8f20a78230bf241ff0f8f349a840","name":"SHA256"},"columns":{"id_unidade_administrativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Código da Unidade Administrativa da PCRJ, é uma Unidade de Gestão que possui existência física e é ocupada por objetos e/ou pessoas e consome material de escritório, de limpeza, etc","meta":{},"name":"id_unidade_administrativa","tags":[]},"nivel":{"config":{},"constraints":[],"data_type":"STRING","description":"Nível hierárquico na árvore das Unidades Administrativas","meta":{},"name":"nivel","tags":[]},"nome_unidade_administrativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Nome da Unidade Administrativa da PCRJ","meta":{},"name":"nome_unidade_administrativa","tags":[]},"ordem_absoluta":{"config":{},"constraints":[],"data_type":"STRING","description":"Ordem absoluta é a posição da Unidade Administrativa em relação a sua Unidade Básica. Será 1, quando a UA é a própria UA básica e sequencialmente todas as UAs filhas","meta":{},"name":"ordem_absoluta","tags":[]},"ordem_relativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Ordem relativa é a posição da Unidade Administrativa em relação a sua Unidade Administrativa Pai.","meta":{},"name":"ordem_relativa","tags":[]},"ordem_unidade_administrativa_basica":{"config":{},"constraints":[],"data_type":"STRING","description":"A ordem da UA basica é uma numeração para ordenar as unidades do segundo nível da PCRJ. Todos os demais níveis terão a mesma ordem da UA basica para aquela UA","meta":{},"name":"ordem_unidade_administrativa_basica","tags":[]},"sigla_unidade_administrativa":{"config":{},"constraints":[],"data_type":"INT64","description":"Sigla da Unidade Administrativa da PCRJ","meta":{},"name":"sigla_unidade_administrativa","tags":[]},"updated_at":{"config":{},"constraints":[],"data_type":"DATETIME","description":"Data e hora da última atualização do registro","meta":{},"name":"updated_at","tags":[]}},"compiled":true,"compiled_code":"-- tabela de CNO - Cadastro Nacional de Obras\n\n\n\nSELECT\n  SAFE_CAST(\n    REGEXP_REPLACE(cd_ua, r'\\.0$', '') AS STRING\n  ) as id_unidade_administrativa,\n  CAST(\n    REGEXP_REPLACE(sigla_ua, r'\\.0$', '') AS INT64\n  ) as sigla_unidade_administrativa,\n  SAFE_CAST(\n    REGEXP_REPLACE(nome_ua, r'\\.0$', '') AS STRING\n  ) as nome_unidade_administrativa,\n  -- SAFE_CAST(\n  --  REGEXP_REPLACE(cd_ua_pai, r'\\.0$', '') AS STRING\n  -- #) as id_unidade_administrativa_pai,\n  -- COLUMN REMOVED FROM SCHEMA\n  SAFE_CAST(\n    REGEXP_REPLACE(nivel, r'\\.0$', '') AS STRING\n  ) as nivel,\n  SAFE_CAST(\n    REGEXP_REPLACE(ordem_ua_basica, r'\\.0$', '') AS STRING\n  ) as ordem_unidade_administrativa_basica,\n  SAFE_CAST(\n    REGEXP_REPLACE(ordem_absoluta, r'\\.0$', '') AS STRING\n  ) as ordem_absoluta,\n  SAFE_CAST(\n    REGEXP_REPLACE(ordem_relativa, r'\\.0$', '') AS STRING\n  ) as ordem_relativa,\n  CAST(\n    PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%E*S%Ez', updated_at) \n    AS DATETIME\n  ) AS updated_at\n    \nFROM `rj-iplanrio.unidades_administrativas_staging.orgaos`","compiled_path":"target/compiled/models/raw/teste_clickup_journalist/raw_teste_clickup_journalist.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"require_partition_filter":false,"schema":null,"sql_header":null,"static_analysis":null,"table_format":null,"tags":["raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"description":"**Descrição**: Retorna todas as Unidades de Gestão associadas ao tipo Unidade Administrativa, com o relacionamento entre elas, informando o código da unidade pai, para a composição da árvore de UAs da PCRJ.\n**Frequência de atualização**: Diário\n**Cobertura temporal**: Não informado\n**Órgão gestor dos dados**: GBP/CGGI\n**Publicado por**: Sandra Regina Fonseca da Costa\n**Publicado por (email)**: sandracostasmu@gmail.com","fqn":["queries","raw","teste_clickup_journalist","raw_teste_clickup_journalist"],"language":"sql","metrics":[],"name":"raw_teste_clickup_journalist","original_file_path":"models/raw/teste_clickup_journalist/raw_teste_clickup_journalist.sql","package_name":"queries","patch_path":"models/raw/teste_clickup_journalist/raw_unidades_administrativas_orgaos.yml","path":"models/raw/teste_clickup_journalist/raw_teste_clickup_journalist.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__gerenciamento__dbt`.`raw_teste_clickup_journalist`","resource_type":"model","schema":"pedrosiqueira__gerenciamento__dbt","sources":[],"unique_id":"model.queries.raw_teste_clickup_journalist","unrendered_config":{}},"model.queries.raw_unidades_administrativas_orgaos":{"alias":"raw_unidades_administrativas_orgaos","checksum":{"checksum":"0e7e8a75fc054263e697b3c1c9ee2e35ee33cb7b943bd204d2b371856c394907","name":"SHA256"},"columns":{"id_unidade_administrativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Código da Unidade Administrativa da PCRJ, é uma Unidade de Gestão que possui existência física e é ocupada por objetos e/ou pessoas e consome material de escritório, de limpeza, etc","meta":{},"name":"id_unidade_administrativa","tags":[]},"nivel":{"config":{},"constraints":[],"data_type":"STRING","description":"Nível hierárquico na árvore das Unidades Administrativas","meta":{},"name":"nivel","tags":[]},"nome_unidade_administrativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Nome da Unidade Administrativa da PCRJ","meta":{},"name":"nome_unidade_administrativa","tags":[]},"ordem_absoluta":{"config":{},"constraints":[],"data_type":"STRING","description":"Ordem absoluta é a posição da Unidade Administrativa em relação a sua Unidade Básica. Será 1, quando a UA é a própria UA básica e sequencialmente todas as UAs filhas","meta":{},"name":"ordem_absoluta","tags":[]},"ordem_relativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Ordem relativa é a posição da Unidade Administrativa em relação a sua Unidade Administrativa Pai.","meta":{},"name":"ordem_relativa","tags":[]},"ordem_unidade_administrativa_basica":{"config":{},"constraints":[],"data_type":"STRING","description":"A ordem da UA basica é uma numeração para ordenar as unidades do segundo nível da PCRJ. Todos os demais níveis terão a mesma ordem da UA basica para aquela UA","meta":{},"name":"ordem_unidade_administrativa_basica","tags":[]},"sigla_unidade_administrativa":{"config":{},"constraints":[],"data_type":"STRING","description":"Sigla da Unidade Administrativa da PCRJ","meta":{},"name":"sigla_unidade_administrativa","tags":[]},"updated_at":{"config":{},"constraints":[],"data_type":"DATETIME","description":"Data e hora da última atualização do registro","meta":{},"name":"updated_at","tags":[]}},"compiled":true,"compiled_code":"SELECT\n  SAFE_CAST(\n    REGEXP_REPLACE(cd_ua, r'\\.0$', '') AS STRING\n  ) as id_unidade_administrativa,\n  SAFE_CAST(\n    REGEXP_REPLACE(sigla_ua, r'\\.0$', '') AS STRING\n  ) as sigla_unidade_administrativa,\n  SAFE_CAST(\n    REGEXP_REPLACE(nome_ua, r'\\.0$', '') AS STRING\n  ) as nome_unidade_administrativa,\n  -- SAFE_CAST(\n  --  REGEXP_REPLACE(cd_ua_pai, r'\\.0$', '') AS STRING\n  -- #) as id_unidade_administrativa_pai,\n  -- COLUMN REMOVED FROM SCHEMA\n  SAFE_CAST(\n    REGEXP_REPLACE(nivel, r'\\.0$', '') AS STRING\n  ) as nivel,\n  SAFE_CAST(\n    REGEXP_REPLACE(ordem_ua_basica, r'\\.0$', '') AS STRING\n  ) as ordem_unidade_administrativa_basica,\n  SAFE_CAST(\n    REGEXP_REPLACE(ordem_absoluta, r'\\.0$', '') AS STRING\n  ) as ordem_absoluta,\n  SAFE_CAST(\n    REGEXP_REPLACE(ordem_relativa, r'\\.0$', '') AS STRING\n  ) as ordem_relativa,\n  CAST(\n    PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%E*S%Ez', updated_at) \n    AS DATETIME\n  ) AS updated_at\n    \nFROM `rj-iplanrio.unidades_administrativas_staging.orgaos`","compiled_path":"target/compiled/models/raw/unidades_administrativas/raw_unidades_administrativas_orgaos.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":{"columns":true,"relation":true},"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":true,"identifier":true,"schema":true},"schema":"brutos_unidades_administrativas","sql_header":null,"static_analysis":null,"table_format":null,"tags":["daily","raw"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":[],"nodes_with_ref_location":[]},"description":"**Descrição**: Retorna todas as Unidades de Gestão associadas ao tipo Unidade Administrativa, com o relacionamento entre elas, informando o código da unidade pai, para a composição da árvore de UAs da PCRJ.\n**Frequência de atualização**: Diário\n**Cobertura temporal**: Não informado\n**Órgão gestor dos dados**: GBP/CGGI\n**Publicado por**: Sandra Regina Fonseca da Costa\n**Publicado por (email)**: sandracostasmu@gmail.com","fqn":["queries","raw","unidades_administrativas","raw_unidades_administrativas_orgaos"],"language":"sql","metrics":[],"name":"raw_unidades_administrativas_orgaos","original_file_path":"models/raw/unidades_administrativas/raw_unidades_administrativas_orgaos.sql","package_name":"queries","patch_path":"models/raw/unidades_administrativas/raw_unidades_administrativas_orgaos.yml","path":"models/raw/unidades_administrativas/raw_unidades_administrativas_orgaos.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"`rj-iplanrio-dev`.`pedrosiqueira__brutos_unidades_administrativas`.`raw_unidades_administrativas_orgaos`","resource_type":"model","schema":"pedrosiqueira__brutos_unidades_administrativas","sources":[],"unique_id":"model.queries.raw_unidades_administrativas_orgaos","unrendered_config":{}},"test.queries.not_null_raw_bcadastro_cnpj_":{"alias":"not_null_raw_bcadastro_cnpj_","checksum":{"checksum":"c20a4213c6b8d6a7df75361c641db559f99330f0c9dc6862ef719e165826bdf5","name":"SHA256"},"columns":{},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","quoting":{"database":true,"identifier":true,"schema":true},"schema":"dbt_test__audit","warn_if":"!= 0"},"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["model.queries.raw_bcadastro_cnpj"],"nodes_with_ref_location":[["model.queries.raw_bcadastro_cnpj",{"col":65,"expanded":null,"file":"generic_tests/not_null_raw_bcadastro_cnpj_.sql","index":64,"line":1}]]},"fqn":["queries","not_null_raw_bcadastro_cnpj_"],"metrics":[],"name":"not_null_raw_bcadastro_cnpj_","original_file_path":"target/generic_tests/not_null_raw_bcadastro_cnpj_.sql","package_name":"queries","path":"generic_tests/not_null_raw_bcadastro_cnpj_.sql","raw_code":"","refs":[{"name":"raw_bcadastro_cnpj"}],"resource_type":"test","schema":"pedrosiqueira__dbt_test__audit","sources":[],"unique_id":"test.queries.not_null_raw_bcadastro_cnpj_","unrendered_config":{}},"test.queries.not_null_raw_bcadastro_cpf_":{"alias":"not_null_raw_bcadastro_cpf_","checksum":{"checksum":"d08db9e7516eed7ade59d95857883a278c46a8d9ce83cbc8e71f04f816512e20","name":"SHA256"},"columns":{},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","quoting":{"database":true,"identifier":true,"schema":true},"schema":"dbt_test__audit","warn_if":"!= 0"},"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["model.queries.raw_bcadastro_cpf"],"nodes_with_ref_location":[["model.queries.raw_bcadastro_cpf",{"col":62,"expanded":null,"file":"generic_tests/not_null_raw_bcadastro_cpf_.sql","index":61,"line":1}]]},"fqn":["queries","not_null_raw_bcadastro_cpf_"],"metrics":[],"name":"not_null_raw_bcadastro_cpf_","original_file_path":"target/generic_tests/not_null_raw_bcadastro_cpf_.sql","package_name":"queries","path":"generic_tests/not_null_raw_bcadastro_cpf_.sql","raw_code":"","refs":[{"name":"raw_bcadastro_cpf"}],"resource_type":"test","schema":"pedrosiqueira__dbt_test__audit","sources":[],"unique_id":"test.queries.not_null_raw_bcadastro_cpf_","unrendered_config":{}},"test.queries.unique_raw_bcadastro_cnpj_":{"alias":"unique_raw_bcadastro_cnpj_","checksum":{"checksum":"8384972408fa9b60087f10f0d1c798dc0f6f3022b5b164ed1e3ca4b89d938fb8","name":"SHA256"},"columns":{},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","quoting":{"database":true,"identifier":true,"schema":true},"schema":"dbt_test__audit","warn_if":"!= 0"},"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["model.queries.raw_bcadastro_cnpj"],"nodes_with_ref_location":[["model.queries.raw_bcadastro_cnpj",{"col":63,"expanded":null,"file":"generic_tests/unique_raw_bcadastro_cnpj_.sql","index":62,"line":1}]]},"fqn":["queries","unique_raw_bcadastro_cnpj_"],"metrics":[],"name":"unique_raw_bcadastro_cnpj_","original_file_path":"target/generic_tests/unique_raw_bcadastro_cnpj_.sql","package_name":"queries","path":"generic_tests/unique_raw_bcadastro_cnpj_.sql","raw_code":"","refs":[{"name":"raw_bcadastro_cnpj"}],"resource_type":"test","schema":"pedrosiqueira__dbt_test__audit","sources":[],"unique_id":"test.queries.unique_raw_bcadastro_cnpj_","unrendered_config":{}},"test.queries.unique_raw_bcadastro_cpf_":{"alias":"unique_raw_bcadastro_cpf_","checksum":{"checksum":"b5b6d6e0255b76026219a58539c1b996b0fc2bde3f02813423ee231bb701455d","name":"SHA256"},"columns":{},"config":{"enabled":true,"error_if":"!= 0","fail_calc":"count(*)","quoting":{"database":true,"identifier":true,"schema":true},"schema":"dbt_test__audit","warn_if":"!= 0"},"contract":{"alias_types":false,"enforced":false},"database":"rj-iplanrio-dev","depends_on":{"macros":[],"nodes":["model.queries.raw_bcadastro_cpf"],"nodes_with_ref_location":[["model.queries.raw_bcadastro_cpf",{"col":60,"expanded":null,"file":"generic_tests/unique_raw_bcadastro_cpf_.sql","index":59,"line":1}]]},"fqn":["queries","unique_raw_bcadastro_cpf_"],"metrics":[],"name":"unique_raw_bcadastro_cpf_","original_file_path":"target/generic_tests/unique_raw_bcadastro_cpf_.sql","package_name":"queries","path":"generic_tests/unique_raw_bcadastro_cpf_.sql","raw_code":"","refs":[{"name":"raw_bcadastro_cpf"}],"resource_type":"test","schema":"pedrosiqueira__dbt_test__audit","sources":[],"unique_id":"test.queries.unique_raw_bcadastro_cpf_","unrendered_config":{}}},"parent_map":{},"saved_queries":{},"selectors":{},"semantic_models":{},"sources":{"source.queries.adm_contrato_gestao_staging.despesas":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-cvl","fqn":["queries","raw","cvl__adm_contrato_gestao","despesas"],"identifier":"despesas","loaded_at_field":"","loaded_at_query":"","loader":"","name":"despesas","original_file_path":"models/raw/cvl__adm_contrato_gestao/_adm_contrato_gestao__sources.yml","package_name":"queries","patch_path":"models/raw/cvl__adm_contrato_gestao/_adm_contrato_gestao__sources.yml","path":"models/raw/cvl__adm_contrato_gestao/_adm_contrato_gestao__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-cvl`.`adm_contrato_gestao_staging`.`despesas`","resource_type":"source","schema":"adm_contrato_gestao_staging","source_description":"","source_name":"adm_contrato_gestao_staging","unique_id":"source.queries.adm_contrato_gestao_staging.despesas","unrendered_config":{}},"source.queries.br_bd_diretorios_brasil.municipio":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"basedosdados","fqn":["queries","raw","bcadastro","municipio"],"identifier":"municipio","loaded_at_field":"","loaded_at_query":"","loader":"","name":"municipio","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`basedosdados`.`br_bd_diretorios_brasil`.`municipio`","resource_type":"source","schema":"br_bd_diretorios_brasil","source_description":"","source_name":"br_bd_diretorios_brasil","unique_id":"source.queries.br_bd_diretorios_brasil.municipio","unrendered_config":{}},"source.queries.br_bd_diretorios_brasil.uf":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"basedosdados","fqn":["queries","raw","bcadastro","uf"],"identifier":"uf","loaded_at_field":"","loaded_at_query":"","loader":"","name":"uf","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`basedosdados`.`br_bd_diretorios_brasil`.`uf`","resource_type":"source","schema":"br_bd_diretorios_brasil","source_description":"","source_name":"br_bd_diretorios_brasil","unique_id":"source.queries.br_bd_diretorios_brasil.uf","unrendered_config":{}},"source.queries.brutos_bcadastro_staging.chcaepf_bcadastros":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","bcadastro","chcaepf_bcadastros"],"identifier":"chcaepf_bcadastros","loaded_at_field":"","loaded_at_query":"","loader":"","name":"chcaepf_bcadastros","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_bcadastro_staging`.`chcaepf_bcadastros`","resource_type":"source","schema":"brutos_bcadastro_staging","source_description":"","source_name":"brutos_bcadastro_staging","unique_id":"source.queries.brutos_bcadastro_staging.chcaepf_bcadastros","unrendered_config":{}},"source.queries.brutos_bcadastro_staging.chcno_bcadastros":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","bcadastro","chcno_bcadastros"],"identifier":"chcno_bcadastros","loaded_at_field":"","loaded_at_query":"","loader":"","name":"chcno_bcadastros","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_bcadastro_staging`.`chcno_bcadastros`","resource_type":"source","schema":"brutos_bcadastro_staging","source_description":"","source_name":"brutos_bcadastro_staging","unique_id":"source.queries.brutos_bcadastro_staging.chcno_bcadastros","unrendered_config":{}},"source.queries.brutos_bcadastro_staging.chcnpj_bcadastros":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","bcadastro","chcnpj_bcadastros"],"identifier":"chcnpj_bcadastros","loaded_at_field":"","loaded_at_query":"","loader":"","name":"chcnpj_bcadastros","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_bcadastro_staging`.`chcnpj_bcadastros`","resource_type":"source","schema":"brutos_bcadastro_staging","source_description":"","source_name":"brutos_bcadastro_staging","unique_id":"source.queries.brutos_bcadastro_staging.chcnpj_bcadastros","unrendered_config":{}},"source.queries.brutos_bcadastro_staging.chcpf_bcadastros":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","bcadastro","chcpf_bcadastros"],"identifier":"chcpf_bcadastros","loaded_at_field":"","loaded_at_query":"","loader":"","name":"chcpf_bcadastros","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_bcadastro_staging`.`chcpf_bcadastros`","resource_type":"source","schema":"brutos_bcadastro_staging","source_description":"","source_name":"brutos_bcadastro_staging","unique_id":"source.queries.brutos_bcadastro_staging.chcpf_bcadastros","unrendered_config":{}},"source.queries.brutos_bcadastro_staging.dominio_cnpj":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","bcadastro","dominio_cnpj"],"identifier":"dominio_cnpj","loaded_at_field":"","loaded_at_query":"","loader":"","name":"dominio_cnpj","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_bcadastro_staging`.`dominio_cnpj`","resource_type":"source","schema":"brutos_bcadastro_staging","source_description":"","source_name":"brutos_bcadastro_staging","unique_id":"source.queries.brutos_bcadastro_staging.dominio_cnpj","unrendered_config":{}},"source.queries.brutos_bcadastro_staging.dominio_cpf":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","bcadastro","dominio_cpf"],"identifier":"dominio_cpf","loaded_at_field":"","loaded_at_query":"","loader":"","name":"dominio_cpf","original_file_path":"models/raw/bcadastro/_bcadastro__sources.yml","package_name":"queries","patch_path":"models/raw/bcadastro/_bcadastro__sources.yml","path":"models/raw/bcadastro/_bcadastro__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_bcadastro_staging`.`dominio_cpf`","resource_type":"source","schema":"brutos_bcadastro_staging","source_description":"","source_name":"brutos_bcadastro_staging","unique_id":"source.queries.brutos_bcadastro_staging.dominio_cpf","unrendered_config":{}},"source.queries.brutos_ergon_staging.VW_DLK_ERG_CARGOS_":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","ergon","VW_DLK_ERG_CARGOS_"],"identifier":"VW_DLK_ERG_CARGOS_","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DLK_ERG_CARGOS_","original_file_path":"models/raw/ergon/_ergon__sources.yml","package_name":"queries","patch_path":"models/raw/ergon/_ergon__sources.yml","path":"models/raw/ergon/_ergon__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`brutos_ergon_staging`.`VW_DLK_ERG_CARGOS_`","resource_type":"source","schema":"brutos_ergon_staging","source_description":"","source_name":"brutos_ergon_staging","unique_id":"source.queries.brutos_ergon_staging.VW_DLK_ERG_CARGOS_","unrendered_config":{}},"source.queries.brutos_ergon_staging.VW_DLK_ERG_EMPRESAS":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","ergon","VW_DLK_ERG_EMPRESAS"],"identifier":"VW_DLK_ERG_EMPRESAS","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DLK_ERG_EMPRESAS","original_file_path":"models/raw/ergon/_ergon__sources.yml","package_name":"queries","patch_path":"models/raw/ergon/_ergon__sources.yml","path":"models/raw/ergon/_ergon__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`brutos_ergon_staging`.`VW_DLK_ERG_EMPRESAS`","resource_type":"source","schema":"brutos_ergon_staging","source_description":"","source_name":"brutos_ergon_staging","unique_id":"source.queries.brutos_ergon_staging.VW_DLK_ERG_EMPRESAS","unrendered_config":{}},"source.queries.brutos_ergon_staging.VW_DLK_ERG_FUNCIONARIOS":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","ergon","VW_DLK_ERG_FUNCIONARIOS"],"identifier":"VW_DLK_ERG_FUNCIONARIOS","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DLK_ERG_FUNCIONARIOS","original_file_path":"models/raw/ergon/_ergon__sources.yml","package_name":"queries","patch_path":"models/raw/ergon/_ergon__sources.yml","path":"models/raw/ergon/_ergon__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`brutos_ergon_staging`.`VW_DLK_ERG_FUNCIONARIOS`","resource_type":"source","schema":"brutos_ergon_staging","source_description":"","source_name":"brutos_ergon_staging","unique_id":"source.queries.brutos_ergon_staging.VW_DLK_ERG_FUNCIONARIOS","unrendered_config":{}},"source.queries.brutos_ergon_staging.VW_DLK_ERG_HSETOR_":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","ergon","VW_DLK_ERG_HSETOR_"],"identifier":"VW_DLK_ERG_HSETOR_","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DLK_ERG_HSETOR_","original_file_path":"models/raw/ergon/_ergon__sources.yml","package_name":"queries","patch_path":"models/raw/ergon/_ergon__sources.yml","path":"models/raw/ergon/_ergon__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`brutos_ergon_staging`.`VW_DLK_ERG_HSETOR_`","resource_type":"source","schema":"brutos_ergon_staging","source_description":"","source_name":"brutos_ergon_staging","unique_id":"source.queries.brutos_ergon_staging.VW_DLK_ERG_HSETOR_","unrendered_config":{}},"source.queries.brutos_ergon_staging.VW_DLK_ERG_PROVIMENTOS_EV":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","ergon","VW_DLK_ERG_PROVIMENTOS_EV"],"identifier":"VW_DLK_ERG_PROVIMENTOS_EV","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DLK_ERG_PROVIMENTOS_EV","original_file_path":"models/raw/ergon/_ergon__sources.yml","package_name":"queries","patch_path":"models/raw/ergon/_ergon__sources.yml","path":"models/raw/ergon/_ergon__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`brutos_ergon_staging`.`VW_DLK_ERG_PROVIMENTOS_EV`","resource_type":"source","schema":"brutos_ergon_staging","source_description":"","source_name":"brutos_ergon_staging","unique_id":"source.queries.brutos_ergon_staging.VW_DLK_ERG_PROVIMENTOS_EV","unrendered_config":{}},"source.queries.brutos_ergon_staging.VW_DLK_ERG_VINCULOS":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","ergon","VW_DLK_ERG_VINCULOS"],"identifier":"VW_DLK_ERG_VINCULOS","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DLK_ERG_VINCULOS","original_file_path":"models/raw/ergon/_ergon__sources.yml","package_name":"queries","patch_path":"models/raw/ergon/_ergon__sources.yml","path":"models/raw/ergon/_ergon__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`brutos_ergon_staging`.`VW_DLK_ERG_VINCULOS`","resource_type":"source","schema":"brutos_ergon_staging","source_description":"","source_name":"brutos_ergon_staging","unique_id":"source.queries.brutos_ergon_staging.VW_DLK_ERG_VINCULOS","unrendered_config":{}},"source.queries.brutos_gestao_escolar_rh_staging.RHU_FUNCIONARIOSATIVOS":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-sme","fqn":["queries","raw","gestao_escolar_rh","RHU_FUNCIONARIOSATIVOS"],"identifier":"RHU_FUNCIONARIOSATIVOS","loaded_at_field":"","loaded_at_query":"","loader":"","name":"RHU_FUNCIONARIOSATIVOS","original_file_path":"models/raw/gestao_escolar_rh/_gestao_escolar_rh__sources.yml","package_name":"queries","patch_path":"models/raw/gestao_escolar_rh/_gestao_escolar_rh__sources.yml","path":"models/raw/gestao_escolar_rh/_gestao_escolar_rh__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-sme`.`brutos_gestao_escolar_rh_staging`.`RHU_FUNCIONARIOSATIVOS`","resource_type":"source","schema":"brutos_gestao_escolar_rh_staging","source_description":"","source_name":"brutos_gestao_escolar_rh_staging","unique_id":"source.queries.brutos_gestao_escolar_rh_staging.RHU_FUNCIONARIOSATIVOS","unrendered_config":{}},"source.queries.brutos_taxirio_staging.races":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","taxirio","races"],"identifier":"races","loaded_at_field":"","loaded_at_query":"","loader":"","name":"races","original_file_path":"models/raw/taxirio/_taxirio__sources.yml","package_name":"queries","patch_path":"models/raw/taxirio/_taxirio__sources.yml","path":"models/raw/taxirio/_taxirio__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`brutos_taxirio_staging`.`races`","resource_type":"source","schema":"brutos_taxirio_staging","source_description":"","source_name":"brutos_taxirio_staging","unique_id":"source.queries.brutos_taxirio_staging.races","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_CLASSE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_CLASSE"],"identifier":"VW_CLASSE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_CLASSE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_CLASSE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_CLASSE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_DEVOLUCAO_MATERIAL":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_DEVOLUCAO_MATERIAL"],"identifier":"VW_DEVOLUCAO_MATERIAL","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_DEVOLUCAO_MATERIAL","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_DEVOLUCAO_MATERIAL`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_DEVOLUCAO_MATERIAL","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_FECHAMENTO_ESTOQUE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_FECHAMENTO_ESTOQUE"],"identifier":"VW_FECHAMENTO_ESTOQUE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_FECHAMENTO_ESTOQUE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_FECHAMENTO_ESTOQUE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_FECHAMENTO_ESTOQUE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_FORNECEDOR":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_FORNECEDOR"],"identifier":"VW_FORNECEDOR","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_FORNECEDOR","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_FORNECEDOR`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_FORNECEDOR","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_GRUPO":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_GRUPO"],"identifier":"VW_GRUPO","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_GRUPO","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_GRUPO`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_GRUPO","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_MATERIAL":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_MATERIAL"],"identifier":"VW_MATERIAL","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_MATERIAL","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_MATERIAL`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_MATERIAL","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_MATERIAL_EM_TRANSITO":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_MATERIAL_EM_TRANSITO"],"identifier":"VW_MATERIAL_EM_TRANSITO","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_MATERIAL_EM_TRANSITO","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_MATERIAL_EM_TRANSITO`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_MATERIAL_EM_TRANSITO","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_MATERIAL_REFERENCIA":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_MATERIAL_REFERENCIA"],"identifier":"VW_MATERIAL_REFERENCIA","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_MATERIAL_REFERENCIA","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_MATERIAL_REFERENCIA`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_MATERIAL_REFERENCIA","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_MOVIMENTACAO":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_MOVIMENTACAO"],"identifier":"VW_MOVIMENTACAO","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_MOVIMENTACAO","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_MOVIMENTACAO`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_MOVIMENTACAO","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_MOV_ESTOQUE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_MOV_ESTOQUE"],"identifier":"VW_MOV_ESTOQUE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_MOV_ESTOQUE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_MOV_ESTOQUE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_MOV_ESTOQUE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_ORGAO":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_ORGAO"],"identifier":"VW_ORGAO","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_ORGAO","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_ORGAO`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_ORGAO","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_POSICAO_FECHADA_ESTOQUE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_POSICAO_FECHADA_ESTOQUE"],"identifier":"VW_POSICAO_FECHADA_ESTOQUE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_POSICAO_FECHADA_ESTOQUE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_POSICAO_FECHADA_ESTOQUE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_POSICAO_FECHADA_ESTOQUE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_RAMO_ATIVIDADE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_RAMO_ATIVIDADE"],"identifier":"VW_RAMO_ATIVIDADE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_RAMO_ATIVIDADE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_RAMO_ATIVIDADE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_RAMO_ATIVIDADE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_RESPONSAVEL_UNIDADE_ARMAZENADORA":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_RESPONSAVEL_UNIDADE_ARMAZENADORA"],"identifier":"VW_RESPONSAVEL_UNIDADE_ARMAZENADORA","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_RESPONSAVEL_UNIDADE_ARMAZENADORA","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_RESPONSAVEL_UNIDADE_ARMAZENADORA`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_RESPONSAVEL_UNIDADE_ARMAZENADORA","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_SALDO_MENSAL_ESTOQUE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_SALDO_MENSAL_ESTOQUE"],"identifier":"VW_SALDO_MENSAL_ESTOQUE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_SALDO_MENSAL_ESTOQUE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_SALDO_MENSAL_ESTOQUE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_SALDO_MENSAL_ESTOQUE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_SANCAO_ADMINISTRATIVA":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_SANCAO_ADMINISTRATIVA"],"identifier":"VW_SANCAO_ADMINISTRATIVA","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_SANCAO_ADMINISTRATIVA","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_SANCAO_ADMINISTRATIVA`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_SANCAO_ADMINISTRATIVA","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_SERVICO":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_SERVICO"],"identifier":"VW_SERVICO","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_SERVICO","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_SERVICO`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_SERVICO","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_SUBCLASSE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_SUBCLASSE"],"identifier":"VW_SUBCLASSE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_SUBCLASSE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_SUBCLASSE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_SUBCLASSE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_UNIDADE":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_UNIDADE"],"identifier":"VW_UNIDADE","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_UNIDADE","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_UNIDADE`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_UNIDADE","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_UNIDADE_ARMAZENADORA":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_UNIDADE_ARMAZENADORA"],"identifier":"VW_UNIDADE_ARMAZENADORA","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_UNIDADE_ARMAZENADORA","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_UNIDADE_ARMAZENADORA`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_UNIDADE_ARMAZENADORA","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_UNIDADE_SERVICO":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_UNIDADE_SERVICO"],"identifier":"VW_UNIDADE_SERVICO","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_UNIDADE_SERVICO","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_UNIDADE_SERVICO`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_UNIDADE_SERVICO","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_USUARIO_RESPONSAVEL_AUXILIAR":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_USUARIO_RESPONSAVEL_AUXILIAR"],"identifier":"VW_USUARIO_RESPONSAVEL_AUXILIAR","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_USUARIO_RESPONSAVEL_AUXILIAR","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_USUARIO_RESPONSAVEL_AUXILIAR`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_USUARIO_RESPONSAVEL_AUXILIAR","unrendered_config":{}},"source.queries.compras_materiais_servicos_sigma_staging.VW_USUARIO_SISTEMA":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-smfp","fqn":["queries","raw","sigma","VW_USUARIO_SISTEMA"],"identifier":"VW_USUARIO_SISTEMA","loaded_at_field":"","loaded_at_query":"","loader":"","name":"VW_USUARIO_SISTEMA","original_file_path":"models/raw/sigma/_sigma__sources.yml","package_name":"queries","patch_path":"models/raw/sigma/_sigma__sources.yml","path":"models/raw/sigma/_sigma__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-smfp`.`compras_materiais_servicos_sigma_staging`.`VW_USUARIO_SISTEMA`","resource_type":"source","schema":"compras_materiais_servicos_sigma_staging","source_description":"","source_name":"compras_materiais_servicos_sigma_staging","unique_id":"source.queries.compras_materiais_servicos_sigma_staging.VW_USUARIO_SISTEMA","unrendered_config":{}},"source.queries.ergon_saude_staging.orgaos":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","marts","ergon_saude","orgaos"],"identifier":"orgaos","loaded_at_field":"","loaded_at_query":"","loader":"","name":"orgaos","original_file_path":"models/marts/ergon_saude/_ergon_saude__sources.yml","package_name":"queries","patch_path":"models/marts/ergon_saude/_ergon_saude__sources.yml","path":"models/marts/ergon_saude/_ergon_saude__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`unidades_administrativas_staging`.`orgaos`","resource_type":"source","schema":"unidades_administrativas_staging","source_description":"","source_name":"ergon_saude_staging","unique_id":"source.queries.ergon_saude_staging.orgaos","unrendered_config":{}},"source.queries.ocr_radar.equipamento":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-cetrio","fqn":["queries","raw","ocr_radar","equipamento"],"identifier":"equipamento","loaded_at_field":"","loaded_at_query":"","loader":"","name":"equipamento","original_file_path":"models/raw/ocr_radar/_ocr_radar__sources.yml","package_name":"queries","patch_path":"models/raw/ocr_radar/_ocr_radar__sources.yml","path":"models/raw/ocr_radar/_ocr_radar__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-cetrio`.`ocr_radar`.`equipamento`","resource_type":"source","schema":"ocr_radar","source_description":"","source_name":"ocr_radar","unique_id":"source.queries.ocr_radar.equipamento","unrendered_config":{}},"source.queries.unidades_administrativas_staging.orgaos":{"columns":{},"config":{"enabled":true,"quoting":{"database":true,"identifier":true,"schema":true}},"database":"rj-iplanrio","fqn":["queries","raw","unidades_administrativas","orgaos"],"identifier":"orgaos","loaded_at_field":"","loaded_at_query":"","loader":"","name":"orgaos","original_file_path":"models/raw/unidades_administrativas/_unidades_administrativas__sources.yml","package_name":"queries","patch_path":"models/raw/unidades_administrativas/_unidades_administrativas__sources.yml","path":"models/raw/unidades_administrativas/_unidades_administrativas__sources.yml","quoting":{"database":true,"identifier":true,"schema":true},"relation_name":"`rj-iplanrio`.`unidades_administrativas_staging`.`orgaos`","resource_type":"source","schema":"unidades_administrativas_staging","source_description":"","source_name":"unidades_administrativas_staging","unique_id":"source.queries.unidades_administrativas_staging.orgaos","unrendered_config":{}}},"unit_tests":{}}