---
description: 
globs: models/**/*.sql,models/**/*.yml
alwaysApply: false
---
# IplanRio Testing Conventions

## Test Naming Conventions

### Standard Test Name Pattern
All tests should follow this naming pattern:
```
{layer}_{dataset}_{table}__{column}__{test_name}
```

Where:
- `layer`: The data layer (e.g., raw, staging, mart)
- `dataset`: The business domain or system (e.g., saude, educacao)
- `table`: The specific table being tested
- `column`: The column being tested (use 'table' for table-level tests)
- `test_name`: The specific test being performed

Examples:
```yaml
version: 2

models:
  - name: fct_atendimentos
    columns:
      - name: id_atendimento
        data_tests:
            - unique:
                name: mart_saude_fct_atendimentos__id_atendimento__unique
            - not_null:
                name: mart_saude_fct_atendimentos__id_atendimento__not_null
      - name: paciente_idade
        data_tests:
            - dbt_expectations.expect_column_mean_to_be_between:
              name: mart_saude_fct_atendimentos__paciente_idade__mean_between_20_and_70
              min_value: 20
              max_value: 70

```

### Singular Tests
Files should be named following the same pattern:
```
tests/
  ├── raw_sisreg_atendimentos__valor__assert_positive.sql
  ├── staging_saude_pacientes__cpf__check_format.sql
  └── mart_saude_fct_atendimentos__table__validate_business_hours.sql
```

### Custom Generic Tests
Custom generic test macros should follow the same naming pattern:
```
macros/
  └── tests/
      ├── raw_generic_any_cep__valid_format.sql
      ├── raw_generic_any_sus_card__valid_number.sql
      └── mart_generic_any_date__within_business_hours.sql
```

Note: For generic tests that can be applied across multiple datasets/tables, use 'generic' as the dataset and 'any' as the table name.

## Required Tests
Every model should have at minimum:

1. Primary Key Tests:
```yaml
version: 2

models:
  - name: your_model
    columns:
      - name: id_column
        data_tests:
            - unique
            - not_null
```

2. Foreign Key Tests:
```yaml
version: 2

models:
  - name: your_model
    columns:
      - name: id_foreign
        data_tests:
            - relationships:
                to: ref('parent_model')
                field: id
```

3. Data Quality Tests:
- Add tests for business-critical columns
- Test for expected value ranges
- Test for valid formats (e.g., CPF, dates)

## Custom Data Tests
Create singular tests for complex business rules:

```sql
-- tests/assert_valid_business_rule.sql
select *
from {{ ref('your_model') }}
where -- condition that should return 0 rows
```

## Composite Unique Tests
For multi-column unique constraints:

```yaml
version: 2

models:
  - name: your_model
    data_tests:
        - dbt_utils.unique_combination_of_columns:
            combination_of_columns:
                - column_1
                - column_2
```

## Test Severity Levels
Configure test severity appropriately:
```yaml
version: 2

models:
  - name: your_model
    columns:
      - name: critical_column
        data_tests:
          - unique:
              name:   
              severity: error
          - not_null:
              severity: error
      - name: non_critical_column
        data_tests:
          - unique:
              severity: warn
              warn_if: ">10"
              error_if: ">100"
```
